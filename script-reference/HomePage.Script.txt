
<manialink name="Page_HomePage" version="3">

<!-- @Component start component-menulibs-tools -->
<framemodel id="component-menulibs-tools">
		</framemodel>
<!-- @Component end component-menulibs-tools -->

<!-- @Component start component-checkbox -->
<framemodel id="component-checkbox">
<frame id="ComponentCheckbox_frame-checkbox-align" class="ComponentCheckbox_frame-container-checkbox">
	<quad id="ComponentCheckbox_quad-activation" class="component-navigation-item-zone" halign="center" valign="center" z-index="1" opacity="0" scriptevents="1"/>
	<quad id="ComponentCheckbox_quad-icon" bgcolor="FFF" halign="center" valign="center" size="7 7" />
	<label id="ComponentCheckbox_label-checkbox" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="$t$i" textfont="GameFontSemiBold"/>
	<label id="ComponentCheckbox_label-mirror-checkbox" size="50 10" halign="center" valign="center2" textsize="3" textcolor="FFF" textprefix="$t$i" textfont="GameFontSemiBold"/>
</frame>
		</framemodel>
<!-- @Component end component-checkbox -->

<!-- @Component start component-transition -->
<framemodel id="component-transition">
		</framemodel>
<!-- @Component end component-transition -->

<!-- @Component start share-menu-navigation -->
<framemodel id="share-menu-navigation">
		</framemodel>
<!-- @Component end share-menu-navigation -->

<!-- @Component start component-navigation -->
<framemodel id="component-navigation">
		</framemodel>
<!-- @Component end component-navigation -->

<!-- @Component start router -->
<framemodel id="router">
		</framemodel>
<!-- @Component end router -->

<!-- @Component start structures-club -->
<framemodel id="structures-club">
		</framemodel>
<!-- @Component end structures-club -->

<!-- @Component start lib-rbac -->
<framemodel id="lib-rbac">
		</framemodel>
<!-- @Component end lib-rbac -->

<!-- @Component start structures-matchmaking -->
<framemodel id="structures-matchmaking">
		</framemodel>
<!-- @Component end structures-matchmaking -->

<!-- @Component start lib-common-http-authorization-header -->
<framemodel id="lib-common-http-authorization-header">
		</framemodel>
<!-- @Component end lib-common-http-authorization-header -->

<!-- @Component start lib-common-http -->
<framemodel id="lib-common-http">
		</framemodel>
<!-- @Component end lib-common-http -->

<!-- @Component start lib-http-struct -->
<framemodel id="lib-http-struct">
		</framemodel>
<!-- @Component end lib-http-struct -->

<!-- @Component start lib-tmnext-config -->
<framemodel id="lib-tmnext-config">
		</framemodel>
<!-- @Component end lib-tmnext-config -->

<!-- @Component start lib-common-http-club-authorization-header -->
<framemodel id="lib-common-http-club-authorization-header">
		</framemodel>
<!-- @Component end lib-common-http-club-authorization-header -->

<!-- @Component start component-matchmaking-api -->
<framemodel id="component-matchmaking-api">
</framemodel>
<!-- @Component end component-matchmaking-api -->

<!-- @Component start lib-campaign-struct -->
<framemodel id="lib-campaign-struct">
		</framemodel>
<!-- @Component end lib-campaign-struct -->

<!-- @Component start lib-api-leaderboard -->
<framemodel id="lib-api-leaderboard"></framemodel>
<!-- @Component end lib-api-leaderboard -->

<!-- @Component start lib-common-task -->
<framemodel id="lib-common-task">
		</framemodel>
<!-- @Component end lib-common-task -->

<!-- @Component start component-commonlibs-platform -->
<framemodel id="component-commonlibs-platform"></framemodel>
<!-- @Component end component-commonlibs-platform -->

<!-- @Component start lib-common-store -->
<framemodel id="lib-common-store">
		</framemodel>
<!-- @Component end lib-common-store -->

<!-- @Component start lib-user-store -->
<framemodel id="lib-user-store">
		</framemodel>
<!-- @Component end lib-user-store -->

<!-- @Component start component-loadingspinner -->
<framemodel id="component-loadingspinner">
<quad id="ComponentLoadingSpinner_quad-loading" halign="center" valign="center" image="file://Media/Manialinks/Nadeo/MenuLibs/LoadingSpinner.dds" size="15 15" hidden="1"/>
<label id="ComponentLoadingSpinner_label-loading" pos="0 -15" halign="center" valign="center2" size="75 15" textfont="GameFontRegular" textcolor="fff" textsize="5" hidden="1"/>
</framemodel>
<!-- @Component end component-loadingspinner -->

<!-- @Component start component-tmnext-button -->
<framemodel id="component-tmnext-button">
<frame class="ComponentTMNextButton_frame-button-container" id="ComponentTMNextButton_frame-align">
	<frame id="ComponentTMNextButton_frame-background">
		<quad id="ComponentTMNextButton_quad-image" bgcolor="005948" size="40 10" z-index="0"/>
		<quad id="ComponentTMNextButton_quad-gradient" z-index="1" hidden="1"/>
		<quad id="ComponentTMNextButton_quad-contour" z-index="2" hidden="1"/>
		<frame id="frame-hitbox-clip">
			<quad size="40 10" scriptevents="1" class="component-navigation-item-zone" id="ComponentTMNextButton_quad-background"/>
		</frame>
		<quad id="ComponentTMNextButton_quad-focus-background" z-index="1" size="40 10" bgcolor="005948" hidden="1"/>
	</frame>
	<frame id="ComponentTMNextButton_frame-content" z-index="1">
		<frame id="ComponentTMNextButton_frame-icon" z-index="1">
			<quad size="10 10" bgcolor="FFF" id="ComponentTMNextButton_quad-icon" />
			<quad z-index="1" size="10 10" bgcolor="005948" id="ComponentTMNextButton_quad-focus-icon" hidden="1"/>
		</frame>
		<label pos="20 -5" z-index="10" size="39 9" halign="center" valign="center2" textsize="3" textprefix="$t$i" textfont="GameFontSemiBold" textcolor="FFF" id="ComponentTMNextButton_label-value" />
	</frame>
	<frameinstance id="ComponentTMNextButton_spinner-loading" modelid="component-loadingspinner" z-index="2" />
</frame>
		</framemodel>
<!-- @Component end component-tmnext-button -->

<!-- @Component start component-commonlibs-audio-manager -->
<framemodel id="component-commonlibs-audio-manager">
		</framemodel>
<!-- @Component end component-commonlibs-audio-manager -->

<!-- @Component start menu-libs-scroll -->
<framemodel id="menu-libs-scroll">
<frame class="MenuLibsScroll_scroll-widgets">
	<frameinstance id="MenuLibsScroll_frame-loading-spinner" modelid="component-loadingspinner" z-index="3"/>
	<label halign="center" valign="bottom" textsize="8" text="î¥Œ" hidden="1" scriptevents="1" id="MenuLibsScroll_label-scroll-indicator" />
	<quad halign="center" valign="bottom" size="8 8" hidden="1" scriptevents="1" id="MenuLibsScroll_quad-scroll-indicator" />
	<frame hidden="1" id="MenuLibsScroll_frame-scrollbar">
		<frame id="MenuLibsScroll_frame-scrollbar-during-scroll">
			<frame z-index="0" id="MenuLibsScroll_frame-scrollbar-bg">
				<quad halign="center" rot="180" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/MenuLibs/ScrollBar_TopBottom.dds" scriptevents="1" class="MenuLibsScroll_scrollbar-bg" id="MenuLibsScroll_quad-top" />
				<quad halign="center" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/MenuLibs/ScrollBar_Center.dds" scriptevents="1" class="MenuLibsScroll_scrollbar-bg" id="MenuLibsScroll_quad-center" />
				<quad halign="center" opacity="0.3" colorize="ffffff" image="file://Media/Manialinks/Nadeo/MenuLibs/ScrollBar_TopBottom.dds" scriptevents="1" class="MenuLibsScroll_scrollbar-bg" id="MenuLibsScroll_quad-bottom" />
			</frame>
			<frame z-index="1" id="MenuLibsScroll_frame-scrollbar-fg">
				<quad halign="center" rot="180" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/MenuLibs/ScrollBar_TopBottom.dds" scriptevents="1" class="MenuLibsScroll_scrollbar-fg" id="MenuLibsScroll_quad-top" />
				<quad halign="center" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/MenuLibs/ScrollBar_Center.dds" scriptevents="1" class="MenuLibsScroll_scrollbar-fg" id="MenuLibsScroll_quad-center" />
				<quad halign="center" opacity="0.8" colorize="ffffff" image="file://Media/Manialinks/Nadeo/MenuLibs/ScrollBar_TopBottom.dds" scriptevents="1" class="MenuLibsScroll_scrollbar-fg" id="MenuLibsScroll_quad-bottom" />
			</frame>
		</frame>
	</frame>
</frame>
		</framemodel>
<!-- @Component end menu-libs-scroll -->

<!-- @Component start component-menulibs-menusounds -->
<framemodel id="component-menulibs-menusounds">
</framemodel>
<!-- @Component end component-menulibs-menusounds -->

<!-- @Component start component-time-of-day -->
<framemodel id="component-time-of-day">
		</framemodel>
<!-- @Component end component-time-of-day -->

<!-- @Component start component-mainbackground -->
<framemodel id="component-mainbackground">
<stylesheet>
	<style class="ComponentMainBackground_background" size="320 180" halign="center" valign="center" keepratio="fit"/>
</stylesheet>

<frame id="ComponentMainBackground_frame-global">
	<quad id="ComponentMainBackground_quad-night" image="file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Night.dds" fullscreen="1" opacity="1." class="ComponentMainBackground_background" z-index="0" />
	<quad id="ComponentMainBackground_quad-day" image="file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Day.dds" fullscreen="1" opacity="0." class="ComponentMainBackground_background" z-index="1" />
	<quad id="ComponentMainBackground_quad-morning" image="file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Morning.dds" fullscreen="1" opacity="0." class="ComponentMainBackground_background" z-index="2" />
	<quad id="ComponentMainBackground_quad-evening" image="file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Evening.dds" fullscreen="1" opacity="0." class="ComponentMainBackground_background" z-index="3" />
</frame>
		</framemodel>
<!-- @Component end component-mainbackground -->

<!-- @Component start component-menulibs-helpers -->
<framemodel id="component-menulibs-helpers">
		</framemodel>
<!-- @Component end component-menulibs-helpers -->

<!-- @Component start component-controller-info -->
<framemodel id="component-controller-info">
		</framemodel>
<!-- @Component end component-controller-info -->

<!-- @Component start component-menulibs-expendable-button -->
<framemodel id="component-menulibs-expendable-button">
<frame id="MenuLibsExpendableButton_frame-button-align" class="MenuLibsExpendableButton_expendable-button">
	<frame id="MenuLibsExpendableButton_frame-background" z-index="0">
		<quad id="MenuLibsExpendableButton_quad-bg-left" />
		<quad id="MenuLibsExpendableButton_quad-bg-center" />
		<quad id="MenuLibsExpendableButton_quad-bg-right" />
	</frame>
	<frame id="MenuLibsExpendableButton_frame-focus" z-index="1">
		<quad id="MenuLibsExpendableButton_quad-focus-left" opacity="0" />
		<quad id="MenuLibsExpendableButton_quad-focus-center" opacity="0" />
		<quad id="MenuLibsExpendableButton_quad-focus-right" opacity="0" />
	</frame>
	<quad id="MenuLibsExpendableButton_quad-button-icon" z-index="2" valign="center" />
	<frame id="MenuLibsExpendableButton_frame-button-text-align" z-index="3">
		<!--
		We MUST initialize the label with a textprefix value.
		Otherwise the `TextPrefix` property initialization in the
		script will be bugged. The latest `TextPrefix` applied
		will also be applied to all other labels that had their
		`TextPrefix` updated.
		-->
		<label id="MenuLibsExpendableButton_label-button-text" valign="center2" textprefix="$z" />
	</frame>

	<frame id="MenuLibsExpendableButton_frame-hitbox-clip" z-index="4" >
		<quad id="MenuLibsExpendableButton_quad-nav-zone" class="component-navigation-item-zone" z-index="4" halign="center" valign="center" bgcolor="ff0000" scriptevents="1" />
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-menulibs-expendable-button -->

<!-- @Component start component-tmnext-expendable-button -->
<framemodel id="component-tmnext-expendable-button">
		</framemodel>
<!-- @Component end component-tmnext-expendable-button -->

<!-- @Component start component-menulibs-grid -->
<framemodel id="component-menulibs-grid">
</framemodel>
<!-- @Component end component-menulibs-grid -->

<!-- @Component start component-tmnext-pop-up-background-2 -->
<framemodel id="component-tmnext-pop-up-background-2">
<frame class="TMNextPopUpBackground2_pop-up-background">
	<quad id="TMNextPopUpBackground2_quad-dimmer" z-index="0" size="320 180" halign="center" valign="center" fullscreen="1" scriptevents="1" />
	<frame id="TMNextPopUpBackground2_frame-background" z-index="2">
		<frame id="TMNextPopUpBackground2_frame-align">
			<quad id="TMNextPopUpBackground2_quad-background" z-index="0" image="file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Common_MainPopup.dds" opacity="0.95"/>
			<quad id="TMNextPopUpBackground2_quad-header-image" z-index="1" halign="right" alphamask="file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Common_MainPopup_Header_Mask.dds" />
			<quad id="TMNextPopUpBackground2_quad-header-gradient" z-index="2" halign="right" image="file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Common_MainPopup_Header_Gradient.dds" />
			<quad id="TMNextPopUpBackground2_button-leave" z-index="3" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/256x256/Icones_256_icon_cross_oblique.dds" size="7 7" halign="center" valign="center" colorize="FFF" scriptevents="1" />
			<frame id="TMNextPopUpBackground2_frame-background-hitbox" z-index="2">
				<quad id="TMNextPopUpBackground2_quad-background-hitbox" rot="10." halign="right" scriptevents="1" />
			</frame>
		</frame>
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-tmnext-pop-up-background-2 -->

<!-- @Component start component-textfield -->
<framemodel id="component-textfield">
<stylesheet>
	<style class="ComponentTextField_quad-default" halign="center" valign="center"/>
	<style class="ComponentTextField_text-default" halign="center" valign="center2" textfont="GameFontSemiBold" textsize="3" textprefix="$t$i" textcolor="FFF"/>
</stylesheet>

<frame id="ComponentTextField_frame-text-field-align" class="ComponentTextField_frame-container-text-field" >
	<quad id="ComponentTextField_quad-activation" class="component-navigation-item-zone ComponentTextField_quad-default" scriptevents="1" opacity="0" z-index="10"/>
	<entry id="ComponentTextField_entry-label" size="110 10" class="ComponentTextField_text-default" focusareacolor1="00000000" focusareacolor2="00000000" textsize="5"/>
	<textedit id="ComponentTextField_textedit-label" size="110 28" pos="0 -1.5" class="ComponentTextField_text-default" focusareacolor1="00000000" focusareacolor2="00000000" textsize="5." linespacing="1.1" hidden="1"/>
	<frameinstance id="ComponentTextField_button-background" modelid="component-menulibs-expendable-button" data-styles="component-tmnext-expendable-button-style-stack component-tmnext-expendable-button-style-align-center" z-index="-1"/>
</frame>
		</framemodel>
<!-- @Component end component-textfield -->

<!-- @Component start component-popupmultichoice2 -->
<framemodel id="component-popupmultichoice2">
<frame class="class-component-popupmultichoice2">
	<frame z-index="1" id="navcontainer-component-popupmultichoice2" class="component-navigation-container">
		<frameinstance id="ComponentPopUpMultiChoice2_frame-background" modelid="component-tmnext-pop-up-background-2" data-styles="secondary-pop-up-with-header" z-index="0"/>
		<label id="ComponentPopUpMultiChoice2_label-title" halign="center" valign="center2" textcolor="FFFFFF" z-index="1"/>
		<frame id="ComponentPopUpMultiChoice2_frame-description-container" class="component-grid-container" z-index="1">

			<label id="ComponentPopUpMultiChoice2_label-description-line-0" class="component-grid-element" data-grid-row="0" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

			<label id="ComponentPopUpMultiChoice2_label-description-line-1" class="component-grid-element" data-grid-row="1" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

			<label id="ComponentPopUpMultiChoice2_label-description-line-2" class="component-grid-element" data-grid-row="2" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

			<label id="ComponentPopUpMultiChoice2_label-description-line-3" class="component-grid-element" data-grid-row="3" halign="center" valign="center2" autonewline="1" z-index="1" hidden="1"/>

		</frame>

		<frame id="ComponentPopUpMultiChoice2_frame-scroll-view" z-index="2">
			<frameinstance modelid="menu-libs-scroll" data-scroll-parent="ComponentPopUpMultiChoice2_frame-scroll-choices" z-index="1" />
			<frame
				id="ComponentPopUpMultiChoice2_frame-scroll-choices"
				pos="-50. 19."
				class="menu-libs-scroll-window component-navigation-item class-component-popupmultichoice2-navigation"
				data-pager-page-size="10"
				data-elements-per-line="1"
				data-element-size="100. 10."
				data-margin-size="0. 0."
				data-window-size="100. 50."
				data-header-height="0."
				data-footer-height="0."
				data-scroll-indicator-x-offset="-5."
				data-scroll-indicator-y-offset="-8."
				data-scroll-indicator-image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/ICON_ARROW_BOTTOM_OBLIQUE.dds"
				data-scroll-indicator-colorize="FFFFFF"
				data-scroll-indicator-size="10"
				data-scrollbar-xoffset="10."
				data-scrollpadding="17.5"
				data-scroll-locked="1"
				data-skew="-10."
				data-skew-valign="1"
				data-nav-group="navgroup-component-popupmultichoice2"
			>
				<quad z-index="-1" scriptevents="1" class="menu-libs-scroll-event" />

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="ComponentPopUpMultiChoice2_button-choice" modelid="component-menulibs-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="ComponentPopUpMultiChoice2_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="ComponentPopUpMultiChoice2_button-choice" modelid="component-menulibs-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="ComponentPopUpMultiChoice2_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="ComponentPopUpMultiChoice2_button-choice" modelid="component-menulibs-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="ComponentPopUpMultiChoice2_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="ComponentPopUpMultiChoice2_button-choice" modelid="component-menulibs-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="ComponentPopUpMultiChoice2_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="ComponentPopUpMultiChoice2_button-choice" modelid="component-menulibs-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="ComponentPopUpMultiChoice2_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="ComponentPopUpMultiChoice2_button-choice" modelid="component-menulibs-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="ComponentPopUpMultiChoice2_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			<frame class="menu-libs-scroll-element" hidden="1">
				<frameinstance id="ComponentPopUpMultiChoice2_button-choice" modelid="component-menulibs-expendable-button" pos="50. 0" z-index="0"/>
				<quad	id="ComponentPopUpMultiChoice2_quad-activation" pos="50. 0" size="100. 9." class="menu-libs-scroll-activation-zone" opacity="0" halign="center" scriptevents="1" z-index="1"/>
			</frame>

			</frame>
		</frame>

		<frameinstance
			id="ComponentPopUpMultiChoice2_button-first-choice" z-index="2"
			modelid="component-menulibs-expendable-button"
			class="component-navigation-item class-component-popupmultichoice2-navigation"
			data-nav-inputs="select;cancel;right"
			data-nav-targets="_;_;ComponentPopUpMultiChoice2_button-second-choice"
			data-nav-group="navgroup-component-popupmultichoice2"
			data-nav-zone="MenuLibsExpendableButton_quad-nav-zone"
		/>
		<frameinstance
			id="ComponentPopUpMultiChoice2_button-second-choice" z-index="2"
			modelid="component-menulibs-expendable-button"
			class="component-navigation-item class-component-popupmultichoice2-navigation"
			data-nav-inputs="select;cancel;left"
			data-nav-targets="_;_;ComponentPopUpMultiChoice2_button-first-choice"
			data-nav-group="navgroup-component-popupmultichoice2"
			data-nav-zone="MenuLibsExpendableButton_quad-nav-zone"
		/>
	</frame>
</frame>
		</framemodel>
<!-- @Component end component-popupmultichoice2 -->

<!-- @Component start lib-news-struct -->
<framemodel id="lib-news-struct">
		</framemodel>
<!-- @Component end lib-news-struct -->

<!-- @Component start lib-store-news -->
<framemodel id="lib-store-news">
		</framemodel>
<!-- @Component end lib-store-news -->

<stylesheet>
	<style class="text-extrabold" halign="center" valign="center2" textfont="GameFontExtraBold" textprefix="$t$i" textcolor="FFFFFF" textsize="2"/>
	<style class="text-regular" halign="center" valign="center2" textfont="GameFontRegular" textprefix="$t$i" textcolor="FFFFFF" textsize="3"/>
	<style class="quad-base" halign="center" valign="center"/>
</stylesheet>

<!-- Pop-ups -->
<frameinstance
	id="popupmultichoice-quit-game" z-index="6."
	modelid="component-popupmultichoice2"
	data-title="Â’Quit game"
	data-choices="{&quot;0&quot;:&quot;Â’Cancel&quot;,&quot;1&quot;:&quot;Â’Quit&quot;}"
	data-styles-secondchoice="component-tmnext-expendable-button-style-size-expendable component-tmnext-expendable-button-style-align-center component-tmnext-expendable-button-style-secondary component-tmnext-expendable-button-style-warning"
	hidden="1"
/>
<frameinstance
	id="popupmultichoice-cross-play" z-index="6."
	modelid="component-popupmultichoice2"
	data-title="Â’Cross platform play"
	data-description="[{&quot;TextFitLabelEnabled&quot;:false,&quot;TextFontSize&quot;:3,&quot;TextFont&quot;:&quot;GameFontSemiBold&quot;,&quot;TextPrefix&quot;:&quot;$t$i&quot;,&quot;TextValue&quot;:&quot;Â‘You are currently able to play with players from other networks. To play with %1 users only, disable this feature in the settings menu.Â‘Â’PC&quot;,&quot;TextSize&quot;:[130,30],&quot;TextColor&quot;:[1,1,1]}]"
	data-selection-required="true"
	hidden="1"
/>

<!-- Frame global -->
<frame id="frame-global">
	<frameinstance modelid="component-mainbackground" z-index="-2" hidden="False" />
	<camera id="camera-vehicle" halign="center" valign="center" size="320 180" z-index="-1" fullscreen="1" hidden="False" />

	<frameinstance
		id="button-play"
		modelid="component-menulibs-expendable-button"
		class="component-navigation-item"
		pos="-82.5943 42."
		z-index="1"
		data-text="Â’|HomePage|Play"
		data-supersample="1"
		data-styles="component-tmnext-expendable-button-style-stack component-tmnext-expendable-button-style-stack-top expendable-button-style-stack-homepage"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-settings;button-clubs;_;_"
		data-nav-group="navgroup-home-page"
		data-nav-zone="MenuLibsExpendableButton_quad-nav-zone"
	/>
	<frameinstance
		id="button-clubs"
		modelid="component-menulibs-expendable-button"
		class="component-navigation-item"
		pos="-84.9324 28.74"
		z-index="1"
		data-text="Â’|HomePage|Clubs"
		data-supersample="1"
		data-styles="component-tmnext-expendable-button-style-stack expendable-button-style-stack-homepage"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-play;button-create;_;_"
		data-nav-group="navgroup-home-page"
		data-nav-zone="MenuLibsExpendableButton_quad-nav-zone"
	/>
	<frameinstance
		id="button-create"
		modelid="component-menulibs-expendable-button"
		class="component-navigation-item"
		pos="-87.2705 15.48"
		z-index="1"
		data-text="Â’|HomePage|Create"
		data-supersample="1"
		data-styles="component-tmnext-expendable-button-style-stack expendable-button-style-stack-homepage"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-clubs;button-ubi-connect;_;_"
		data-nav-group="navgroup-home-page"
		data-nav-zone="MenuLibsExpendableButton_quad-nav-zone"
	/>
	<frameinstance
		id="button-ubi-connect"
		modelid="component-menulibs-expendable-button"
		class="component-navigation-item"
		pos="-89.6086 2.22"
		z-index="1"
		data-text="Ubisoft Connect"
		data-supersample="1"
		data-styles="component-tmnext-expendable-button-style-stack expendable-button-style-stack-homepage"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-create;button-news;_;_"
		data-nav-group="navgroup-home-page"
		data-nav-zone="MenuLibsExpendableButton_quad-nav-zone"
	/>
	<frameinstance id="button-news"
		modelid="component-tmnext-button"
		z-index="1"
		pos="-94.9143 -27.8702"
		class="component-navigation-item page-home-class-news"
		data-opacity="1."
		data-size="88.368 45.024"
		data-image="file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_BG.dds"
		data-imagefocus="file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_BG.dds"
		data-alphamask="file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_Mask.dds"
		data-contourimage="file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_Contour.dds"
		data-contourimagecolor="6EFAA0"
		data-contouropacityunfocus=".0"
		data-contouropacityfocus="1."
		data-backgroundcolortype="0"
		data-halign="center"
		data-valign="center"
		data-tilthitbox="10"
		data-supersample="1"

		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-ubi-connect;button-settings;_;_"
		data-nav-group="navgroup-home-page"
		data-nav-zone="ComponentTMNextButton_quad-background"
	/>

	<quad id="quad-tmp-news-image" z-index="2" opacity="0." pos="-94.9143 -27.8702" size="88.368 45.024" alphamask="file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_Mask.dds" class="quad-base" />
	<quad id="quad-news-shadow" z-index="3" pos="-94.9143 -27.8702" size="88.368 45.024" image="file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_Gradient.dds" colorize="000" class="quad-base" />
	<label id="label-news" z-index="4" pos="-97.0302 -39.8702" size="70.6944 20" autonewline="1" maxline="2" class="text-extrabold" />

	<frame id="frame-news-tabs" z-index="4" pos="-66.1 -47.2582" hidden="1">
		<quad id="quad-news-tabs-bg" size="17.136 6.048" image="file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_Tabs_BG.dds" colorize="C4C4C4" opacity="0.6" class="quad-base" scriptevents="1" />
		<frame id="frame-news-tabs-buttons-focus" z-index="1">
			<quad id="quad-news-pager-1" size="2.5 2.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/icons_128_RadioButton_On.dds" colorize="FFFFFF" opacity="0" class="quad-base news-pager component-navigation-item" scriptevents="1" data-key="0" data-nav-inputs="select" data-nav-targets="_" data-nav-group="navgroup-home-page-mouseonly" />
			<quad id="quad-news-pager-2" size="2.5 2.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/icons_128_RadioButton_On.dds" colorize="FFFFFF" opacity="0" class="quad-base news-pager component-navigation-item" scriptevents="1" data-key="1" data-nav-inputs="select" data-nav-targets="_" data-nav-group="navgroup-home-page-mouseonly" />
			<quad id="quad-news-pager-3" size="2.5 2.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/icons_128_RadioButton_On.dds" colorize="FFFFFF" opacity="0" class="quad-base news-pager component-navigation-item" scriptevents="1" data-key="2" data-nav-inputs="select" data-nav-targets="_" data-nav-group="navgroup-home-page-mouseonly" />
		</frame>
		<frame id="frame-news-tabs-buttons-off" z-index="2">
			<quad size="2.5 2.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/icons_128_RadioButton_Off.dds" colorize="FFFFFF" class="quad-base" />
			<quad size="2.5 2.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/icons_128_RadioButton_Off.dds" colorize="FFFFFF" class="quad-base" />
			<quad size="2.5 2.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/icons_128_RadioButton_Off.dds" colorize="FFFFFF" class="quad-base" />
		</frame>
		<quad id="quad-button-on" z-index="3" size="2.5 2.5" image="file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/icons_128_RadioButton_On.dds" colorize="6EFAA0" class="quad-base" />
	</frame>

	<frameinstance
		id="button-settings"
		modelid="component-menulibs-expendable-button"
		class="component-navigation-item"
		pos="-151.5 -73"
		z-index="1"
		data-text="Â’|HomePage|Settings"
		data-styles="component-tmnext-expendable-button-style-size-expendable component-tmnext-expendable-button-style-align-center"
		data-halign="left"
		data-nav-inputs="select;cancel;up;down;right;left"
		data-nav-targets="_;_;button-news;button-play;_;_"
		data-nav-group="navgroup-home-page"
		data-nav-zone="MenuLibsExpendableButton_quad-nav-zone"
	/>
</frame>

<script><!--

// @Component start component-menulibs-tools
// /*

#Include "TextLib" as ComponentMenuLibsTools_TL
#Include "MathLib" as ComponentMenuLibsTools_ML
#Include "ColorLib" as ComponentMenuLibsTools_CL
#Include "TimeLib" as ComponentMenuLibsTools_TiL

#Struct ComponentMenuLibsTools_K_JoinLink { Text Full; Text Type; Text ServerLoginOrIp; Text Password; Text Port; Text Title; }

#Const ComponentMenuLibsTools_C_HAlign_Left "left"
#Const ComponentMenuLibsTools_C_HAlign_Center "center"
#Const ComponentMenuLibsTools_C_HAlign_Right "right"

#Const ComponentMenuLibsTools_C_VAlign_Top "top"
#Const ComponentMenuLibsTools_C_VAlign_Center "center"
#Const ComponentMenuLibsTools_C_VAlign_Center2 "center2"
#Const ComponentMenuLibsTools_C_VAlign_Bottom "bottom"

#Const ComponentMenuLibsTools_C_FitLabelMaxSteps 15.
#Const ComponentMenuLibsTools_C_TagForbiddenTags ["$h", "$l", "$<", "$>", "\n", "\r", "\t"]
#Const ComponentMenuLibsTools_C_TagMaxLength 64
#Const ComponentMenuLibsTools_C_LiveApiRankRoundingStart 10000
#Const ComponentMenuLibsTools_C_DefaultMouseActivationDelay 1000

// */
// @Component end component-menulibs-tools

// @Component start component-checkbox
// /*

#Include "TextLib" as ComponentCheckbox_TL
#Include "ColorLib" as ComponentCheckbox_CL
#Include "MathLib" as ComponentCheckbox_ML

#Const ComponentCheckbox_C_EventType_Check 0
#Const ComponentCheckbox_C_FocusAnimDuration 250

#Struct ComponentCheckbox_K_TextProperties {
	Text Value;
	Real TextSize;
	Text TextPrefix;
	Text Font;
	Vec3 Color;
	Vec3 FocusColor;
	Real PosX;
	Real PosY;
	Text HAlign;
	Text VAlign;
	Real ItalicSlope;
	Vec2 Size;
	Real Fit;
	Boolean AutoNewLine;
	Integer MaxLine;
}

#Struct ComponentCheckbox_K_ImageProperties {
	Vec2 Size;
	Vec3 Color;
	Vec3 FocusColor;
	Real PosX;
	Real PosY;
	Text ImageChecked;
	Text ImageUnchecked;
}

#Struct ComponentCheckbox_K_Properties {
	Text HAlign;
	Text VAlign;
	Boolean IsCheckbox;
	Boolean IsChecked;
	Boolean IsLocked;
	Boolean IsFocused;
	Real OpacityFocus;
	Real OpacityUnfocus;
	ComponentCheckbox_K_TextProperties Label;
	ComponentCheckbox_K_ImageProperties Icon;
	Text LabelMirrorValue;
}

// */
// @Component end component-checkbox

// @Component start component-transition
// /*

#Include "TextLib" as ComponentTransition_TL


#Struct ComponentTransition_K_ControlProperties {
	Boolean UsePosition;
	Vec2 Position;
	Boolean UseZIndex;
	Real ZIndex;
	Boolean UseSize;
	Vec2 Size;
	Boolean UseScale;
	Real Scale;
	Boolean UseRotation;
	Real Rotation;
	Boolean UseVisible;
	Boolean Visible;
}


#Struct ComponentTransition_K_TransitionProperties {
	Boolean UseTransition;
	ComponentTransition_K_ControlProperties TransitionIn;
	ComponentTransition_K_ControlProperties TransitionOut;
}

// */
// @Component end component-transition

// @Component start share-menu-navigation
// /*

#Include "TextLib" as ShareMenuNavigation_TL

#Const ShareMenuNavigation_C_TextToMenuNavAction [
	"::EMenuNavAction::Up" => CMlScriptEvent::EMenuNavAction::Up,
	"::EMenuNavAction::Right" => CMlScriptEvent::EMenuNavAction::Right,
	"::EMenuNavAction::Left" => CMlScriptEvent::EMenuNavAction::Left,
	"::EMenuNavAction::Down" => CMlScriptEvent::EMenuNavAction::Down,
	"::EMenuNavAction::Select" => CMlScriptEvent::EMenuNavAction::Select,
	"::EMenuNavAction::Cancel" => CMlScriptEvent::EMenuNavAction::Cancel,
	"::EMenuNavAction::PageUp" => CMlScriptEvent::EMenuNavAction::PageUp,
	"::EMenuNavAction::PageDown" => CMlScriptEvent::EMenuNavAction::PageDown,
	"::EMenuNavAction::AppMenu" => CMlScriptEvent::EMenuNavAction::AppMenu,
	"::EMenuNavAction::Action1" => CMlScriptEvent::EMenuNavAction::Action1,
	"::EMenuNavAction::Action2" => CMlScriptEvent::EMenuNavAction::Action2,
	"::EMenuNavAction::ScrollUp" => CMlScriptEvent::EMenuNavAction::ScrollUp,
	"::EMenuNavAction::ScrollDown" => CMlScriptEvent::EMenuNavAction::ScrollDown
]

#Struct ShareMenuNavigation_K_MenuNavigationEvent {
	CMlScriptEvent::EMenuNavAction MenuNavAction;
	Boolean IsActionAutoRepeat;
	Integer UserIndex;
	Boolean IsFromMouse;
}

// */
// @Component end share-menu-navigation

// @Component start component-navigation
// /*

#Include "TextLib" as ComponentNavigation_TL

#Const ComponentNavigation_C_EventType_NavigateInput 0
#Const ComponentNavigation_C_EventType_NavigateMouse 1

#Const ComponentNavigation_C_MouseSleepDelay 5000


#Struct ComponentNavigation_K_NavigationSettings {
	Text[Text] InputTargets;
	Text Group;
	Text Zone;
	Boolean Focused;
	Boolean Locked;
}


#Struct ComponentNavigation_K_NavigationProperties {
	Boolean IsInitialized;
	CMlControl[CMlScriptEvent::EMenuNavAction] Actions;
	CMlControl[CMlScriptEvent::EMenuNavAction] SavedActions;
	Text Group;
	Boolean IsLocked;
}

#Struct ComponentNavigation_K_NavigationEvent {
	Integer Type;
	CMlControl From;
	CMlControl To;
	CMlFrame Container;
	CMlScriptEvent::EMenuNavAction Input;
	CMlScriptEvent::Type Mouse;
	Integer UserIndex;
	Boolean IsFromMouse;
}

// */
// @Component end component-navigation

// @Component start router
// /*

#Struct K_Router_URL { Text Path; Text QueryString; Text[Text] Query; }
#Struct K_Router_Route { K_Router_URL URL; K_Router_URL ParentURL; Ident LayerId; Text[] Overlays; Text[] ExcludedOverlays; Integer TransitionIn; Integer TransitionOut; Integer PreloadStatus; }
#Struct Router_K_URL_Config { Boolean SaveHistory; Boolean ResetPreviousPagesDisplayed; Boolean KeepPreviousPagesDisplayed; Boolean HidePreviousPage; Boolean ShowParentPage; Text[] ExcludeOverlays; }

#Const Router_C_Event_EnteringRoute "Router_EnteringRoute"
#Const Router_C_Event_LeavingRoute "Router_LeavingRoute"

#Struct Router_K_RouterEvent {
	Text Type;
	Text[Text] Data;
}

// */
// @Component end router

// @Component start structures-club
// /*

#Const LibStructuresClub_C_ClubNullId 0
#Const LibStructuresClub_C_AccountNullId ""
#Const LibStructuresClub_C_ActivityNullId 0
#Const LibStructuresClub_C_ClubRoleNone ""
#Const LibStructuresClub_C_RoomNullId 0

#Const LibStructuresClub_C_ClubActivity_Campaign "campaign"
#Const LibStructuresClub_C_ClubActivity_Room "room"
#Const LibStructuresClub_C_ClubActivity_MapUpload "map-upload"
#Const LibStructuresClub_C_ClubActivity_MapReview "map-review"
#Const LibStructuresClub_C_ClubActivity_SkinUpload "skin-upload"
#Const LibStructuresClub_C_ClubActivity_ItemUpload "item-upload"
#Const LibStructuresClub_C_ClubActivity_Competition "competition"
#Const LibStructuresClub_C_ClubActivity_News "news"
#Const LibStructuresClub_C_ClubActivity_RankingOfficial "ranking-official"
#Const LibStructuresClub_C_ClubActivity_RankingDaily "ranking-daily"
#Const LibStructuresClub_C_ClubActivity_RankingClub "ranking-club"
#Const LibStructuresClub_C_ClubActivity_Ad "ad"

#Const LibStructuresClub_C_ClubActivity_DisplayNames ["campaign"=>"Â’Campaign", "room"=>"Â’Room", "map-review"=>"Â’Track review", "map-upload"=>"Â’Track uploads", "skin-upload"=>"Â’Skin uploads", "item-upload"=>"Â’Item collection", "news"=>"Â’News", "competition"=>"Â’Competition", "ranking-official"=>"Â’Official rankings", "ranking-daily"=>"Â’Daily rankings", "ranking-club"=>"Â’Rankings", "ad"=>"Â’|ActivityType|Advertisement"]
#Const LibStructuresClub_C_ClubActivity_FeaturedAd ["campaign"=>"Â’Play the new '$<%1$>' campaign!", "room"=>"Â’Play online in the new '$<%1$>' room!", "map-review"=>"Â’Review tracks in '$<%1$>'!", "map-upload"=>"Â’Let's see the new '$<%1$>' tracks!", "skin-upload"=>"Â’Let's see the new '$<%1$>' skins!", "item-upload"=>"Â’Check the new '$<%1$>' collection!", "news"=>"Â’Check this news '$<%1$>'!", "competition"=>"Â’Participate in the new '$<%1$>' competition!", "ranking-official"=>"Â’Go see '$<%1$>' ranking!", "ranking-daily"=>"Â’Go see '$<%1$>' ranking!", "ranking-club"=>"Â’Go see '$<%1$>' ranking!", "ad"=>"Â’Check the new '$<%1$>'!"]

#Const LibStructuresClub_C_ClubState_Public "public"
#Const LibStructuresClub_C_ClubState_PrivateOpen "private-open"
#Const LibStructuresClub_C_ClubState_PrivateClosed "private-closed"

#Const LibStructuresClub_C_ChoiceList_AddActivity ["campaign"=>"Â’Campaign", "room"=>"Â’Room", "skin-upload"=>"Â’Skin uploads", "map-upload"=>"Â’Track uploads", "map-review"=>"Â’Track review", "news"=>"Â’News", "competition"=>"Â’Competition", "ranking-club"=>"Â’Rankings", "item-upload"=>"Â’Item collection", "ad"=>"Â’|ActivityType|Advertisement"]
#Const LibStructuresClub_C_Choice_AddActivity_Campaign 0
#Const LibStructuresClub_C_Choice_AddActivity_Room 1
#Const LibStructuresClub_C_Choice_AddActivity_SkinUploads 2
#Const LibStructuresClub_C_Choice_AddActivity_MapUploads 3
#Const LibStructuresClub_C_Choice_AddActivity_News 5
#Const LibStructuresClub_C_Choice_AddActivity_Competition 6
#Const LibStructuresClub_C_Choice_AddActivity_Rankings 7
#Const LibStructuresClub_C_Choice_AddActivity_MapReview 4
#Const LibStructuresClub_C_Choice_AddActivity_ItemUploads 8
#Const LibStructuresClub_C_Choice_AddActivity_Advertisement 9

#Const LibStructuresClub_C_CreateAdvertisement_Link "/club/{ClubId}/maniapub/create"
#Const LibStructuresClub_C_CreateAdvertisement_ToReplace_ClubId "{ClubId}"

#Struct LibStructuresClub_K_Member { Text AccountId; Text DisplayName; Text Role; Integer JoinDate; Boolean VIP; Boolean Moderator; Boolean HasFeatured; }
#Struct LibStructuresClub_K_Activity { Integer Id; Integer ClubId; Text Name; Text Type; Integer ExternalId; Integer Position; Boolean Public; Boolean Active; Text MediaUrl; Boolean Password; Boolean Featured; }
#Struct LibStructuresClub_K_Club { Integer Id; Text Name; Text Tag; Text Description; Text IconUrl; Text LogoUrl; Text DecalUrl; Text BgUrl; Text VerticalUrl; Text DecoImageUrl_DecalSponsor4x1; Text DecoImageUrl_Screen16x9; Text DecoImageUrl_Screen8x1; Text DecoImageUrl_Screen16x1; Text PrivacyState; Integer PopularityLevel; LibStructuresClub_K_Member[][Text][Text] VIPListOnMap; LibStructuresClub_K_Activity FeaturedActivity; }
#Struct LibStructuresClub_K_ScriptSetting { Text Key; Text Value; Text Type; }
#Struct LibStructuresClub_K_ServerInfo { Text JoinLink; Integer PlayerCount; Text CurrentMapUid; Boolean IsStarting; }
#Struct LibStructuresClub_K_Room { Integer Id; Integer RoomId; Integer ClubId; Text ClubName; Integer ActivityId; Boolean IsHostedByNadeo; Text PlayerServerLogin; Text ServerAccountId; Text Name; Text Region; Integer MaxPlayers; Text ScriptName; Integer CampaignId; Text[] MapUids; Text MediaUrl; Integer PopularityLevel; Integer CreationTimestamp; Boolean Scalable; Boolean HasPassword; LibStructuresClub_K_ScriptSetting[] ScriptSettings; LibStructuresClub_K_ServerInfo ServerInfo; }
#Struct LibStructuresClub_K_BucketItem { Text ItemId; Integer Position; Text Description; Text[] MediaUrls; }
#Struct LibStructuresClub_K_BucketActivity { Integer Id; Text Type; Text Name; Text ClubName; Text MediaUrl; Integer ClubId; Integer CreationTimestamp; LibStructuresClub_K_BucketItem[] BucketItemList; Integer BucketItemCount; Integer PopularityLevel; Integer PopularityValue; }
#Struct LibStructuresClub_K_Skin { Text Id; Text Type; Text Name; Text DisplayName; Text CreatorAccountId; Text CreatorDisplayName; Boolean CreatorIsFirstPartyDisplayName; Text FileName; Text FileUrl; Text ThumbnailUrl; Integer TimeStamp; Boolean IsFavorite; Boolean IsUsed; }
#Struct LibStructuresClub_K_News { Integer Id; Text Headline; Text Body; Text MediaUrl; Integer ClubId; Text Name; Integer CreationTimestamp; }
#Struct LibStructuresClub_K_MapReview { LibStructuresClub_K_Activity Activity; Text ClubName; Integer TimeLimit; Boolean Scalable; Integer MaxPlayer; Boolean AllowVoteSkipMap; Boolean Public; Text Game2WebUrl; Boolean SubmissionLimitation; Integer PopularityValue; Integer PopularityValueBonus; Integer PopularityLevel; Integer PlayerCount; Integer SubmittedMapCount; Integer CreationTimestamp; }

// */
// @Component end structures-club

// @Component start lib-rbac
// /*

#Const LibRBAC_C_Role_ClubNone ""
#Const LibRBAC_C_Role_ClubApply "Apply"
#Const LibRBAC_C_Role_ClubMember "Member"
#Const LibRBAC_C_Role_ClubContentCreator "Content_Creator"
#Const LibRBAC_C_Role_ClubAdmin "Admin"
#Const LibRBAC_C_Role_ClubCreator "Creator"
#Const LibRBAC_C_RoleList ["Admin", "Content_Creator", "Member", "Creator"]
#Const LibRBAC_C_RoleList_Translations ["Apply"=>"Â’|Role|Applicant", "Admin"=>"Â’|Role|Admin", "Member"=>"Â’|Role|Member", "Content_Creator"=>"Â’|Role|Content creator", "Creator"=>"Â’|Role|Creator"]
#Const LibRBAC_C_RoleList_Set_Translations ["Admin"=>"Â’|Role|Set admin", "Content_Creator"=>"Â’|Role|Set content creator", "Member"=>"Â’|Role|Set member"]

#Const LibRBAC_C_ClubPermission_Administration 1
#Const LibRBAC_C_ClubPermission_EditSubscription 2
#Const LibRBAC_C_ClubPermission_DeleteClub 3
#Const LibRBAC_C_ClubPermission_HandleMapUploads 4
#Const LibRBAC_C_ClubPermission_UseMapUploads 5
#Const LibRBAC_C_ClubPermission_IsClubMember 6
#Const LibRBAC_C_ClubPermission_HandleSkinUploads 7
#Const LibRBAC_C_ClubPermission_UseSkinUploads 8
#Const LibRBAC_C_ClubPermission_HandleMembers 9
#Const LibRBAC_C_ClubPermission_FeatureClub 10
#Const LibRBAC_C_ClubPermission_CreateActivity 11

#Const LibRBAC_C_ClubPermissions ["Apply"=>[2, 10], "Member"=>[2, 5, 6, 8, 10], "Content_Creator"=>[2, 4, 5, 6, 7, 8, 10, 11], "Admin"=>[1, 2, 4, 5, 6, 7, 8, 9, 10, 11], "Creator"=>[1, 3, 4, 5, 6, 7, 8, 9, 11]]

#Const LibRBAC_C_GamePermission_PlayCurrentOfficialQuarterlyCampaign "client_PlayCurrentOfficialQuarterlyCampaign"
#Const LibRBAC_C_GamePermission_PlayPastOfficialQuarterlyCampaign "client_PlayPastOfficialQuarterlyCampaign"
#Const LibRBAC_C_GamePermission_PlayCurrentOfficialMonthlyCampaign "client_PlayCurrentOfficialMonthlyCampaign"
#Const LibRBAC_C_GamePermission_PlayPastOfficialMonthlyCampaign "client_PlayPastOfficialMonthlyCampaign"
#Const LibRBAC_C_GamePermission_PlayPublicClubCampaign "client_PlayPublicClubCampaign"
#Const LibRBAC_C_GamePermission_PlayPublicClubRoom "client_PlayPublicClubRoom"
#Const LibRBAC_C_GamePermission_PlayArcadeChannel "client_PlayArcadeChannel"
#Const LibRBAC_C_GamePermission_PlayTOTDChannel "client_PlayTOTDChannel"
#Const LibRBAC_C_GamePermission_PlayMatchmaking "client_PlayMatchmaking"

#Const LibRBAC_C_GamePermission_OpenSimpleMapEditor "client_OpenSimpleMapEditor"
#Const LibRBAC_C_GamePermission_OpenAdvancedMapEditor "client_OpenAdvancedMapEditor"
#Const LibRBAC_C_GamePermission_CreateLocalMap "client_CreateLocalMap"
#Const LibRBAC_C_GamePermission_CreateAndUploadMap "map_Create"
#Const LibRBAC_C_GamePermission_AccessServerReview "map_AccessServerReview"
#Const LibRBAC_C_GamePermission_OpenSkinEditor "client_OpenSkinEditor"
#Const LibRBAC_C_GamePermission_CreateLocalSkin "client_CreateLocalSkin"
#Const LibRBAC_C_GamePermission_CreateAndUploadSkin "skin_Create"
#Const LibRBAC_C_GamePermission_UseCustomSkin "skin_UseCustomSkin"
#Const LibRBAC_C_GamePermission_OpenReplayEditor "client_OpenReplayEditor"
#Const LibRBAC_C_GamePermission_CreateLocalReplay "client_CreateLocalReplay"
#Const LibRBAC_C_GamePermission_UseCustomCollection "item_UseCustomCollection"

#Const LibRBAC_C_GamePermission_ViewClub "club_DisplayInfo"
#Const LibRBAC_C_GamePermission_CreateClub "club_Create"
#Const LibRBAC_C_GamePermission_JoinClub "club_Join"
#Const LibRBAC_C_GamePermission_CreateActivity "club_CreateActivity"
#Const LibRBAC_C_GamePermission_CreateClubCompetition "club_CreateCompetition"
#Const LibRBAC_C_GamePermission_PlayPrivateActivity "club_PlayPrivateActivity"
#Const LibRBAC_C_GamePermission_CreateGameMode "mapRecord_CreateGameMode"
#Const LibRBAC_C_GamePermission_CreateItemAndMod "client_CreateItemAndMod"

#Const LibRBAC_C_GamePermission_DisplayStandardAds "ads_DisplayStandardAds"
#Const LibRBAC_C_GamePermission_DisplayClubAds "ads_DisplayClubAds"
#Const LibRBAC_C_GamePermission_RemoveAds "ads_Remove"
#Const LibRBAC_C_GamePermission_PlayOnlineCompetition "client_PlayOnlineCompetition"
#Const LibRBAC_C_GamePermission_GainXP "xp_Gain"
#Const LibRBAC_C_GamePermission_InGameChat "client_InGameChat"
#Const LibRBAC_C_GamePermission_ViewRecords "client_DisplayMapRecordLeaderboard"
#Const LibRBAC_C_GamePermission_PlayRecords "client_DisplayMapRecordGhost"

#Const LibRBAC_C_GamePermission_PlayHotSeat "client_PlayHotSeat"
#Const LibRBAC_C_GamePermission_PlaySplitscreen "client_PlaySplitscreen"
#Const LibRBAC_C_GamePermission_PlayLocalMap "client_PlayLocalMap"
#Const LibRBAC_C_GamePermission_PlayAgainstReplay "client_PlayAgainstReplay"
#Const LibRBAC_C_GamePermission_CreateLocalServer "client_CreateLocalServer"
#Const LibRBAC_C_GamePermission_FindLocalServer "client_FindLocalServer"

#Const LibRBAC_C_GamePermission_CanSubscribeToStandard "subscription_CanSubscribeToStandard"
#Const LibRBAC_C_GamePermission_CanSubscribeToClub "subscription_CanSubscribeToClub"

#Const LibRBAC_C_GamePermissionMessage_PlayCurrentOfficialQuarterlyCampaign "Â‘Subscribe to Trackmania %1 to play the live quarterly campaign.Â‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_PlayPastOfficialQuarterlyCampaign "Â‘Subscribe to Trackmania %1 to play past quarterly campaigns.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayCurrentOfficialMonthlyCampaign "Â‘Subscribe to Trackmania %1 to play the live monthly campaign.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayPastOfficialMonthlyCampaign "Â‘Subscribe to Trackmania %1 to play past monthly campaigns.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayPublicClubCampaign "Â‘Subscribe to Trackmania %1 to play club's campaigns.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayPublicClubRoom "Â‘Subscribe to Trackmania %1 to join club's rooms.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayArcadeChannel "Â‘Subscribe to Trackmania %1 to join the arcade channel.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayTOTDChannel "Â‘Subscribe to Trackmania %1 to join the Track of the Day channel.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayMatchmaking "Â‘Subscribe to Trackmania %1 to join the matchmaking.Â‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_PlayRoyalTracks "Â‘Subscribe to Trackmania %1 to play Royal tracks.Â‘Â’starter access"

#Const LibRBAC_C_GamePermissionMessage_OpenSimpleMapEditor "Â‘Subscribe to Trackmania %1 to open the simple track editor.Â‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_OpenAdvancedMapEditor "Â‘Subscribe to Trackmania %1 to edit advanced tracks.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_CreateLocalMap "Â‘Subscribe to Trackmania %1 to create a track.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_CreateAndUploadMap "Â‘Subscribe to Trackmania %1 to upload a track.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_EditClubMap "Â‘Subscribe to Trackmania %1 to edit club tracks.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_AccessServerReview "Â‘Subscribe to Trackmania %1 to access the server review.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_OpenSkinEditor "Â‘Subscribe to Trackmania %1 to open the skin editorÂ‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_CreateLocalSkin "Â‘Subscribe to Trackmania %1 to create a skinÂ‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_CreateAndUploadSkin "Â‘Subscribe to Trackmania %1 to upload a skinÂ‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_UseCustomSkin "Â‘Subscribe to Trackmania %1 to use a custom skinÂ‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_OpenReplayEditor "Â‘Subscribe to Trackmania %1 to open the replay editorÂ‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_CreateLocalReplay "Â‘Subscribe to Trackmania %1 to save a video in the replay editorÂ‘Â’standard access"

#Const LibRBAC_C_GamePermissionMessage_ViewClub "Â‘Subscribe to Trackmania %1 to display a club page.Â‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_CreateClub "Â‘Subscribe to Trackmania %1 to create a club.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_JoinClub "Â‘Subscribe to Trackmania %1 to join a club.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_CreateActivity "Â‘Subscribe to Trackmania %1 to create a club activity.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_PlayPrivateActivity "Â‘Subscribe to Trackmania %1 to play a private club activity.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_PlayMapReviewActivity "Â‘Subscribe to Trackmania %1 to play a track review club activity.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_CreateGameMode "Â‘Subscribe to Trackmania %1 to create game modes.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_CreateItemAndMod "Â‘Subscribe to Trackmania %1 to create items and mods.Â‘Â’club access"
#Const LibRBAC_C_GamePermissionMessage_AddFavoriteItemCollections "Â‘Subscribe to Trackmania %1 to add item collections in favorite.Â‘Â’club access"

#Const LibRBAC_C_GamePermissionMessage_PlayOnlineCompetition "Â‘Subscribe to Trackmania %1 to play online competitions.Â‘Â’standard access"

#Const LibRBAC_C_GamePermissionMessage_PlayHotSeat "Â‘Subscribe to Trackmania %1 to play the HotSeat mode.Â‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_PlaySplitscreen "Â‘Subscribe to Trackmania %1 to play the splitscreen mode.Â‘Â’starter access"
#Const LibRBAC_C_GamePermissionMessage_PlayLocalMap "Â‘Subscribe to Trackmania %1 to play a local track.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_PlayAgainstReplay "Â‘Subscribe to Trackmania %1 to play against a replay.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_CreateLocalServer "Â‘Subscribe to Trackmania %1 to create a local server.Â‘Â’standard access"
#Const LibRBAC_C_GamePermissionMessage_FindLocalServer "Â‘Subscribe to Trackmania %1 to find a local server.Â‘Â’standard access"

#Const LibRBAC_C_Text_StarterAccess "Â’starter access"
#Const LibRBAC_C_Text_StandardAccess "Â’standard access"
#Const LibRBAC_C_Text_ClubAccess "Â’club access"

// */
// @Component end lib-rbac

// @Component start structures-matchmaking
// /*

#Struct LibStructuresMatchmaking_K_Heartbeat { Text Status; Integer CreationDate; Integer MatchmakingWaitingTime; Text MatchLiveId; Integer BanEndDate; }
#Struct LibStructuresMatchmaking_K_Penalty { Integer CreationDate; Integer Points; }
#Struct LibStructuresMatchmaking_K_PlayerStatus { LibStructuresMatchmaking_K_Heartbeat CurrentHeartbeat; LibStructuresMatchmaking_K_Penalty Penalty; Text CurrentDivision; Integer CurrentProgression; Text MatchmakingStatus; }
#Struct LibStructuresMatchmaking_K_PlayerRank { Integer MatchmakingId; Text AccountId; Integer Score; }
#Struct LibStructuresMatchmaking_K_PlayerProgression { Text AccountId; Text CurrentDivision; Integer CurrentProgression; }
#Struct LibStructuresMatchmaking_K_MatchParticipants { Boolean IsCompleted; LibStructuresMatchmaking_K_PlayerProgression[Text] Participants; }
#Struct LibStructuresMatchmaking_K_TeamMember { Text AccountId; Text Name; Text ClubTag; Boolean IsFirstPartyDisplayName; Text FlagUrl; Integer Score; Integer BestTime; }
#Struct LibStructuresMatchmaking_K_Division { Text Id; Integer Position; Text RuleType; Integer MinimumPoints; Integer MaximumPoints; Integer MinimumRank; }
#Struct LibStructuresMatchmaking_K_Mode { Text Id; Text Name; Text Info; Text QueueName; Text Music; }
#Struct LibStructuresMatchmaking_K_Queue { Integer Id; Text Path; Text Name; }
#Struct LibStructuresMatchmaking_K_QueueSummary { Integer Ranked_3v3_Id; Integer Royal_Id; Integer Super_Royal_Id; }
#Struct LibStructuresMatchmaking_K_SuperRoyal { Integer StartsIn; Text Status; Text MatchLiveId; }
#Struct LibStructuresMatchmaking_K_SuperRoyalStatistics { Integer BronzeVictories; Integer SilverVictories; Integer GoldVictories; Integer MasterVictories; }
#Struct LibStructuresMatchmaking_K_PlayerStatistics { Integer MatchmakingId; Text AccountId; Text CurrentDivision; Integer CurrentProgression; Text BestDivision; Integer BestProgressionDate; Integer BestProgression; Text PreviousDivision; Integer PreviousProgression; Integer PreviousProgressionDate; Integer MVPCount; Integer Victories; Integer PlayedMatches; }
#Struct LibStructuresMatchmaking_K_PlayerLeaderboard { Text AccountId; Integer Rank; Integer Score; }

#Const LibStructuresMatchmaking_C_Status_NotInQueue ""
#Const LibStructuresMatchmaking_C_Status_Pending "pending"
#Const LibStructuresMatchmaking_C_Status_SkillGapCanceled "skill_gap_canceled"
#Const LibStructuresMatchmaking_C_Status_DifferentCodeCanceled "different_code_canceled"
#Const LibStructuresMatchmaking_C_Status_CrossplayCanceled "crossplay_canceled"
#Const LibStructuresMatchmaking_C_Status_Queued "queued"
#Const LibStructuresMatchmaking_C_Status_MatchFound "match_found"
#Const LibStructuresMatchmaking_C_Status_MatchAccepted "match_accepted"
#Const LibStructuresMatchmaking_C_Status_MatchReady "match_ready"
#Const LibStructuresMatchmaking_C_Status_Canceled "canceled"
#Const LibStructuresMatchmaking_C_Status_Banned "banned"
#Const LibStructuresMatchmaking_C_Status_UnderMaintenance "matchmaking_under_maintenance"
#Const LibStructuresMatchmaking_C_Status_OldGameVersion "old_game_version"
#Const LibStructuresMatchmaking_C_Status_Unknown "Unknown"

#Const LibStructuresMatchmaking_C_Matchmaking_Status_Enabled "enabled"
#Const LibStructuresMatchmaking_C_Matchmaking_Status_Under_Maintenance "under_maintenance"
#Const LibStructuresMatchmaking_C_Matchmaking_Status_Too_Many_Matches "too_many_matches"

#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Pending "pending"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Qualified "qualified"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Eliminated "eliminated"
#Const LibStructuresMatchmaking_C_SuperRoyal_Status_Over "over"

#Const LibStructuresMatchmaking_C_RuleType_Points "points_range"
#Const LibStructuresMatchmaking_C_RuleType_MinPointsAndRank "minimum_rank_and_points"
#Const LibStructuresMatchmaking_C_RuleType_MinPoints "minimum_points"

#Const LibStructuresMatchmaking_C_MatchmakingQueueId_None -123
#Const LibStructuresMatchmaking_C_MatchmakingQueueId_Debug 1

#Const LibStructuresMatchmaking_C_MatchmakingQueuePath_None ""
#Const LibStructuresMatchmaking_C_MatchmakingQueuePath_Debug "debug"

#Const LibStructuresMatchmaking_C_MatchmakingQueueName_None ""
#Const LibStructuresMatchmaking_C_MatchmakingQueueName_Debug "Official debug"

#Const LibStructuresMatchmaking_C_MatchmakingQueue_None LibStructuresMatchmaking_K_Queue {
	Id = -123,
	Path = "",
	Name = ""
}
#Const LibStructuresMatchmaking_C_MatchmakingQueue_Debug LibStructuresMatchmaking_K_Queue {
	Id = 1,
	Path = "debug",
	Name = "Official debug"
}

#Const LibStructuresMatchmaking_C_Mode_Null ""
#Const LibStructuresMatchmaking_C_Mode_Teams3v3 "Teams 3v3"
#Const LibStructuresMatchmaking_C_Mode_Royal "Royal"
#Const LibStructuresMatchmaking_C_Mode_SuperRoyal "SuperRoyal"

#Const LibStructuresMatchmaking_C_Modes [
	"Teams 3v3" => LibStructuresMatchmaking_K_Mode {
		Id = "Teams 3v3",
		Name = "Teams 3v3",
		Info = """Â’The players are divided into two competing teams: Blue versus Red.
As the match progresses, players drive several times on the same track. Each time they earn points for their team according to their position at the finish. The distribution of points is adjusted according to the number of players starting the race. At the end of each race, the points of the players on each team are added up and the team with the most points wins the race. The first team to win 5 races wins the match.""",
		QueueName = "3v3",
		Music = ""
	},
	"Royal" => LibStructuresMatchmaking_K_Mode {
		Id = "Royal",
		Name = "Royal",
		Info = """Â‘%1 teams of %2 players compete for the win.
The game is played in several rounds. Each round, the first teams to finish the race are qualified for the next round while the last ones are eliminated. After a few rounds, only %3 teams will remain. The team that wins this last race wins the match.Â‘20Â‘3Â‘4""",
		QueueName = "royal",
		Music = "RoyalMusic"
	},
	"SuperRoyal" => LibStructuresMatchmaking_K_Mode {
		Id = "SuperRoyal",
		Name = "SuperRoyal",
		Info = "",
		QueueName = "super-royal",
		Music = ""
	}
]

// */
// @Component end structures-matchmaking

// @Component start lib-common-http-authorization-header
// /*


// */
// @Component end lib-common-http-authorization-header

// @Component start lib-common-http
// /*

#Include "TextLib" as LibCommonHttp_TL
#Include "MathLib" as LibCommonHttp_ML

#Const LibCommonHttp_C_RetryRandomVariation 100
#Const LibCommonHttp_C_AlwaysRetry -1
#Const LibCommonHttp_C_NeverRetry 0
#Const LibCommonHttp_C_Method_Get 0
#Const LibCommonHttp_C_Method_Post 1
#Const LibCommonHttp_C_Method_PostFile 2
#Const LibCommonHttp_C_Method_CacheHit 4
#Const LibCommonHttp_C_StatusCode_Null -1
#Const LibCommonHttp_C_MinimumAvailableSlots 5
#Const LibCommonHttp_C_CooldownListSizeMax 25
#Const LibCommonHttp_C_CooldownDuration 1000

#Struct LibCommonHttp_K_HttpNLSError { Text error; Text message; Text traceId; }
#Struct LibCommonHttp_K_NLSError { Text Error; Text Message; Text TraceId; }
#Struct LibCommonHttp_K_Request { Ident RequestId; Boolean IsInitialized; Boolean IsProcessing; Boolean IsWaitingSlot; Integer CooldownEndTime; Boolean IsSuccess; Boolean IsDestroyed; Integer RetryTime; Integer RetryNb; Integer RetryInterval; Text Result; Integer StatusCode; Text Url; Text Ressource; Text[Text] AdditionnalHeaders; Integer Method; Text[Text] Metadata; }

// */
// @Component end lib-common-http

// @Component start lib-http-struct
// /*

#Struct LibHttpStruct_K_HttpMedia { Text buttonBackgroundUrl; Text buttonForegroundUrl; Text decalUrl; Text popUpBackgroundUrl; Text popUpImageUrl; Text liveButtonBackgroundUrl; Text liveButtonForegroundUrl; }
#Struct LibHttpStruct_K_HttpSeason { Text uid; Text name; Integer startTimestamp; Integer startDate; Integer endTimestamp; Integer endDate; Integer relativeStart; Integer relativeEnd; Integer campaignId; Boolean active; }
#Struct LibHttpStruct_K_HttpCategory { Integer position; Integer length; Text name; }
#Struct LibHttpStruct_K_HttpMap { Integer id; Integer position; Text mapUid; }
#Struct LibHttpStruct_K_HttpCampaign { Integer id; Text seasonUid; Text name; Text color; Integer useCase; Integer clubId; Text leaderboardGroupUid; Boolean published; Integer publicationTimestamp; Integer editionTimestamp; LibHttpStruct_K_HttpMap[] playlist; LibHttpStruct_K_HttpSeason[] latestSeasons; LibHttpStruct_K_HttpCategory[] categories; LibHttpStruct_K_HttpMedia media; }
#Struct LibHttpStruct_K_HttpDailyMap { Integer campaignId; Text mapUid; Integer day; Integer monthDay; Text seasonUid; Integer relativeStart; Integer relativeEnd; }
#Struct LibHttpStruct_K_HttpMonthlyCampaign { Integer year; Integer month; Integer lastDay; LibHttpStruct_K_HttpDailyMap[] days; LibHttpStruct_K_HttpMedia media; }

// */
// @Component end lib-http-struct

// @Component start lib-tmnext-config
// /*

#Struct LibTMNextConfig_K_Config { Text APIBaseUrl; Text APIBordeauxClubUrl; Text APICompetitionUrl; Text APIMatchmakingUrl; Text WebsiteAdminClubUrl; Text WebsitePlayersPageUrl; Text ScriptEnvironment; Text BuildEnvironment; Text DefaultSubscription; Boolean IsCustomDisabled; Text DefaultMasterZone; Text OfflineCampaignJsonName; Text[] Features; }

#Const LibTMNextConfig_C_DefaultConfig LibTMNextConfig_K_Config {
	APIBaseUrl = "https://live-services.trackmania.nadeo.live",
	APIBordeauxClubUrl = "https://club.trackmania.nadeo.club",
	APICompetitionUrl = "https://competition.trackmania.nadeo.club",
	APIMatchmakingUrl = "https://matchmaking.trackmania.nadeo.club",
	WebsiteAdminClubUrl = "https://admin.trackmania.nadeo.club",
	WebsitePlayersPageUrl = "https://players.trackmania.com",
	ScriptEnvironment = "production",
	BuildEnvironment = "",
	DefaultSubscription = "",
	IsCustomDisabled = False,
	DefaultMasterZone = "World",
	OfflineCampaignJsonName = "Campaign.production.json",
	Features = []
}

#Const LibTMNextConfig_C_Feature_MatchmakingDebugQueue "MatchmakingDebugQueue"
#Const LibTMNextConfig_C_Feature_Squadding "Squadding"
#Const LibTMNextConfig_C_Feature_DebugShortcut "DebugShortcut"
#Const LibTMNextConfig_C_Feature_DebugToolBox "DebugToolBox"
#Const LibTMNextConfig_C_Feature_DebugCrossPlay "DebugCrossPlay"
#Const LibTMNextConfig_C_Feature_DebugBrowserAllData "DebugBrowserAllData"
#Const LibTMNextConfig_C_Feature_NoWelcomeBackOnPC "NoWelcomeBackOnPC"
#Const LibTMNextConfig_C_Feature_DisplayMenuPagesCreationProgress "DisplayMenuPagesCreationProgress"
#Const LibTMNextConfig_C_Feature_DebugFastBoot "DebugFastBoot"
#Const LibTMNextConfig_C_Feature_DebugNewHomePage "DebugNewHomePage"
#Const LibTMNextConfig_C_Feature_DebugVoiceChatAndTTS "DebugVoiceChatAndTTS"

// */
// @Component end lib-tmnext-config

// @Component start lib-common-http-club-authorization-header
// /*


// */
// @Component end lib-common-http-club-authorization-header

// @Component start component-matchmaking-api
// /*

#Include "TextLib" as ComponentMatchmakingAPI_TL
/* Matchmaking API */
#Const ComponentMatchmakingAPI_C_Headers ["Accept"=>"application/json", "Content-Type"=>"application/json"]
#Const ComponentMatchmakingAPI_C_API_Matchmaking "/api/matchmaking"
#Const ComponentMatchmakingAPI_C_API_Official "/api/official"
#Const ComponentMatchmakingAPI_C_API_Code "/api/code"
#Const ComponentMatchmakingAPI_C_API_SuperRoyal "/api/me/super-royal"

#Const ComponentMatchmakingAPI_C_Route_PostMatchmakingHeartbeat "/:MatchmakingId/heartbeat"
#Const ComponentMatchmakingAPI_C_Route_GetMatchmakingPlayerStatus "/:MatchmakingId/player-status"
#Const ComponentMatchmakingAPI_C_Route_PostMatchmakingAccept "/:MatchmakingId/accept"
#Const ComponentMatchmakingAPI_C_Route_PostMatchmakingCancel "/:MatchmakingId/cancel"
#Const ComponentMatchmakingAPI_C_Route_GetLeaderboard "/:MatchmakingId/leaderboard"
#Const ComponentMatchmakingAPI_C_Route_Me "/me"
#Const ComponentMatchmakingAPI_C_Route_GetCode "/:Code"
#Const ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId "MatchmakingId"
#Const ComponentMatchmakingAPI_C_Route_GetMatchmakingDivisionRules "/:MatchmakingId/division/display-rules"
#Const ComponentMatchmakingAPI_C_RouteParameter_QueueName "QueueName"
#Const ComponentMatchmakingAPI_C_Route_GetPlayersProgression "/:MatchmakingId/progression/players"
#Const ComponentMatchmakingAPI_C_RouteParameter_Code "Code"
#Const ComponentMatchmakingAPI_C_Route_GetStats "/:MatchmakingId/stats"
#Const ComponentMatchmakingAPI_C_Route_PlayerId "/:PlayerAccountId"
#Const ComponentMatchmakingAPI_C_RouteParameter_PlayerId "PlayerAccountId"
#Const ComponentMatchmakingAPI_C_Route_Current "/current"
#Const ComponentMatchmakingAPI_C_Route_Stats "/stats"
#Const ComponentMatchmakingAPI_C_Route_SuperRoyal_Stats_Player "/api/super-royal/stats/:PlayerAccountId"

#Const ComponentMatchmakingAPI_C_QueryParameter_Players "players"

/* Club API */
#Const ComponentMatchmakingAPI_C_API_Matches "/api/matches"
#Const ComponentMatchmakingAPI_C_Route_GetMatchByLid "/:Match"
#Const ComponentMatchmakingAPI_C_RouteParameter_MatchLid "Match"

#Struct ComponentMatchmakingAPI_K_HttpHeartbeatBody { Text[] playWith; Text code; }
#Struct ComponentMatchmakingAPI_K_HttpHeartbeat { Text status; Integer creationDate; Integer matchmakingWaitingTime; Text matchLiveId; Integer banEndDate; }
#Struct ComponentMatchmakingAPI_K_HttpPenalty { Integer creationDate; Integer points; }
#Struct ComponentMatchmakingAPI_K_HttpPlayerStatus { ComponentMatchmakingAPI_K_HttpHeartbeat currentHeartbeat; ComponentMatchmakingAPI_K_HttpPenalty penalty; Text currentDivision; Integer currentProgression; Text matchmakingStatus; }
#Struct ComponentMatchmakingAPI_K_HttpMatch { Text joinLink; }
#Struct ComponentMatchmakingAPI_K_HttpPlayerRanking { Integer matchmakingId; Text player; Integer score; }
#Struct ComponentMatchmakingAPI_K_HttpDivisionRules { Text id; Integer position; Text displayRuleType; Integer displayRuleMinimumPoints; Integer displayRuleMaximumPoints; Integer displayRuleMinimumRank; }
#Struct ComponentMatchmakingAPI_K_HttpDisplayDivisionRules { ComponentMatchmakingAPI_K_HttpDivisionRules[] divisions; }
#Struct ComponentMatchmakingAPI_K_HttpPlayerProgression { Text player; Text division; Integer progression; }
#Struct ComponentMatchmakingAPI_K_HttpProgressions { ComponentMatchmakingAPI_K_HttpPlayerProgression[] progressions; }
#Struct ComponentMatchmakingAPI_K_HttpCode { Text code; }
#Struct ComponentMatchmakingAPI_K_HttpSuperRoyal { Integer startsIn; Text status; Text matchLiveId; }
#Struct ComponentMatchmakingAPI_K_HttpSuperRoyalStatistics { Integer masterWon; Integer goldWon; Integer silverWon; Integer bronzeWon; }
#Struct ComponentMatchmakingAPI_K_HttpPlayerStatistics { Integer matchmakingId; Text player; Text currentDivision; Integer currentProgression; Text bestDivision; Integer bestProgression; Integer bestProgressionDate; Text previousDivision; Integer previousProgression; Integer previousProgressionDate; Integer mvpCount; Integer victories; Integer playedMatches; }
#Struct ComponentMatchmakingAPI_K_HttpPlayerLeaderboard { Text player; Integer rank; Integer score; }
#Struct ComponentMatchmakingAPI_K_HttpLeaderboard { Text matchmakingId; Integer cardinal; ComponentMatchmakingAPI_K_HttpPlayerLeaderboard[] results; }

// */
// @Component end component-matchmaking-api

// @Component start lib-campaign-struct
// /*

#Include "TextLib" as LibCampaignStruct_TL

#Const LibCampaignStruct_C_CampaignType_None -1
#Const LibCampaignStruct_C_CampaignType_Quarterly 0
#Const LibCampaignStruct_C_CampaignType_Club 2
#Const LibCampaignStruct_C_CampaignType_Training 3
#Const LibCampaignStruct_C_CampaignType_Monthly 1
#Const LibCampaignStruct_C_CampaignType_Royal 4

#Const LibCampaignStruct_C_CampaignType_ContextNames [-1=>"Unknown", 0=>"Quarterly", 1=>"Monthly", 2=>"Club", 3=>"Training", 4=>"Royal"]

#Const LibCampaignStruct_C_Campaign_NullId 0
#Const LibCampaignStruct_C_MonthlyCampaign_NullId 0

#Const LibCampaignStruct_C_LoadStatus_NotLoaded 0
#Const LibCampaignStruct_C_LoadStatus_Loaded 1
#Const LibCampaignStruct_C_LoadStatus_Error 2

#Const LibCampaignStruct_C_Season_Names ["Spring"=>"Â’|Season|Spring", "Summer"=>"Â’|Season|Summer", "Fall"=>"Â’|Season|Fall", "Winter"=>"Â’|Season|Winter"]

#Struct LibCampaignStruct_K_Top { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Text SP; }
#Struct LibCampaignStruct_K_TopScore { Text AccountId; Text DisplayName; Text ZoneId; Integer Position; Integer Score; }
#Struct LibCampaignStruct_K_TopRanking { Text ZoneName; LibCampaignStruct_K_Top[] Tops; }
#Struct LibCampaignStruct_K_MapTopRanking { Text ZoneName; LibCampaignStruct_K_TopScore[] Tops; }
#Struct LibCampaignStruct_K_PlayerCloseToMedal { Text Medal; Text AccountId; Text ZoneId; Text ZoneName; Integer Score; }
#Struct LibCampaignStruct_K_Ranking { Text ZoneId; Text ZoneName; Integer Position; Integer Length; }
#Struct LibCampaignStruct_K_CampaignRanking { LibCampaignStruct_K_Ranking[] Rankings; Text SP; }
#Struct LibCampaignStruct_K_Season { Text Uid; Text Name; Integer StartTimestamp; Integer StartDate; Integer EndTimestamp; Integer EndDate; Integer RelativeStart; Integer RelativeEnd; Integer RelativeNow; Integer CampaignId; Boolean Active; }
#Struct LibCampaignStruct_K_Map { Integer Position; Text Uid; Text Name; Text Type; Text Style; Text AuthorLogin; Text AuthorDisplayName; Boolean AuthorIsFirstPartyDisplayName; Text SubmitterAccountId; Integer AuthorTime; Integer GoldTime; Integer SilverTime; Integer BronzeTime; Integer NbLaps; Text LocalFileName; Text DownloadUrl; Text ThumbnailUrl; Integer UploadTimestamp; Integer Score; Integer[Text] ScoreBySeason; LibCampaignStruct_K_Ranking[] Rankings; Integer[Integer] ClubRankings; LibCampaignStruct_K_MapTopRanking[] TopRankings; LibCampaignStruct_K_TopScore[][Integer] ClubTopRankings; LibCampaignStruct_K_TopScore[][Text] SurroundingRankings; LibCampaignStruct_K_TopScore[][Text] RankingLevels; Integer UpdateTime_Rankings; Integer[Integer] UpdateTime_ClubRankings; Integer UpdateTime_TopRankings; Integer[Integer] UpdateTime_ClubTopRankings; Integer UpdateTime_SurroundingRankings; Integer UpdateTime_RankingLevels; Integer Medal; Integer Top; Text Zone; Boolean IsPlayable; Boolean IsFavorite; Text CollectionName; Boolean CreatedWithSimpleEditor; Boolean CreatedWithGamepadEditor; }
#Struct LibCampaignStruct_K_Category { Text Name; LibCampaignStruct_K_Map[] Playlist; }
#Struct LibCampaignStruct_K_Media { Text ButtonBackgroundUrl; Text ButtonForegroundUrl; Text DecalUrl; Text PopUpBackgroundUrl; Text PopUpImageUrl; Text LiveButtonBackgroundUrl; Text LiveButtonForegroundUrl; }
#Struct LibCampaignStruct_K_Campaign { Integer Id; Text SeasonId; Integer Type; Text Name; Text Color; Text LeaderboardGroupUid; LibStructuresClub_K_Club Club; Boolean Published; Boolean IsSeasonLive; Boolean IsLoaded; Boolean IsFetched; Boolean FailedToGetMapUrl; Boolean IsPrivate; Integer MapCount; LibCampaignStruct_K_Category[] Categories; LibCampaignStruct_K_CampaignRanking CampaignRanking; LibCampaignStruct_K_TopRanking[] TopRankings; LibCampaignStruct_K_Top[][Integer] ClubTopRankings; LibCampaignStruct_K_Top[Integer] ClubPlayerRanking; Integer UpdateTime_CampaignRanking; Integer UpdateTime_TopRankings; Integer[Integer] UpdateTime_ClubTopRankings; Integer[Integer] UpdateTime_ClubPlayerRanking; LibCampaignStruct_K_Media Media; Integer PopularityLevel; Boolean ClubOfficialTrophiesEnabled; LibCampaignStruct_K_Season[] Seasons; Integer EditionTimestamp; }
#Struct LibCampaignStruct_K_DailyMap { Integer CampaignId; Text SeasonId; Integer Day; Integer MonthDay; LibCampaignStruct_K_Map Map; Integer RelativeStart; Integer RelativeEnd; Integer RelativeNow; Integer LoadStatus; }
#Struct LibCampaignStruct_K_MonthlyCampaign { Integer Id; Integer Year; Integer Month; Integer LastDay; LibCampaignStruct_K_DailyMap[Integer] DailyMaps; LibCampaignStruct_K_Media Media; Boolean IsLoaded; Boolean IsLive; }
#Struct LibCampaignStruct_K_CampaignName { Boolean IsValid; Text Season; Text Year; Text Name; Text TranslatedName; }

// */
// @Component end lib-campaign-struct

// @Component start lib-api-leaderboard
// /*

#Struct LibLeaderboardAPI_K_HttpRank { Integer position; Integer length; }
#Struct LibLeaderboardAPI_K_HttpRankZone { Text zoneId; Text zoneName; LibLeaderboardAPI_K_HttpRank ranking; }
#Struct LibLeaderboardAPI_K_HttpGetPlayerTrophyRanking { Integer countPoint; Text accountId; Integer echelon; LibLeaderboardAPI_K_HttpRankZone[] zones; }
#Struct LibLeaderboardAPI_K_HttpGetPlayersTrophyRanking { LibLeaderboardAPI_K_HttpGetPlayerTrophyRanking[] rankings; Integer length; }
#Struct LibLeaderboardAPI_K_HttpTop { Text accountId; Text zoneId; Text zoneName; Integer position; Text sp; }
#Struct LibLeaderboardAPI_K_HttpTopScore { Text accountId; Text zoneId; Text zoneName; Integer position; Integer score; }
#Struct LibLeaderboardAPI_K_HttpPlayerCloseToMedal { Text medal; Text accountId; Text zoneId; Text zoneName; Integer score; }
#Struct LibLeaderboardAPI_K_HttpGetTopRankingsInClub { Text groupUid; Integer clubId; Integer length; LibLeaderboardAPI_K_HttpTop[] top; }
#Struct LibLeaderboardAPI_K_HttpGetMapTopRankingsInClub { Text groupUid; Text mapUid; Integer clubId; Integer length; LibLeaderboardAPI_K_HttpTopScore[] top; }
#Struct LibLeaderboardAPI_K_HttpGetPlayerMapRankingInClub { Text groupUid; Text mapUid; Integer clubId; Integer score; Integer position; }
#Struct LibLeaderboardAPI_K_HttpGetPlayersCloseToMedals { Text groupUid; Text mapUid; LibLeaderboardAPI_K_HttpPlayerCloseToMedal[] medals; }
#Struct LibLeaderboardAPI_K_TrophyPlayer { Text accountId; }
#Struct LibLeaderboardAPI_K_BodyGetPlayersTrophyRanking { LibLeaderboardAPI_K_TrophyPlayer[] listPlayer; Boolean onlyWorld; }
#Struct LibLeaderboardAPI_K_ResponseFromGetPlayerMapRankingsInClub { Text LeaderboardGroupUid; Text MapUid; Integer ClubId; Integer Score; Integer Position; }
#Struct LibLeaderboardAPI_K_ResponseFromGetMapTopRankingsInClub { Text LeaderboardGroupUid; Integer Length; LibCampaignStruct_K_TopScore[] Tops; }
#Struct LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking { Text AccountId; Integer Points; Integer Echelon; LibCampaignStruct_K_Ranking[] Ranking; }
#Struct LibLeaderboardAPI_K_ResponseFromGetPlayersTrophyRanking { LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking[] Players; Integer Total; }
#Struct LibLeaderboardAPI_K_ResponseFromGetTopRankingsInClub { Integer ClubId; Integer Length; LibCampaignStruct_K_Top[] TopRankings; }
#Struct LibLeaderboardAPI_K_ResponseFromGetPlayersCloseToMedals { Text LeaderboardGroupUid; Text MapUid; LibCampaignStruct_K_PlayerCloseToMedal[] Medals; }
#Struct LibLeaderboardAPI_K_HttpPlayerScore { Text groupUid; Integer clubId; Text sp; Integer position; }

#Const LibLeaderboardAPI_C_GroupUid_PersonalBest "Personal_Best"

#Const LibLeaderboardAPI_C_API_Trophy "/api/token/leaderboard/trophy"
#Const LibLeaderboardAPI_C_API_Leaderboard "/api/token/leaderboard/group"

#Const LibLeaderboardAPI_C_RouteParameter_GroupUid "GroupUid"
#Const LibLeaderboardAPI_C_RouteParameter_ClubId "ClubId"
#Const LibLeaderboardAPI_C_RouteParameter_MapUid "MapUid"

#Const LibLeaderboardAPI_C_QueryParameter_Offset "offset"
#Const LibLeaderboardAPI_C_QueryParameter_Length "length"

#Const LibLeaderboardAPI_C_Route_GetMyTrophyRanking ""
#Const LibLeaderboardAPI_C_Route_GetPlayersTrophyRanking "/player"
#Const LibLeaderboardAPI_C_Route_GetPlayerRankingInClub "/:GroupUid/club/:ClubId"
#Const LibLeaderboardAPI_C_Route_GetTopRankingsInClub "/:GroupUid/club/:ClubId/top"
#Const LibLeaderboardAPI_C_Route_GetMapTopRankingsInClub "/:GroupUid/map/:MapUid/club/:ClubId/top"
#Const LibLeaderboardAPI_C_Route_GetPlayerMapRankingInClub "/:GroupUid/map/:MapUid/club/:ClubId"
#Const LibLeaderboardAPI_C_Route_GetPlayersCloseToMedals "/:GroupUid/map/:MapUid/medals"

#Const LibLeaderboardAPI_C_Headers ["Accept"=>"application/json", "Content-Type"=>"application/json"]

// */
// @Component end lib-api-leaderboard

// @Component start lib-common-task
// /*

#Struct LibCommonTask_K_TaskOwner { Integer Type; CDataFileMgr DataFileMgr; CScoreMgr ScoreMgr; CTrackingMgr TrackingMgr; CUserV2Manager UserMgr; CPresenceMgr PresenceMgr; CRankingsZoneMgr ZoneMgr; CWSNotificationManager WSNotificationMgr; CMode Mode; }
#Struct LibCommonTask_K_TaskError { Text Type; Text Code; Text Description; }
#Struct LibCommonTask_K_Task { Ident SourceTaskId; LibCommonTask_K_TaskOwner Owner; Ident SystemDialogTaskId; CUserV2Manager SystemDialogManager; Boolean IsInitialized; Boolean IsProcessing; Boolean IsSuccess; LibCommonTask_K_TaskError Error; Text[Text] Metadata; }

#Const LibCommonTask_C_Owner_Null 0
#Const LibCommonTask_C_Owner_DataFileMgr 1
#Const LibCommonTask_C_Owner_ScoreMgr 2
#Const LibCommonTask_C_Owner_TrackingMgr 3
#Const LibCommonTask_C_Owner_UserMgr 4
#Const LibCommonTask_C_Owner_PresenceMgr 5
/*
#Const LibCommonTask_C_Owner_ManiaPlanet
#Const LibCommonTask_C_Owner_AchievementsMgr
*/
#Const LibCommonTask_C_Owner_ZoneMgr 8
#Const LibCommonTask_C_Owner_NotificationMgr 9
#Const LibCommonTask_C_Owner_Mode 10

#Const LibCommonTask_C_ErrorType_CreationFailed "LibTask"
#Const LibCommonTask_C_ErrorType_TaskNotFound "LibTask"

#Const LibCommonTask_C_ErrorCode_CreationFailed "LT01"
#Const LibCommonTask_C_ErrorCode_TaskNotFound "LT02"

#Const LibCommonTask_C_ErrorDescription_CreationFailed "Â’Failed to create task"
#Const LibCommonTask_C_ErrorDescription_TaskNotFound "Â’Task not found"

#Const LibCommonTask_C_FirstPartyErrorTypes ["SCE", "GDK"]

// */
// @Component end lib-common-task

// @Component start component-commonlibs-platform
// /*

#Const LibCommonLibsPlatform_C_Family_Unknown 0
#Const LibCommonLibsPlatform_C_Family_Console 1
#Const LibCommonLibsPlatform_C_Family_Streaming 2
#Const LibCommonLibsPlatform_C_Family_PC 3
#Const LibCommonLibsPlatform_C_FamilyNames [0=>"Unknown", 1=>"Console", 2=>"Streaming", 3=>"PC"]
#Const LibCommonLibsPlatform_C_PlatformToFamily [
	CSystemPlatform::ESystemPlatform::PS4 => 1,
	CSystemPlatform::ESystemPlatform::PS5 => 1,
	CSystemPlatform::ESystemPlatform::XBoxOne => 1,
	CSystemPlatform::ESystemPlatform::XBoxSeries => 1,
	CSystemPlatform::ESystemPlatform::Stadia => 2,
	CSystemPlatform::ESystemPlatform::Luna => 2,
	CSystemPlatform::ESystemPlatform::None => 3,
	CSystemPlatform::ESystemPlatform::Steam => 3,
	CSystemPlatform::ESystemPlatform::UPlay => 3
]

#Const LibCommonLibsPlatform_C_FirstParty_Unknown 0
#Const LibCommonLibsPlatform_C_FirstParty_Sony 1
#Const LibCommonLibsPlatform_C_FirstParty_Microsoft 2
#Const LibCommonLibsPlatform_C_FirstParty_Google 3
#Const LibCommonLibsPlatform_C_FirstParty_Amazon 4
#Const LibCommonLibsPlatform_C_PlatformToFirstParty [
	CSystemPlatform::ESystemPlatform::PS4 => 1,
	CSystemPlatform::ESystemPlatform::PS5 => 1,
	CSystemPlatform::ESystemPlatform::XBoxOne => 2,
	CSystemPlatform::ESystemPlatform::XBoxSeries => 2,
	CSystemPlatform::ESystemPlatform::Stadia => 3,
	CSystemPlatform::ESystemPlatform::Luna => 4,
	CSystemPlatform::ESystemPlatform::None => 0,
	CSystemPlatform::ESystemPlatform::Steam => 0,
	CSystemPlatform::ESystemPlatform::UPlay => 0
]

// */
// @Component end component-commonlibs-platform

// @Component start lib-common-store
// /*

#Const LibCommonStore_C_Event_Subscribe "LibCommonStore_Subscribe"
#Const LibCommonStore_C_Event_Unsubscribe "LibCommonStore_Unsubscribe"
#Const LibCommonStore_C_Event_RelayEvent "LibCommonStore_RelayEvent"

// */
// @Component end lib-common-store

// @Component start lib-user-store
// /*

#Const LibUserStore_C_StoreId "user"

#Const LibUserStore_C_Action_UpdateGameSubscriptionPlan "LibUserStore_Action_UpdateGameSubscriptionPlan"
#Const LibUserStore_C_Action_SetOfflineMode "LibUserStore_Action_SetOfflineMode"
#Const LibUserStore_C_Action_LoadMatchmakingInfos "LibUserStore_Action_LoadMatchmakingInfos"
#Const LibUserStore_C_Action_SetMatchmakingPlayerProgression "LibUserStore_Action_SetMatchmakingPlayerProgression"
#Const LibUserStore_C_Action_SetMatchmakingDivisions "LibUserStore_Action_SetMatchmakingDivisions"
#Const LibUserStore_C_Action_LoadUserTrophyRankings "LibUserStore_Action_LoadUserTrophyRankings"
#Const LibUserStore_C_Action_SetUserTrophyRankings "LibUserStore_Action_SetUserTrophyRankings"
#Const LibUserStore_C_Action_VerifyCrossPlayActivation "LibUserStore_Action_VerifyCrossPlayActivation"
#Const LibUserStore_C_Action_SetCrossPlaySettingEnabled "LibUserStore_Action_SetCrossPlaySettingEnabled"

#Const LibUserStore_C_Event_UserPermissionsUpdated "LibUserStore_Event_UserPermissionsUpdated"
#Const LibUserStore_C_Event_MatchmakingInfosUpdated "LibUserStore_Event_MatchmakingInfosUpdated"
#Const LibUserStore_C_Event_UserTrophyRankingsUpdated "LibUserStore_Event_UserTrophyRankingsUpdated"
#Const LibUserStore_C_Event_LoadUserTrophyRankingsComplete "LibUserStore_Event_LoadUserTrophyRankingsComplete"
#Const LibUserStore_C_Event_LoadMatchmakingInfosComplete "LibUserStore_Event_LoadMatchmakingInfosComplete"
#Const LibUserStore_C_Event_CrossPlayUpdated "LibUserStore_Event_CrossPlayUpdated"
#Const LibUserStore_C_Event_OfflineModeUpdated "LibUserStore_Event_OfflineModeUpdated"

#Const LibUserStore_C_GameSubscriptionPlan_Null -1
#Const LibUserStore_C_GameSubscriptionPlan_Free 0
#Const LibUserStore_C_GameSubscriptionPlan_Standard 1
#Const LibUserStore_C_GameSubscriptionPlan_Club 2

#Struct LibUserStore_K_MatchmakingInfo { Integer QueueId; LibStructuresMatchmaking_K_Division[Text] Divisions; LibStructuresMatchmaking_K_PlayerProgression PlayerProgression; }
#Struct LibUserStore_K_LoadMatchmakingInfosProgress { Boolean GetMatchmakingOfficialQueueSummary; Text[] LoadMatchmakingDivisions; Text[] GetPlayerProgression; }
#Struct LibUserStore_K_TrackBrowserInfos { Integer CurrentTabIndex; Boolean IsFlatten; Boolean IsSortingByNameElseByDate; Boolean IsSortingFromAscendingOrder; }
#Struct LibUserStore_K_State { Ident MainUserId; Boolean IsOfflineMode; Boolean IsCrossPlayActive; LibUserStore_K_MatchmakingInfo[Text] MatchmakingInfos; LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking UserTrophyRankings; LibUserStore_K_LoadMatchmakingInfosProgress LoadMatchmakingInfosProgress; }

// */
// @Component end lib-user-store

// @Component start component-loadingspinner
// /*

#Include "TextLib" as ComponentLoadingSpinner_TL
#Include "MathLib" as ComponentLoadingSpinner_ML
#Include "ColorLib" as ComponentLoadingSpinner_CL

#Const ComponentLoadingSpinner_C_LabelSide_Left -1
#Const ComponentLoadingSpinner_C_LabelSide_Center 0
#Const ComponentLoadingSpinner_C_LabelSide_Right 1

// */
// @Component end component-loadingspinner

// @Component start component-tmnext-button
// /*

#Include "TextLib" as ComponentTMNextButton_TL
#Include "MathLib" as ComponentTMNextButton_ML
#Include "ColorLib" as ComponentTMNextButton_CL

#Const ComponentTMNextButton_C_ColorType_None 0
#Const ComponentTMNextButton_C_ColorType_Colorize 1
#Const ComponentTMNextButton_C_ColorType_ModulateColor 2

#Const ComponentTMNextButton_C_State_Normal 0
#Const ComponentTMNextButton_C_State_Loading 1

#Const ComponentTMNextButton_C_AnimTime_Blink 500

#Struct ComponentTMNextButton_K_TextProperties {
	Vec2 Size;
	Real TextSize;
	Text TextPrefix;
	Text Value;
	Text Font;
	Real PosX;
	Real PosY;
	Vec3 Color;
	Vec3 FocusColor;
	Real ItalicSlope;
	Text HAlign;
	Text VAlign;
	Integer MaxLine;
	Boolean AutoNewLine;
	Real Fit;
	Real FitStep;
	Real OpacityUnfocus;
}

#Struct ComponentTMNextButton_K_ImageProperties {
	Integer ColorType;
	Vec2 Size;
	Real Scale;
	Text Image;
	Text ImageFocus;
	Real PosX;
	Real PosY;
	Vec3 Color;
	Vec3 FocusColor;
	Real Rotation;
	Real Opacity;
	Real OpacityUnfocus;
	Real ImageFocusOpacity;
	CMlQuad::EKeepRatioMode KeepRatio;
	Text ContourImage;
	Real ContourOpacityFocus;
	Real ContourOpacityUnfocus;
	Vec3 ContourColor;
	Text GradientImage;
	Real GradientOpacityFocus;
	Real GradientOpacityUnfocus;
	Vec3 GradientColor;
}

#Struct ComponentTMNextButton_K_Properties {
	Boolean IsButton;
	Boolean IsLocked;
	Boolean IsFocused;
	Boolean IsBgEmpty;
	Boolean IsBlink;
	Real OpacityUnfocus;
	Vec2 SizeHitbox;
	Real TiltHitbox;
	Text AlphaMask;
	ComponentTMNextButton_K_TextProperties Label;
	ComponentTMNextButton_K_ImageProperties Icon;
	ComponentTMNextButton_K_ImageProperties Background;
	ComponentTMNextButton_K_ImageProperties Loading;
	Text HAlign;
	Text VAlign;
	Integer State;
	Boolean SuperSample;
}

#Struct ComponentTMNextButton_K_DelayedState {
	Integer ActivationTime;
	Integer State;
	CMlFrame Frame_Button;
}

// */
// @Component end component-tmnext-button

// @Component start component-commonlibs-audio-manager
// /*


// */
// @Component end component-commonlibs-audio-manager

// @Component start menu-libs-scroll
// /*

#Include "TextLib" as MenuLibsScroll_TL
#Include "MathLib" as MenuLibsScroll_ML
#Include "AnimLib" as MenuLibsScroll_AL
#Include "ColorLib" as MenuLibsScroll_CL

#Const MenuLibsScroll_C_EventType_Update 0
#Const MenuLibsScroll_C_EventType_DisplayStart 1
#Const MenuLibsScroll_C_EventType_DisplayEnd 2
#Const MenuLibsScroll_C_EventType_Focus 3
#Const MenuLibsScroll_C_EventType_Select 4
#Const MenuLibsScroll_C_EventType_ReachLimit 5
#Const MenuLibsScroll_C_EventType_Cancel 6
#Const MenuLibsScroll_C_EventType_NavAction 7
#Const MenuLibsScroll_C_EventType_ClampUpdate 8
#Const MenuLibsScroll_C_EventType_PagerUpdate 9

#Const MenuLibsScroll_C_Action_Click 0
#Const MenuLibsScroll_C_Action_Unclick 1
#Const MenuLibsScroll_C_Action_Over 2
#Const MenuLibsScroll_C_Action_Out 3

#Const MenuLibsScroll_C_ScrollBarVisibility_Never 0
#Const MenuLibsScroll_C_ScrollBarVisibility_Always 1
#Const MenuLibsScroll_C_ScrollBarVisibility_DuringScroll 2

#Const MenuLibsScroll_C_ScrollBarVisibilityDuration 2500

#Const MenuLibsScroll_C_SkewVAlign_Top 0
#Const MenuLibsScroll_C_SkewVAlign_Center 1
#Const MenuLibsScroll_C_SkewVAlign_Bottom 2

#Const MenuLibsScroll_C_Direction_Null 0
#Const MenuLibsScroll_C_Direction_Up 1
#Const MenuLibsScroll_C_Direction_Right 2
#Const MenuLibsScroll_C_Direction_Down 3
#Const MenuLibsScroll_C_Direction_Left 4

#Const MenuLibsScroll_C_PagerThrottleDuration 1000

#Struct MenuLibsScroll_K_Config { Integer DefaultElementsTotal; Integer ElementsPerLine; Integer ElementsPerPage; Vec2 ElementSize; Vec2 MarginSize; Vec2 WindowSize; Real HeaderHeight; Real FooterHeight; Boolean ScrollIndicator; Real ScrollIndicatorYOffset; Real ScrollIndicatorXOffset; Boolean AnimEnabled; Boolean PreScrollEnabled; Vec2 ScrollGrid; Integer ScrollBarVisibility; Real ScrollPadding; Real Skew; Boolean SkewHeader; Boolean SkewFooter; Integer SkewVAlign; Text ScrollIndicatorImage; Vec3 ScrollIndicatorColorize; Real ScrollIndicatorSize; Real ScrollBarXOffset; Integer PagerPageSize; Integer PagerTriggerSize; Integer PagerMarginSize; }

#Struct MenuLibsScroll_K_ScrollAnimation {
	Integer StartTime;
	Real ScrollStart;
	Real ScrollDelta;
	Integer Duration;
}

#Struct MenuLibsScroll_K_ClampedControl {
	CMlControl Control;
	Integer Type;
	Vec2 Limit;
	Real Origin;
	Boolean ClampedTop;
	Boolean ClampedBottom;
}

#Struct MenuLibsScroll_K_Pager {
	Integer ThrottleEndTime;
	Integer CooldownEndTime;
	Int2 Limits;
}

#Struct MenuLibsScroll_K_State {
	MenuLibsScroll_K_Config Config;
	MenuLibsScroll_K_ScrollAnimation Animation;
	Integer ElementsTotal;
	CMlFrame[] Elements;
	CMlFrame Header;
	CMlFrame Footer;
	Boolean IsFocused;
	Integer FocusedElementKey;
	CMlFrame FocusedElement;
	CMlControl ScrollIndicator;
	Vec2 ScrollIndicatorBaseOffset;
	Boolean CanPreScroll;
	Boolean IsDisplayingStart;
	Boolean IsDisplayingEnd;
	CMlQuad EventGenerator;
	Vec2 ScrollOffset;
	CMlFrame ScrollBar;
	Boolean IsInitialized;
	Real ScrollBarWidth;
	Integer ScrollBarHideTime;
	MenuLibsScroll_K_ClampedControl[] ClampedControls;
	CMlControl[] StickControls;
	Boolean ScrollLocked;
	Vec2 ScrollLockPosition;
	MenuLibsScroll_K_Pager Pager;
	Text[][] EventCustomData;
	Integer[] LockedElements;
	CMlFrame Frame_LoadingSpinner;
}

#Struct MenuLibsScroll_K_ScrollBarState {
	CMlFrame Scroll;
	Real AbsoluteTop;
	Real AbsoluteBottom;
	Real ClickShift;
	Real Height;
}

#Struct MenuLibsScroll_K_ScrollPosition {
	Integer Row;
	Integer StartKey;
	Integer EndKey;
}

#Struct MenuLibsScroll_K_Event {
	Integer Type;
	CMlFrame Scroll;
	CMlFrame[Integer] ElementsVisible;
	CMlFrame[Integer] ElementsHidden;
	MenuLibsScroll_K_ScrollPosition ScrollPosition;
	Integer Page;
	Boolean DelayedElementsUpdate;
	CMlFrame From;
	Integer FromKey;
	CMlFrame To;
	Integer ToKey;
	CMlScriptEvent::EMenuNavAction NavAction;
	Boolean IsMouse;
	MenuLibsScroll_K_ClampedControl ClampedControl;
	Integer PagerOffset;
	Integer PagerCount;
	Text[][] CustomData;
	Boolean PlayFocusAnimation;
}

#Struct MenuLibsScroll_K_ActivationZone {
	CMlFrame Scroll;
	Integer ElementRelativeKey;
	CMlFrame Element;
}

// */
// @Component end menu-libs-scroll

// @Component start component-menulibs-menusounds
// /*

#Const ComponentMenuLibsMenuSounds_C_FocusInputs [
	CMlScriptEvent::EMenuNavAction::Up,
	CMlScriptEvent::EMenuNavAction::Down,
	CMlScriptEvent::EMenuNavAction::Left,
	CMlScriptEvent::EMenuNavAction::Right
]

#Const ComponentMenuLibsMenuSounds_C_Sound_Focus "MenuFocus"
#Const ComponentMenuLibsMenuSounds_C_Sound_Select "MenuSelect"
#Const ComponentMenuLibsMenuSounds_C_Sound_Cancel "BackButtonSelect"
#Const ComponentMenuLibsMenuSounds_C_Sound_ArrowSelect "ArrowSelect"
#Const ComponentMenuLibsMenuSounds_C_Sound_Silent "MenuSounds_UseSoundName_None"

#Const ComponentMenuLibsMenuSounds_C_Playing_State 0
#Const ComponentMenuLibsMenuSounds_C_InMenu_State 1
#Const ComponentMenuLibsMenuSounds_C_PauseMenu_State 2

// */
// @Component end component-menulibs-menusounds

// @Component start component-time-of-day
// /*

#Include "TimeLib" as TimeOfDay_TiL
#Include "MathLib" as TimeOfDay_ML

#Const TimeOfDay_C_DayPart_Null -1
#Const TimeOfDay_C_DayPart_NightSunrise 0
#Const TimeOfDay_C_DayPart_Sunrise 1
#Const TimeOfDay_C_DayPart_SunriseDay 2
#Const TimeOfDay_C_DayPart_Day 3
#Const TimeOfDay_C_DayPart_DaySunset 4
#Const TimeOfDay_C_DayPart_Sunset 5
#Const TimeOfDay_C_DayPart_SunsetNight 6
#Const TimeOfDay_C_DayPart_Night 7

#Const TimeOfDay_C_TimeRange_Null 0.
#Const TimeOfDay_C_TimeRange_NightSunrise 0.166
#Const TimeOfDay_C_TimeRange_Sunrise 0.25
#Const TimeOfDay_C_TimeRange_SunriseDay 0.333
#Const TimeOfDay_C_TimeRange_Day 0.375
#Const TimeOfDay_C_TimeRange_DaySunset 0.708
#Const TimeOfDay_C_TimeRange_Sunset 0.75
#Const TimeOfDay_C_TimeRange_SunsetNight 0.833
#Const TimeOfDay_C_TimeRange_Night 0.875

// */
// @Component end component-time-of-day

// @Component start component-mainbackground
// /*

#Include "MathLib" as ComponentMainBackground_ML
#Include "TimeLib" as ComponentMainBackground_TiL
#Include "TextLib" as ComponentMainBackground_TL

#Struct ComponentMainBackground_K_QuadOpacities {
	Real Morning;
	Real Day;
	Real Evening;
	Real Night;
}
#Struct ComponentMainBackground_K_Controls {
	CMlQuad Quad_Morning;
	CMlQuad Quad_Day;
	CMlQuad Quad_Evening;
	CMlQuad Quad_Night;
}
#Struct ComponentMainBackground_K_State {
	ComponentMainBackground_K_Controls Controls;
	Boolean IsVisible;
	Integer UpdateTimer;
	Integer DisplayAnimEndTime;
	Text[Integer] CustomBackgroundImgUrls;
}

#Struct ComponentMainBackground_K_Event {
	Integer Type;
	Real DayProgression;
	Integer DayPart;
}

#Const ComponentMainBackground_C_EventType_UpdateOpacities 0

#Const ComponentMainBackground_C_UpdateDelay 30000 //< 30 seconds
#Const ComponentMainBackground_C_BackgroundTransition 800

#Const ComponentMainBackground_C_DayMaxOpacity 0.8

#Const ComponentMainBackground_C_DayPart_NightSunrise 0
#Const ComponentMainBackground_C_DayPart_Sunrise 1
#Const ComponentMainBackground_C_DayPart_SunriseDay 2
#Const ComponentMainBackground_C_DayPart_Day 3
#Const ComponentMainBackground_C_DayPart_DaySunset 4
#Const ComponentMainBackground_C_DayPart_Sunset 5
#Const ComponentMainBackground_C_DayPart_SunsetNight 6
#Const ComponentMainBackground_C_DayPart_Night 7

#Const ComponentMainBackground_C_TimeRange_NightSunrise 0.166
#Const ComponentMainBackground_C_TimeRange_Sunrise 0.25
#Const ComponentMainBackground_C_TimeRange_SunriseDay 0.333
#Const ComponentMainBackground_C_TimeRange_Day 0.375
#Const ComponentMainBackground_C_TimeRange_DaySunset 0.708
#Const ComponentMainBackground_C_TimeRange_Sunset 0.75
#Const ComponentMainBackground_C_TimeRange_SunsetNight 0.833
#Const ComponentMainBackground_C_TimeRange_Night 0.875

#Const ComponentMainBackground_C_DefaultQuadOpacities ComponentMainBackground_K_QuadOpacities {
	Morning = 0.,
	Day = 0.,
	Evening = 0.,
	Night = 0.
}

// */
// @Component end component-mainbackground

// @Component start component-menulibs-helpers
// /*

#Include "MathLib" as ComponentMenuLibsHelpers_ML

// */
// @Component end component-menulibs-helpers

// @Component start component-controller-info
// /*


// */
// @Component end component-controller-info

// @Component start component-menulibs-expendable-button
// /*

#Include "TextLib" as MenuLibsExpendableButton_TL
#Include "MathLib" as MenuLibsExpendableButton_ML
#Include "ColorLib" as MenuLibsExpendableButton_CL

#Struct MenuLibsExpendableButton_K_Image {
	Text Url;
	Vec2 Size;
	Integer ColorMode;
}
#Struct MenuLibsExpendableButton_K_Controls {
	CMlFrame Frame_ButtonAlign;
	CMlFrame Frame_Background;
	CMlQuad[Integer] Quads_Background;
	CMlFrame Frame_Focus;
	CMlQuad[Integer] Quads_Focus;
	CMlFrame Frame_HitboxClip;
	CMlQuad Quad_NavZone;
	CMlQuad Quad_ButtonIcon;
	CMlFrame Frame_ButtonTextAlign;
	CMlLabel Label_ButtonText;
}
#Struct MenuLibsExpendableButton_K_Properties {
	Integer[] Enabled;
	Text TextValue;
	Boolean TextFitLabelEnabled;
	Boolean TextAutoNewLineEnabled;
	Integer TextMaxLines;
	Text TextFont;
	Real TextFontSize;
	Text TextPrefix;
	CMlControl::AlignHorizontal TextHAlign;
	CMlControl::AlignVertical TextVAlign;
	Vec2 TextOffset;
	Vec2 TextSize;
	Vec3 TextColorFocused;
	Vec3 TextColorUnfocused;
	Real TextOpacityFocused;
	Real TextOpacityUnfocused;
	Real Height;
	Real MinWidth;
	Real MaxWidth;
	Real Width;
	CMlControl::AlignHorizontal HAlign;
	CMlControl::AlignVertical VAlign;
	MenuLibsExpendableButton_K_Image[Integer] BackgroundImages; //< Three images for the left, middle and right part of the button background
	MenuLibsExpendableButton_K_Image[Integer] FocusImages; //< Three images for the left, middle and right part of the button focus
	Vec3 BackgroundColorFocused;
	Vec3 BackgroundColorUnfocused;
	Real BackgroundOpacityFocused;
	Real BackgroundOpacityUnfocused;
	Vec3 FocusColorFocused;
	Vec3 FocusColorUnfocused;
	Real FocusOpacityFocused;
	Real FocusOpacityUnfocused;
	MenuLibsExpendableButton_K_Image IconImage;
	Vec3 IconColorFocused;
	Vec3 IconColorUnfocused;
	Real IconOpacityFocused;
	Real IconOpacityUnfocused;
	Integer IconAlign;
	Vec2 IconOffset;
	Real HitboxRot;
	Real HitboxWidthScale;
	Real HitboxHeightScale;
	Boolean HitboxDebug;
	Vec2 Padding;
	Boolean SuperSample;
}
#Struct MenuLibsExpendableButton_K_State {
	MenuLibsExpendableButton_K_Controls Controls;
	MenuLibsExpendableButton_K_Properties CustomizedProperties;
	MenuLibsExpendableButton_K_Properties MergedProperties;
	Text[] Styles;
	Boolean IsButton;
	Boolean IsFocused;
}

// The properties indexing must be a continuous sequence starting from 0
// 0,1,2,3,... not 0,1,3,... for example
#Const MenuLibsExpendableButton_C_Property_TextValue 0
#Const MenuLibsExpendableButton_C_Property_TextFitLabelEnabled 1
#Const MenuLibsExpendableButton_C_Property_TextAutoNewLineEnabled 2
#Const MenuLibsExpendableButton_C_Property_TextMaxLines 3
#Const MenuLibsExpendableButton_C_Property_TextFont 4
#Const MenuLibsExpendableButton_C_Property_TextFontSize 5
#Const MenuLibsExpendableButton_C_Property_TextPrefix 6
#Const MenuLibsExpendableButton_C_Property_TextHAlign 7
#Const MenuLibsExpendableButton_C_Property_TextVAlign 8
#Const MenuLibsExpendableButton_C_Property_TextOffset 9
#Const MenuLibsExpendableButton_C_Property_TextSize 10
#Const MenuLibsExpendableButton_C_Property_TextColorFocused 11
#Const MenuLibsExpendableButton_C_Property_TextColorUnfocused 12
#Const MenuLibsExpendableButton_C_Property_TextOpacityFocused 13
#Const MenuLibsExpendableButton_C_Property_TextOpacityUnfocused 14
#Const MenuLibsExpendableButton_C_Property_Height 15
#Const MenuLibsExpendableButton_C_Property_MinWidth 16
#Const MenuLibsExpendableButton_C_Property_MaxWidth 17
#Const MenuLibsExpendableButton_C_Property_Width 18
#Const MenuLibsExpendableButton_C_Property_HAlign 19
#Const MenuLibsExpendableButton_C_Property_VAlign 20
#Const MenuLibsExpendableButton_C_Property_BackgroundImages 21
#Const MenuLibsExpendableButton_C_Property_FocusImages 22
#Const MenuLibsExpendableButton_C_Property_BackgroundColorFocused 23
#Const MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused 24
#Const MenuLibsExpendableButton_C_Property_BackgroundOpacityFocused 25
#Const MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused 26
#Const MenuLibsExpendableButton_C_Property_FocusColorFocused 27
#Const MenuLibsExpendableButton_C_Property_FocusColorUnfocused 28
#Const MenuLibsExpendableButton_C_Property_FocusOpacityFocused 29
#Const MenuLibsExpendableButton_C_Property_FocusOpacityUnfocused 30
#Const MenuLibsExpendableButton_C_Property_IconImageUrl 31
#Const MenuLibsExpendableButton_C_Property_IconSize 32
#Const MenuLibsExpendableButton_C_Property_IconColorMode 33
#Const MenuLibsExpendableButton_C_Property_IconColorFocused 34
#Const MenuLibsExpendableButton_C_Property_IconColorUnfocused 35
#Const MenuLibsExpendableButton_C_Property_IconOpacityFocused 36
#Const MenuLibsExpendableButton_C_Property_IconOpacityUnfocused 37
#Const MenuLibsExpendableButton_C_Property_IconAlign 38
#Const MenuLibsExpendableButton_C_Property_IconOffset 39
#Const MenuLibsExpendableButton_C_Property_HitboxRot 40
#Const MenuLibsExpendableButton_C_Property_HitboxWidthScale 41
#Const MenuLibsExpendableButton_C_Property_HitboxHeightScale 42
#Const MenuLibsExpendableButton_C_Property_HitboxDebug 43
#Const MenuLibsExpendableButton_C_Property_Padding 44
#Const MenuLibsExpendableButton_C_Property_SuperSample 45

#Const MenuLibsExpendableButton_C_ColorMode_None 0
#Const MenuLibsExpendableButton_C_ColorMode_Colorize 1
#Const MenuLibsExpendableButton_C_ColorMode_Modulate 2
#Const MenuLibsExpendableButton_C_ColorMode_Background 3

#Const MenuLibsExpendableButton_C_IconAlign_Left 0
#Const MenuLibsExpendableButton_C_IconAlign_Right 1
#Const MenuLibsExpendableButton_C_IconAlign_Center 2
#Const MenuLibsExpendableButton_C_IconAlign_TextLeft 3
#Const MenuLibsExpendableButton_C_IconAlign_TextRight 4

#Const MenuLibsExpendableButton_C_Position_Left 0
#Const MenuLibsExpendableButton_C_Position_Middle 1
#Const MenuLibsExpendableButton_C_Position_Right 2
#Const MenuLibsExpendableButton_C_Positions [0, 1, 2]

#Const MenuLibsExpendableButton_C_Default_Colorize <-1., -1., -1.>
#Const MenuLibsExpendableButton_C_Default_ModulateColor <1., 1., 1.>
#Const MenuLibsExpendableButton_C_Default_BgColor <0., 0., 0.>

#Const MenuLibsExpendableButton_C_FocusFadeInDuration 200
#Const MenuLibsExpendableButton_C_FocusFadeOutDuration 200

#Const MenuLibsExpendableButton_C_IconTextMargin 1.

// */
// @Component end component-menulibs-expendable-button

// @Component start component-tmnext-expendable-button
// /*

#Const MenuLibsExpendableButton_C_Style_Stack "component-tmnext-expendable-button-style-stack"
#Const MenuLibsExpendableButton_C_Style_StackTop "component-tmnext-expendable-button-style-stack-top"
#Const MenuLibsExpendableButton_C_Style_StackBottom "component-tmnext-expendable-button-style-stack-bottom"
#Const MenuLibsExpendableButton_C_Style_NoBackground "component-tmnext-expendable-button-style-no-background"
#Const MenuLibsExpendableButton_C_Style_SizeExpendable "component-tmnext-expendable-button-style-size-expendable"
#Const MenuLibsExpendableButton_C_Style_SizeMedium "component-tmnext-expendable-button-style-size-medium"
#Const MenuLibsExpendableButton_C_Style_SizeSmall "component-tmnext-expendable-button-style-size-small"
#Const MenuLibsExpendableButton_C_Style_AlignCenter "component-tmnext-expendable-button-style-align-center"
#Const MenuLibsExpendableButton_C_Style_PageBack "component-tmnext-expendable-button-style-page-back"
#Const MenuLibsExpendableButton_C_Style_PagePrevious "component-tmnext-expendable-button-style-page-previous"
#Const MenuLibsExpendableButton_C_Style_PageNext "component-tmnext-expendable-button-style-page-next"
#Const MenuLibsExpendableButton_C_Style_PageNextAnimated "component-tmnext-expendable-button-style-page-next-animated"
#Const MenuLibsExpendableButton_C_Style_ColorDark "component-tmnext-expendable-button-style-color-dark"
#Const MenuLibsExpendableButton_C_Style_ButtonSecondary "component-tmnext-expendable-button-style-secondary"
#Const MenuLibsExpendableButton_C_Style_ButtonTertiary "component-tmnext-expendable-button-style-tertiary"
#Const MenuLibsExpendableButton_C_Style_ButtonWarning "component-tmnext-expendable-button-style-warning"
#Const MenuLibsExpendableButton_C_Style_Map "component-tmnext-expendable-button-style-map"
#Const MenuLibsExpendableButton_C_Style_MapRaced "component-tmnext-expendable-button-style-map-raced"
#Const MenuLibsExpendableButton_C_Style_MapLive "component-tmnext-expendable-button-style-map-live"
#Const MenuLibsExpendableButton_C_Style_MapLocked "component-tmnext-expendable-button-style-map-locked"
#Const MenuLibsExpendableButton_C_Style_Tabs "component-tmnext-expendable-button-style-tabs"

// */
// @Component end component-tmnext-expendable-button

// @Component start component-menulibs-grid
// /*

#Include "TextLib" as ComponentMenuLibsGrid_TL
#Include "MathLib" as ComponentMenuLibsGrid_ML

#Const ComponentMenuLibsGrid_C_Align_Left 0
#Const ComponentMenuLibsGrid_C_Align_Center 1
#Const ComponentMenuLibsGrid_C_Align_Right 2
#Const ComponentMenuLibsGrid_C_Align_Top 3
#Const ComponentMenuLibsGrid_C_Align_Bottom 5

#Const ComponentMenuLibsGrid_C_Direction_Right 0
#Const ComponentMenuLibsGrid_C_Direction_Top 1
#Const ComponentMenuLibsGrid_C_Direction_Left 2
#Const ComponentMenuLibsGrid_C_Direction_Bottom 3

#Struct ComponentMenuLibsGrid_K_GridColumn { Real Size; Integer Align; }
#Struct ComponentMenuLibsGrid_K_GridConfig { Real Size; Real Padding; Real Gutter; Integer Direction; ComponentMenuLibsGrid_K_GridColumn[Integer] Columns; }
#Struct ComponentMenuLibsGrid_K_Grid { ComponentMenuLibsGrid_K_GridConfig Config; Real[Integer] Size; Real[Integer] Pos; Real[Integer] SizeBg; Real[Integer] PosBg; }

// */
// @Component end component-menulibs-grid

// @Component start component-tmnext-pop-up-background-2
// /*

#Include "TextLib" as TMNextPopUpBackground2_TL
#Include "MathLib" as TMNextPopUpBackground2_ML
#Include "ColorLib" as TMNextPopUpBackground2_CL

#Struct TMNextPopUpBackground2_K_Controls {
	CMlQuad Quad_Dimmer;
	CMlFrame Frame_Background;
	CMlFrame Frame_Align;
	CMlQuad Quad_Background;
	CMlQuad Quad_HeaderImage;
	CMlQuad Quad_HeaderGradient;
	CMlFrame Frame_BackgroundHitbox;
	CMlQuad Quad_BackgroundHitbox;
	CMlQuad Button_Leave;
}
#Struct TMNextPopUpBackground2_K_Area {
	Vec2 Size;
	Vec2 Position;
}
#Struct TMNextPopUpBackground2_K_Properties {
	Integer[] Enabled;
	Vec2 Position;
	Real Width;
	CMlControl::AlignHorizontal HAlign;
	CMlControl::AlignVertical VAlign;
	Text HeaderImageUrl;
	Real DimmerOpacity;
	Vec3 DimmerColor;
	Boolean DimmerSendCloseEvent;
	Boolean ButtonLeaveEnable;
	Boolean HeaderGradientVisible;
}
#Struct TMNextPopUpBackground2_K_State {
	TMNextPopUpBackground2_K_Controls Controls;
	TMNextPopUpBackground2_K_Properties CustomizedProperties;
	TMNextPopUpBackground2_K_Properties MergedProperties;
	Text[] Styles;
	Boolean IsPopUpBackground;
	TMNextPopUpBackground2_K_Area HeaderArea;
	TMNextPopUpBackground2_K_Area ContentArea;
}
#Struct TMNextPopUpBackground2_K_Event {
	Integer Type;
	CMlFrame PopUpBackground;
}

// The properties indexing must be a continuous sequence starting from 0
// 0,1,2,3,... not 0,1,3,... for example
#Const TMNextPopUpBackground2_C_Property_Position 0
#Const TMNextPopUpBackground2_C_Property_Width 1
#Const TMNextPopUpBackground2_C_Property_HAlign 2
#Const TMNextPopUpBackground2_C_Property_VAlign 3
#Const TMNextPopUpBackground2_C_Property_HeaderImageUrl 4
#Const TMNextPopUpBackground2_C_Property_DimmerOpacity 5
#Const TMNextPopUpBackground2_C_Property_DimmerColor 6
#Const TMNextPopUpBackground2_C_Property_DimmerSendCloseEvent 7
#Const TMNextPopUpBackground2_C_Property_ButtonLeaveEnable 8
#Const TMNextPopUpBackground2_C_Property_HeaderGradientVisible 9

#Const TMNextPopUpBackground2_C_EventType_Close 0

#Const TMNextPopUpBackground2_C_SkewAngle 10.
#Const TMNextPopUpBackground2_C_SizeY_Common_HeaderGap 8.
#Const TMNextPopUpBackground2_C_ImgSize_MainPopUp_HeaderMask <3460., 604.>
#Const TMNextPopUpBackground2_C_ImgSize_MainPopUp_HeaderGradient <3256., 568.>
#Const TMNextPopUpBackground2_C_ImgSize_MainPopUp_Background <3680., 1856.>
#Const TMNextPopUpBackground2_C_ImgSize_SecondaryPopUp_Header <1956., 182.>
#Const TMNextPopUpBackground2_C_ImgSize_SecondaryPopUp_Background <1988., 928.>

#Const TMNextPopUpBackground2_C_DefaultProperties TMNextPopUpBackground2_K_Properties {
	Position = <0., 0.>,
	Width = 308.,
	HAlign = CMlControl::AlignHorizontal::HCenter,
	VAlign = CMlControl::AlignVertical::VCenter,
	HeaderImageUrl = "",
	DimmerOpacity = 0.7,
	DimmerColor = <0., 0.0196078, 0.0784314>,
	DimmerSendCloseEvent = True,
	ButtonLeaveEnable = True,
	HeaderGradientVisible = False
}

// */
// @Component end component-tmnext-pop-up-background-2

// @Component start component-textfield
// /*

#Include "TextLib" as ComponentTextField_TL
#Include "ColorLib" as ComponentTextField_CL

#Const ComponentTextField_C_EventType_Update 0
#Const ComponentTextField_C_EventType_StartEdition 1

#Const ComponentTextField_C_Skew_Default 10.
#Const ComponentTextField_C_Skew_Margin 1.

#Const ComponentTextField_C_TextFieldType_Entry 0
#Const ComponentTextField_C_TextFieldType_TextEdit 1

#Const ComponentTextField_C_ColorType_None 0
#Const ComponentTextField_C_ColorType_Colorize 1
#Const ComponentTextField_C_ColorType_ModulateColor 2

#Const ComponentTextField_C_Contour_FocusedColor "ffffff"
#Const ComponentTextField_C_Contour_FocusedOpacity 1.
#Const ComponentTextField_C_Placeholder_Color "6EFAA0"
#Const ComponentTextField_C_Placeholder_Opacity 0.4

#Struct ComponentTextField_K_TextProperties {
	Boolean AutoNewLine;
	CMlEntry::ETextFormat TextFormatEntry;
	CMlEntry::ValueType ValueType;
	CMlTextEdit::EControlScriptEditorTextFormat TextFormatTextEdit;
	Integer MaxLine;
	Real OpacityFocus;
	Real OpacityUnfocus;
	Real TextSize;
	Text Placeholder;
	Text Value;
	Vec3 ColorFocus;
	Vec3 ColorUnfocus;
}

#Struct ComponentTextField_K_ImageProperties {
	Integer ColorType;
	Real OpacityFocus;
	Real OpacityUnfocus;
	Text Image;
	Vec3 ColorFocus;
	Vec3 ColorUnfocus;
}

#Struct ComponentTextField_K_Properties {
	Boolean IsBgEmpty;
	Boolean IsTextField;
	Boolean IsFocused;
	Boolean IsLocked;
	Integer TextFieldType;
	Real Skew;
	Text HAlign;
	Text VAlign;
	Text Tooltip;
	Vec2 Size;
	ComponentTextField_K_ImageProperties Background;
	ComponentTextField_K_ImageProperties Contour;
	ComponentTextField_K_TextProperties Label;
}

#Struct ComponentTextField_K_TextFieldEvent {
	CMlControl Control;
	CMlFrame TextField;
	Integer Type;
	Text Value;
}


// */
// @Component end component-textfield

// @Component start component-popupmultichoice2
// /*

#Include "TextLib" as ComponentPopUpMultiChoice2_TL
#Include "MathLib" as ComponentPopUpMultiChoice2_ML
#Include "ColorLib" as ComponentPopUpMultiChoice2_CL

#Struct ComponentPopUpMultiChoice2_K_DescriptionPart { Boolean TextFitLabelEnabled; Real TextFontSize; Text TextFont; Text TextPrefix; Text TextValue; Vec2 TextSize; Vec3 TextColor; }

#Struct ComponentPopUpMultiChoice2_K_Controls {
	CMlFrame Button_FirstChoice;
	CMlFrame Button_SecondChoice;
	CMlFrame Frame_Background;
	CMlFrame Frame_CustomContent;
	CMlFrame Frame_DescriptionContainer;
	CMlFrame Frame_NavigationContainer;
	CMlFrame Frame_ScrollChoices;
	CMlLabel Label_Title;
}

#Struct ComponentPopUpMultiChoice2_K_Properties {
	Boolean TitleFitLabelEnabled;
	CMlControl::AlignHorizontal HAlign;
	CMlControl::AlignVertical VAlign;
	Integer[] Enabled;
	Real TitleFontSize;
	Real Width;
	Text TitleFont;
	Text TitlePrefix;
	Text TitleValue;
	Text[Integer] Choices;
	Text[] NavigationInputs;
	Text[] NavigationTargets;
	Text[] StylesFirstChoice;
	Text[] StylesScrollChoice;
	Text[] StylesSecondChoice;
	ComponentPopUpMultiChoice2_K_DescriptionPart[] Description;
	Boolean ForceScrollView;
	Boolean ForceHideChoices;
	Integer ScrollFocusedChoiceKey;
}
#Struct ComponentPopUpMultiChoice2_K_State {
	Boolean IsClosedAfterSelection;
	Boolean IsPopUpMultiChoice;
	Boolean IsSelectionRequired;
	CMlControl LastFocusedControl;
	CMlControl[] CustomContentControls;
	Text[] Styles;
	ComponentPopUpMultiChoice2_K_Controls Controls;
	ComponentPopUpMultiChoice2_K_Properties CustomizedProperties;
	ComponentPopUpMultiChoice2_K_Properties MergedProperties;
}

#Struct ComponentPopUpMultiChoice2_K_Event {
	CMlControl SelectedControl;
	CMlFrame PopUpMultiChoice;
	Integer SelectedIndex;
	Integer Type;
	Text SelectedChoice;
}

// The properties indexing must be a continuous sequence starting from 0
// 0,1,2,3,... not 0,1,3,... for example
#Const ComponentPopUpMultiChoice2_C_Property_Width 0
#Const ComponentPopUpMultiChoice2_C_Property_HAlign 1
#Const ComponentPopUpMultiChoice2_C_Property_VAlign 2
#Const ComponentPopUpMultiChoice2_C_Property_Choices 3
#Const ComponentPopUpMultiChoice2_C_Property_TitleValue 4
#Const ComponentPopUpMultiChoice2_C_Property_TitleFitLabelEnabled 5
#Const ComponentPopUpMultiChoice2_C_Property_TitleFont 6
#Const ComponentPopUpMultiChoice2_C_Property_TitleFontSize 7
#Const ComponentPopUpMultiChoice2_C_Property_TitlePrefix 8
#Const ComponentPopUpMultiChoice2_C_Property_Description 9
#Const ComponentPopUpMultiChoice2_C_Property_StylesFirstChoice 10
#Const ComponentPopUpMultiChoice2_C_Property_StylesSecondChoice 11
#Const ComponentPopUpMultiChoice2_C_Property_StylesScrollChoice 12
#Const ComponentPopUpMultiChoice2_C_Property_ForceScrollView 13
#Const ComponentPopUpMultiChoice2_C_Property_NavigationInputs 14
#Const ComponentPopUpMultiChoice2_C_Property_NavigationTargets 15
#Const ComponentPopUpMultiChoice2_C_Property_ForceHideChoices 16
#Const ComponentPopUpMultiChoice2_C_Property_ScrollFocusedChoiceKey 17

#Const ComponentPopUpMultiChoice2_C_EventType_Display 0
#Const ComponentPopUpMultiChoice2_C_EventType_Select 1

#Const ComponentPopUpMultiChoice2_C_DefaultProperties ComponentPopUpMultiChoice2_K_Properties {
	Width = 166.,
	HAlign = CMlControl::AlignHorizontal::HCenter,
	VAlign = CMlControl::AlignVertical::VCenter,
	Choices = [0 => "Â’Ok"],
	TitleValue = "",
	TitleFitLabelEnabled = True,
	TitleFont = "GameFontExtraBold",
	TitleFontSize = 8.,
	TitlePrefix = "$t$i",
	Description = [],
	StylesFirstChoice = ["choice-style-button-default"],
	StylesSecondChoice = ["choice-style-button-default"],
	StylesScrollChoice = ["choice-style-button-scroll"],
	NavigationInputs = [],
	NavigationTargets = [],
	ForceScrollView = False,
	ForceHideChoices = False,
	ScrollFocusedChoiceKey = 0
}

// */
// @Component end component-popupmultichoice2

// @Component start lib-news-struct
// /*

#Struct LibNewsStruct_K_NewsLink { Text Type; Text Param; }
#Struct LibNewsStruct_K_News { Text Id; Text Title; Text Placement; Text MediaUrl; Text MediaType; Boolean MediaPreloaded; Integer Priority; LibNewsStruct_K_NewsLink[] Links; }

#Const LibNewsStruct_C_NewsNullId ""

#Const LibNewsStruct_C_Placement_Null ""
#Const LibNewsStruct_C_Placement_Homepage "Homepage"

#Const LibNewsStruct_C_MediaType_Null ""
#Const LibNewsStruct_C_MediaType_Image "Image"

// */
// @Component end lib-news-struct

// @Component start lib-store-news
// /*

#Struct LibStoreNews_K_State { LibNewsStruct_K_News[] News; Integer NewsLoadingState; }

#Const LibStoreNews_C_StoreId "news"

#Const LibStoreNews_C_Action_LoadNews "LibStoreNews_Action_LoadNews"

#Const LibStoreNews_C_Event_NewsLoadingUpdate "LibStoreNews_Event_NewsLoadingUpdate"

#Const LibStoreNews_C_NewsLoadingState_Unloaded 0
#Const LibStoreNews_C_NewsLoadingState_Loading 1
#Const LibStoreNews_C_NewsLoadingState_Loaded 2
#Const LibStoreNews_C_NewsLoadingState_Error 3

// */
// @Component end lib-store-news

#Include "TextLib" as TL
#Include "MathLib" as ML
#Include "AnimLib" as AL

#Const C_MaxNewsDisplayed 3
#Const C_NewsDisplayDuration 8000
#Const C_HideOldHomePage False

#Const C_AutoFadeInDuration 300
#Const C_AutoFadeGap 200
#Const C_AutoFadeOutDuration 500

#Const C_ManualFadeInDuration 150
#Const C_ManualFadeGap 100
#Const C_ManualFadeOutDuration 250

#Const C_SteerRightTarget 0.7
#Const C_SteerLeftTarget -0.7
#Const C_SteerAnimDuration 300

#Const C_NoBoost 0
#Const C_BoostDown 1
#Const C_BoostUp 2
#Const C_UpPosY 0.2
#Const C_DownPosY 0.
#Const C_BoostAnimDuration 750
#Const C_Boost_MinCooldown 500
#Const C_Boost_MaxCooldown 2000

#Const C_VehiclePosition <-1.8, 0., -0.5>
#Const C_VehicleRotation -218.

#Const C_Choice_Cancel 0
#Const C_Choice_Quit 1

#Const C_ImageUrl_Menu_Matchmaking_CubeMap_Master [0=>"Manialinks/Nadeo/TMNext/Menus/PageMatchmakingMain/Background/CubeMaps/Stade/CubeMap_Stade_Morning.dds", 1=>"Manialinks/Nadeo/TMNext/Menus/PageMatchmakingMain/Background/CubeMaps/Stade/CubeMap_Stade_Day.dds", 2=>"Manialinks/Nadeo/TMNext/Menus/PageMatchmakingMain/Background/CubeMaps/Stade/CubeMap_Stade_Evening.dds", 3=>"Manialinks/Nadeo/TMNext/Menus/PageMatchmakingMain/Background/CubeMaps/Stade/CubeMap_Stade_Night.dds"]
#Const C_BackgroundMood_Morning 0
#Const C_BackgroundMood_Day 1
#Const C_BackgroundMood_Evening 2
#Const C_BackgroundMood_Night 3

#Struct K_Scene {
	Ident SceneId;
	Ident CurrentItemId;
	Ident CurrentExtraItemId;
	// Steer
	Real CurrentSteer;
	Real SteerTarget;
	Boolean SteerAnim;
	Integer SteerAnimStartTime;
	// Boost
	Boolean BoostAnim;
	Integer BoostAnimStartTime;
	Integer CurrentBoost;
	Real CurrentPosY;
	Real TargetPosY;
	Integer NextPossibleBoostTime;
}

#Struct K_Controls {
	CMlFrame Frame_News_Tabs;
	CMlLabel Label_News;
	CMlFrame Button_News;
	CMlFrame Button_Play;
	CMlFrame Frame_NewsTabsButtonsOff;
	CMlFrame Frame_NewsTabsButtonsFocus;
	CMlQuad Quad_News_Button_On;
	CMlQuad Quad_Tmp_News_Img;
	CMlFrame PopUpMultiChoice_CrossPlay;
	CMlFrame PopUpMultiChoice_QuitGame;
}

#Struct K_State {
	K_Controls Controls;
	LibCommonTask_K_Task Task_OpenUplayOverlay;
	LibCommonTask_K_Task Task_OpenNewsLink;
	LibNewsStruct_K_News[] News;
	LibNewsStruct_K_NewsLink[] PendingLinksList;
	Integer CurrentNewsIndex;
	Integer NewsAnimEndTime;
	Integer NewsChangeTime;
	Boolean IsManualNewsSwitch;
	K_Scene Scene;
}



// @Component start component-menulibs-tools
// /*

Boolean ComponentMenuLibsTools_GetBooleanAttribute(CMlControl _Control, Text _AttributeName) {
	if (_Control.DataAttributeExists(_AttributeName)) {
		declare Text AttributeValue = _Control.DataAttributeGet(_AttributeName);
		if (AttributeValue == "1" || ComponentMenuLibsTools_TL::ToLowerCase(AttributeValue ) == "true") {
			return True;
		}
	}
	return False;
}

CMlControl::AlignHorizontal ComponentMenuLibsTools_TextToHAlign(Text _HAlign) {
	switch (ComponentMenuLibsTools_TL::ToLowerCase(ComponentMenuLibsTools_TL::Trim(_HAlign))) {
		case ComponentMenuLibsTools_C_HAlign_Left: return CMlControl::AlignHorizontal::Left;
		case ComponentMenuLibsTools_C_HAlign_Center: return CMlControl::AlignHorizontal::HCenter;
		case ComponentMenuLibsTools_C_HAlign_Right: return CMlControl::AlignHorizontal::Right;
	}

	return CMlControl::AlignHorizontal::HCenter;
}
CMlControl::AlignHorizontal ComponentMenuLibsTools_TextToHAlign2(Text _HAlign) {
	switch (ComponentMenuLibsTools_TL::ToLowerCase(ComponentMenuLibsTools_TL::Trim(_HAlign))) {
		case ComponentMenuLibsTools_C_HAlign_Left: return CMlControl::AlignHorizontal::Left;
		case ComponentMenuLibsTools_C_HAlign_Center: return CMlControl::AlignHorizontal::HCenter;
		case ComponentMenuLibsTools_C_HAlign_Right: return CMlControl::AlignHorizontal::Right;
	}

	return CMlControl::AlignHorizontal::None;
}

CMlControl::AlignHorizontal ComponentMenuLibsTools_MirrorHAlign(CMlControl::AlignHorizontal _HAlign) {
	switch (_HAlign) {
		case CMlControl::AlignHorizontal::Left: return CMlControl::AlignHorizontal::Right;
		case CMlControl::AlignHorizontal::HCenter: return CMlControl::AlignHorizontal::HCenter;
		case CMlControl::AlignHorizontal::Right: return CMlControl::AlignHorizontal::Left;
	}
	return CMlControl::AlignHorizontal::HCenter;
}

CMlControl::AlignVertical ComponentMenuLibsTools_TextToVAlign(Text _VAlign) {
	switch (ComponentMenuLibsTools_TL::ToLowerCase(ComponentMenuLibsTools_TL::Trim(_VAlign))) {
		case ComponentMenuLibsTools_C_VAlign_Top: return CMlControl::AlignVertical::Top;
		case ComponentMenuLibsTools_C_VAlign_Center: return CMlControl::AlignVertical::VCenter2;
		case ComponentMenuLibsTools_C_VAlign_Bottom: return CMlControl::AlignVertical::Bottom;
	}

	return CMlControl::AlignVertical::VCenter2;
}
CMlControl::AlignVertical ComponentMenuLibsTools_TextToVAlign2(Text _VAlign) {
	switch (ComponentMenuLibsTools_TL::ToLowerCase(ComponentMenuLibsTools_TL::Trim(_VAlign))) {
		case ComponentMenuLibsTools_C_VAlign_Top: return CMlControl::AlignVertical::Top;
		case ComponentMenuLibsTools_C_VAlign_Center: return CMlControl::AlignVertical::VCenter;
		case ComponentMenuLibsTools_C_VAlign_Center2: return CMlControl::AlignVertical::VCenter2;
		case ComponentMenuLibsTools_C_VAlign_Bottom: return CMlControl::AlignVertical::Bottom;
	}

	return CMlControl::AlignVertical::None;
}

CMlControl::AlignVertical ComponentMenuLibsTools_MirrorVAlign(CMlControl::AlignVertical _VAlign) {
	switch (_VAlign) {
		case CMlControl::AlignVertical::Top: return CMlControl::AlignVertical::Bottom;
		case CMlControl::AlignVertical::VCenter: return CMlControl::AlignVertical::VCenter;
		case CMlControl::AlignVertical::VCenter2: return CMlControl::AlignVertical::VCenter2;
		case CMlControl::AlignVertical::Bottom: return CMlControl::AlignVertical::Top;
	}
	return CMlControl::AlignVertical::VCenter2;
}

Vec2 ComponentMenuLibsTools_TextToVec2(Text _Source) {
	declare Text[] Values = ComponentMenuLibsTools_TL::Split(" ", ComponentMenuLibsTools_TL::Trim(_Source));

	declare Real X = 0.;
	if (Values.existskey(0)) {
		X = ComponentMenuLibsTools_TL::ToReal(Values[0]);
	}
	declare Real Y = 0.;
	if (Values.existskey(1)) {
		Y = ComponentMenuLibsTools_TL::ToReal(Values[1]);
	}

	return <X, Y>;
}

Int2 ComponentMenuLibsTools_TextToInt2(Text _Source) {
	declare Text[] Values = ComponentMenuLibsTools_TL::Split(" ", ComponentMenuLibsTools_TL::Trim(_Source));

	declare Integer X = 0;
	if (Values.existskey(0)) {
		X = ComponentMenuLibsTools_TL::ToInteger(Values[0]);
	}
	declare Integer Y = 0;
	if (Values.existskey(1)) {
		Y = ComponentMenuLibsTools_TL::ToInteger(Values[1]);
	}

	return <X, Y>;
}

Real[] ComponentMenuLibsTools_TextToRealArray(Text _Source) {
	declare Real[] Array;
	declare Text[] Values = ComponentMenuLibsTools_TL::Split(" ", ComponentMenuLibsTools_TL::Trim(_Source));

	foreach (Value in Values) {
		Array.add(ComponentMenuLibsTools_TL::ToReal(Value));
	}

	return Array;
}

Vec3 ComponentMenuLibsTools_TextToVec3(Text _Source) {
	declare Text[] Values = ComponentMenuLibsTools_TL::Split(" ", ComponentMenuLibsTools_TL::Trim(_Source));

	declare Real X = 0.;
	if (Values.existskey(0)) {
		X = ComponentMenuLibsTools_TL::ToReal(Values[0]);
	}
	declare Real Y = 0.;
	if (Values.existskey(1)) {
		Y = ComponentMenuLibsTools_TL::ToReal(Values[1]);
	}
	declare Real Z = 0.;
	if (Values.existskey(2)) {
		Z = ComponentMenuLibsTools_TL::ToReal(Values[2]);
	}

	return <X, Y, Z>;
}

Boolean ComponentMenuLibsTools_TextToBoolean(Text _Source) {
	declare Text Value = ComponentMenuLibsTools_TL::ToLowerCase(ComponentMenuLibsTools_TL::Trim(_Source));
	return (Value != "0" && Value != "false");
}

Text ComponentMenuLibsTools_MenuNavActionToText(CMlScriptEvent::EMenuNavAction _MenuNavAction) {
	switch (_MenuNavAction) {
		case CMlScriptEvent::EMenuNavAction::Up: return "up";
		case CMlScriptEvent::EMenuNavAction::Right: return "right";
		case CMlScriptEvent::EMenuNavAction::Left: return "left";
		case CMlScriptEvent::EMenuNavAction::Down: return "down";
		case CMlScriptEvent::EMenuNavAction::Select: return "select";
		case CMlScriptEvent::EMenuNavAction::Cancel: return "cancel";
		case CMlScriptEvent::EMenuNavAction::PageUp: return "pageup";
		case CMlScriptEvent::EMenuNavAction::PageDown: return "pagedown";
		case CMlScriptEvent::EMenuNavAction::AppMenu: return "appmenu";
		case CMlScriptEvent::EMenuNavAction::Action1: return "action1";
		case CMlScriptEvent::EMenuNavAction::Action2: return "action2";
		case CMlScriptEvent::EMenuNavAction::ScrollUp: return "scrollup";
		case CMlScriptEvent::EMenuNavAction::ScrollDown: return "scrolldown";
	}

	return "";
}

Vec3 ComponentMenuLibsTools_GetVisibleColorOnBackground(Vec3 _BackgroundColor, Vec3 _TargetColor, Real _Threshold) {
	declare Real Threshold = ComponentMenuLibsTools_ML::Clamp(_Threshold, 0., 0.5);
	declare Vec3 BackgroundColorHSV = ComponentMenuLibsTools_CL::RgbToHsv(_BackgroundColor);
	declare Vec3 TargetColorHSV = ComponentMenuLibsTools_CL::RgbToHsv(_TargetColor);

	if (ComponentMenuLibsTools_ML::Abs(BackgroundColorHSV.X - TargetColorHSV.X) > 0.1) {
		return _TargetColor;
	}

	if (ComponentMenuLibsTools_ML::Abs(BackgroundColorHSV.Z - TargetColorHSV.Z) < Threshold) {
		if (BackgroundColorHSV.Z > TargetColorHSV.Z) {
			if (BackgroundColorHSV.Z - Threshold > 0.) {
				TargetColorHSV.Z = BackgroundColorHSV.Z - Threshold;
			} else {
				TargetColorHSV.Z = BackgroundColorHSV.Z + Threshold;
			}
		} else {
			if (BackgroundColorHSV.Z + Threshold < 1.) {
				TargetColorHSV.Z = BackgroundColorHSV.Z + Threshold;
			} else {
				TargetColorHSV.Z = BackgroundColorHSV.Z - Threshold;
			}
		}
	}

	return ComponentMenuLibsTools_CL::HsvToRgb(TargetColorHSV);
}
Vec3 ComponentMenuLibsTools_GetVisibleColorOnBackground(Vec3 _BackgroundColor, Vec3 _TargetColor) {
	return ComponentMenuLibsTools_GetVisibleColorOnBackground(_BackgroundColor, _TargetColor, 0.15);
}

Vec3 ComponentMenuLibsTools_GetBlinkingRed(Integer _BlinkingEndTime) {
	declare Real A = ComponentMenuLibsTools_ML::Cos((_BlinkingEndTime - Now) / 200.);
	declare Real B = (A * 0.5 * 0.2) + 0.9;
	if (A > 0.) A *= 0.1;
	A = (A * 0.9) + 0.9;
	return <B, A, A>;
}

Vec3 ComponentMenuLibsTools_GetBlinkingColor(Integer _BlinkingEndTime, Integer _BlinkingFrequency, Integer _BlinkingDamping, Vec3 _BaseColor, Vec3 _BlinkColor) {
	declare Vec3 DiffColor = _BlinkColor - _BaseColor;
	declare Real Ratio = (ComponentMenuLibsTools_ML::Cos(((_BlinkingEndTime - Now) * ComponentMenuLibsTools_ML::Pi * 2.) / (_BlinkingFrequency * 1.)) * -0.5) + 0.5;
	return _BaseColor + (DiffColor * ComponentMenuLibsTools_ML::Pow(Ratio, _BlinkingDamping * 1.));
}
Vec3 ComponentMenuLibsTools_GetBlinkingColor(Integer _BlinkingEndTime, Integer _BlinkingFrequency, Vec3 _BaseColor, Vec3 _BlinkColor) {
	return ComponentMenuLibsTools_GetBlinkingColor(_BlinkingEndTime, _BlinkingFrequency, 1, _BaseColor, _BlinkColor);
}

Vec2 ComponentMenuLibsTools_GetAlignPosition(Vec2 _Size, CMlControl::AlignHorizontal _HAlign, CMlControl::AlignVertical _VAlign) {
	declare Vec2 Position = <0., 0.>;

	switch (_HAlign) {
		case CMlControl::AlignHorizontal::Left: Position.X = 0.;
		case CMlControl::AlignHorizontal::HCenter: Position.X = _Size.X * -0.5;
		case CMlControl::AlignHorizontal::Right: Position.X = _Size.X * -1.;
	}
	switch (_VAlign) {
		case CMlControl::AlignVertical::Top: Position.Y = 0.;
		case CMlControl::AlignVertical::VCenter: Position.Y = _Size.Y * 0.5;
		case CMlControl::AlignVertical::VCenter2: Position.Y = _Size.Y * 0.5;
		case CMlControl::AlignVertical::Bottom: Position.Y = _Size.Y * 1.;
	}

	return Position;
}

Void ComponentMenuLibsTools_AlignFrame(CMlFrame _Frame_Align, Vec2 _Size, CMlControl::AlignHorizontal _HAlign, CMlControl::AlignVertical _VAlign) {
	_Frame_Align.RelativePosition_V3 = ComponentMenuLibsTools_GetAlignPosition(_Size, _HAlign, _VAlign);
}
Void ComponentMenuLibsTools_AlignFrame(CMlFrame _Frame_Align, Vec2 _Size, Text _HAlign, Text _VAlign) {
	ComponentMenuLibsTools_AlignFrame(_Frame_Align, _Size, ComponentMenuLibsTools_TextToHAlign(_HAlign), ComponentMenuLibsTools_TextToVAlign(_VAlign));
}
Void ComponentMenuLibsTools_AlignFrame2(CMlFrame _Frame_Align, Vec2 _Size, Text _HAlign, Text _VAlign) {
	ComponentMenuLibsTools_AlignFrame(_Frame_Align, _Size, ComponentMenuLibsTools_TextToHAlign2(_HAlign), ComponentMenuLibsTools_TextToVAlign2(_VAlign));
}
Void ComponentMenuLibsTools_AlignFrameContent(CMlFrame _Frame_Align, Vec2 _Size, CMlControl::AlignHorizontal _HAlign, CMlControl::AlignVertical _VAlign) {
	ComponentMenuLibsTools_AlignFrame(_Frame_Align, -_Size, _HAlign, _VAlign);
}
Void ComponentMenuLibsTools_AlignFrameContent(CMlFrame _Frame_Align, Vec2 _Size, Text _HAlign, Text _VAlign) {
	ComponentMenuLibsTools_AlignFrameContent(_Frame_Align, _Size, ComponentMenuLibsTools_TextToHAlign(_HAlign), ComponentMenuLibsTools_TextToVAlign(_VAlign));
}
Void ComponentMenuLibsTools_AlignFrameContent2(CMlFrame _Frame_Align, Vec2 _Size, Text _HAlign, Text _VAlign) {
	ComponentMenuLibsTools_AlignFrameContent(_Frame_Align, _Size, ComponentMenuLibsTools_TextToHAlign2(_HAlign), ComponentMenuLibsTools_TextToVAlign2(_VAlign));
}

/** Add the halign and valign parameters to a CMlControl.
 *	This function acts like the halign and valign parameters for the CMlQuad in the Manialink.
 *	Basically it will move the frame anchor point to its given side.
 *
 *	@note			Use this function before updating the control's position
 *	@example 	PauseMenuOnline_Client.Script.txt
 *
 *	@param	_Control					The given control
 *	@param	_Size							The size of the given control
 * 	@param	_HAlign						The horizontal align for the given control
 *	@param	_VAlign						The vertical align for the given control
 */
Void ComponentMenuLibsTools_Align(CMlControl _Control, Vec2 _Size, CMlControl::AlignHorizontal _HAlign, CMlControl::AlignVertical _VAlign) {
	switch (_HAlign) {
		case CMlControl::AlignHorizontal::Left: {
			_Control.RelativePosition_V3.X = _Size.X * 0.5;
		}
		case CMlControl::AlignHorizontal::HCenter: {
			_Control.RelativePosition_V3.X = 0.;
		}
		case CMlControl::AlignHorizontal::Right: {
			_Control.RelativePosition_V3.X = _Size.X * -0.5;
		}
	}
	switch (_VAlign) {
		case CMlControl::AlignVertical::Top: {
			_Control.RelativePosition_V3.Y = _Size.Y * -0.5;
		}
		case CMlControl::AlignVertical::VCenter: {
			_Control.RelativePosition_V3.Y = 0.;
		}
		case CMlControl::AlignVertical::VCenter2: {
			_Control.RelativePosition_V3.Y = 0.;
		}
		case CMlControl::AlignVertical::Bottom: {
			_Control.RelativePosition_V3.Y = _Size.Y * 0.5;
		}
	}
}
Void ComponentMenuLibsTools_Align(CMlFrame _Frame_Align, Vec2 _Size, Text _HAlign, Text _VAlign) {
	ComponentMenuLibsTools_Align(_Frame_Align, _Size, ComponentMenuLibsTools_TextToHAlign(_HAlign), ComponentMenuLibsTools_TextToVAlign(_VAlign));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Make the text in the label fit inside without being cut.
 *	Can only reduce label size, USE ONLY FOR STATIC LABELS.
 *	For dynamic labels use overloaded version with settable Default Size
 *
 *	Be careful to not use a too big initial text size with small steps
 *	Otherwise the function will spend a long time reducing the
 *	TextSize to make the text fit in the label
 *	Which will cause performances problems
 *
 *	@param	_Label_Target							The label to update
 *	@param	_MinTextSize							Stop decreasing the label text size at this value
 */
Void ComponentMenuLibsTools_FitLabelValue(CMlLabel _Label_Target, Real _MinTextSize, Real _TextSizeStep) {
	declare MaxSteps = (_Label_Target.TextSizeReal - _MinTextSize) / _TextSizeStep;
	if (MaxSteps > ComponentMenuLibsTools_C_FitLabelMaxSteps) {
		log("WARNING [Tools] FitLabelValue() too many steps : "^MaxSteps^" > "^ComponentMenuLibsTools_C_FitLabelMaxSteps^" | Start : "^_Label_Target.TextSizeReal^" | Min : "^_MinTextSize^" | Step : "^_TextSizeStep^" | Label '"^_Label_Target.ControlId^"'");
	}

	declare Text Value = ComponentMenuLibsTools_TL::GetTranslatedText(_Label_Target.Value);
	// When computing the height of a multilines label, the returned value might not always be up to date at first
	// It looks like reading the `ValueLineCount` property has the side effect of updating the label's properties
	// eg:
	// log(_Label_Target.ComputeHeight(Value)); => 10.
	// _Label_Target.ValueLineCount;
	// log(_Label_Target.ComputeHeight(Value)); => 50.
	// check /utils/script-documentation/-/issues/126 for more info
	declare Integer Tmp = _Label_Target.ValueLineCount;

	// Fit height
	while (_Label_Target.ComputeHeight(Value) > _Label_Target.Size.Y && _Label_Target.TextSizeReal > _MinTextSize) {
		_Label_Target.TextSizeReal -= _TextSizeStep;
	}
	while (_Label_Target.MaxLine > 1 && _Label_Target.ValueLineCount > _Label_Target.MaxLine && _Label_Target.TextSizeReal > _MinTextSize) {
		_Label_Target.TextSizeReal -= _TextSizeStep;
	}
	// Fit width
	if (_Label_Target.ValueLineCount <= 1) {
		while (_Label_Target.ComputeWidth(Value) > _Label_Target.Size.X && _Label_Target.TextSizeReal > _MinTextSize) {
			_Label_Target.TextSizeReal -= _TextSizeStep;
		}
	}
	// Special case for multilines text
	// In this case ComputeWidth() return the text width as if it was on one line
	else {
		declare Words = ComponentMenuLibsTools_TL::Split("-", ComponentMenuLibsTools_TL::RegexReplace("[\\s-]", Value, "g", "-"));
		foreach (Word in Words) {
			while (_Label_Target.ComputeWidth(Word) > _Label_Target.Size.X && _Label_Target.TextSizeReal > _MinTextSize) {
				_Label_Target.TextSizeReal -= _TextSizeStep;
			}
		}
	}

	if (_Label_Target.TextSizeReal < _MinTextSize) {
		_Label_Target.TextSizeReal = _MinTextSize;
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Use this overload for dynamic labels
 *
 *	@param	_DefaultSize							Initial text size before decreasing
 */
Void ComponentMenuLibsTools_FitLabelValue(CMlLabel _Label_Target, Real _DefaultSize, Real _MinTextSize, Real _TextSizeStep) {
	_Label_Target.TextSizeReal = _DefaultSize;
	ComponentMenuLibsTools_FitLabelValue(_Label_Target, _MinTextSize, _TextSizeStep);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Format a rank into a top
 *
 *	@param	_Rank											The rank to format
 *	@param	_PrefixWithTop						Prefix the rank with top or not
 *	@param	_FormatLimit							Above this limit, format the rank with "K" when above the thousands
 *	@param	_IsFromLiveApi						Is the ranking coming from the Live API ?
 *
 *	@return														"Top 123", "Top 5K", "123", "5K"
 */
Text ComponentMenuLibsTools_FormatTop(Integer _Rank, Boolean _PrefixWithTop, Integer _FormatLimit, Boolean _IsFromLiveApi) {
	declare Integer Rank = _Rank;
	// The `TL::FormatRank()` function will format 1500 as 1K, but for a top it makes more sense to display "Top 2K",
	// so we round it up to the superior thousand.
	// If the rank comes from the Live API, it will already be rounded correctly above 10000,
	// so we don't have to correct the rounding ourselves.
	if (_FormatLimit >= 1000 && Rank % 1000 != 0 && Rank >= _FormatLimit && (!_IsFromLiveApi || Rank < ComponentMenuLibsTools_C_LiveApiRankRoundingStart)) {
		Rank += 1000;
	}
	declare Text Top = ""^Rank;
	if (Rank >= _FormatLimit) {
		Top = ComponentMenuLibsTools_TL::FormatRank(Rank, True);
	}
	if (_PrefixWithTop) {
		Top = ComponentMenuLibsTools_TL::Compose("Â’Top %1", Top);
	}
	return Top;
}
Text ComponentMenuLibsTools_FormatTop(Integer _Rank, Boolean _PrefixWithTop, Integer _FormatLimit) {
	return ComponentMenuLibsTools_FormatTop(_Rank, _PrefixWithTop, _FormatLimit, True);
}
Text ComponentMenuLibsTools_FormatTop(Integer _Rank, Boolean _PrefixWithTop) {
	return ComponentMenuLibsTools_FormatTop(_Rank, _PrefixWithTop, 1000);
}
Text ComponentMenuLibsTools_FormatTop(Integer _Rank) {
	return ComponentMenuLibsTools_FormatTop(_Rank, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Format a time diff to show the least number possible
Text ComponentMenuLibsTools_FormatTimeDiff(Integer _TimeDiff) {
	declare Text Diff = "";

	if (_TimeDiff > -60000 && _TimeDiff < 60000) {
		Diff = ComponentMenuLibsTools_TL::FormatReal(_TimeDiff / 1000., 3, False, False);
	} else {
		Diff = ComponentMenuLibsTools_TL::TimeToText(_TimeDiff, True, True);
	}

	if (_TimeDiff >= 0) {
		Diff = "+"^Diff;
	}

	return Diff;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Check if a controller (keyboard, gamepad, mouse, ...)
// was used during the past frame
// `_PrevMousePos` must come `Input.MousePos`. `<MouseX, MouseY>` is not the same thing.
// /trackmania-next/tmnext/-/issues/4110#note_205932
Boolean ComponentMenuLibsTools_ControllerWasUsed(Vec2 _PrevMousePos) {
	foreach (Event in PendingEvents) {
		if (
			Event.Type == CMlScriptEvent::Type::KeyPress ||
			Event.Type == CMlScriptEvent::Type::MenuNavigation ||
			Event.Type == CMlScriptEvent::Type::MouseClick ||
			Event.Type == CMlScriptEvent::Type::MouseRightClick
		) {
			return True;
		}
	}

	foreach (Event in Input.PendingEvents) {
		if (Event.Type == CInputEvent::EType::PadButtonPress) {
			return True;
		}
	}

	if (
		_PrevMousePos != Input.MousePos ||
		Input.MouseLeftButton ||
		Input.MouseRightButton ||
		Input.MouseMiddleButton
	) {
		return True;
	}

	return False;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the player is using their mouse
Boolean ComponentMenuLibsTools_IsUsingMouse(Integer _Delay) {
	return (
		Input.TimeSinceLatestMouseActivity < Input.TimeSinceLatestTouchActivity &&
		Input.TimeSinceLatestMouseActivity < Input.TimeSinceLatestKeyboardActivity &&
		Input.TimeSinceLatestMouseActivity < Input.TimeSinceLatestPadActivity &&
		Input.TimeSinceLatestTouchActivity > _Delay &&
		Input.TimeSinceLatestKeyboardActivity > _Delay &&
		Input.TimeSinceLatestPadActivity > _Delay
	);
}
Boolean ComponentMenuLibsTools_IsUsingMouse() {
	return ComponentMenuLibsTools_IsUsingMouse(ComponentMenuLibsTools_C_DefaultMouseActivationDelay);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the Id of the last used controller
Ident ComponentMenuLibsTools_GetActivePadId(Boolean _ExcludeMouse) {
	declare Integer MinIdleDuration = 0;
	declare Ident PadId = NullId;
	foreach (Pad in Input.Pads) {
		if (Pad.Type != CInputPad::EPadType::Mouse || !_ExcludeMouse) {
			if (PadId == NullId || MinIdleDuration > Pad.IdleDuration) {
				PadId = Pad.Id;
				MinIdleDuration = Pad.IdleDuration;
			}
		}
	}
	return PadId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**
 * Remove completly the given tags in a given string
 *
 * @param _Source								The text to clean
 * @param _ForbiddenTags				The tags to remove in the source text
 */
Text ComponentMenuLibsTools_RemoveForbiddenTags(Text _Source, Text[] _ForbiddenTags) {
	if (_Source == "") return _Source;

	declare Text CleanedText = _Source;

	declare Boolean LoopAgain = True;
	while (LoopAgain) {
		LoopAgain = False;

		foreach (Tag in _ForbiddenTags) {
			while (ComponentMenuLibsTools_TL::Find(Tag, CleanedText, True, False)) {
				CleanedText = ComponentMenuLibsTools_TL::Replace(CleanedText, Tag, "");
				LoopAgain = True;
			}
		}
	}

	return CleanedText;
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**
 * Remove all $h, $l, \n and \r in the given text
 * First, the Regex will remove all the $h[] and $l[] tags, as well as the control characters \n and \r
 * Then it will remove the remaining forbidden tags and control characters
 *
 * @param _ToFormat								The text to clean
 */
Text ComponentMenuLibsTools_FormatValue(Text _ToFormat) {
	return ComponentMenuLibsTools_RemoveForbiddenTags(
		ComponentMenuLibsTools_TL::RegexReplace("\\$[hl](?:\\[.*\\])?|[\\n\\r]", ComponentMenuLibsTools_TL::Trim(_ToFormat), "gi", ""),
		["$h", "$l", "$<", "$>", "\\n", "\\r"]
	);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Use to get only the CountryPath without the region
Text ComponentMenuLibsTools_GetCountryPath(Text _ZonePath, Text _DefaultMasterZone) {

	if (_DefaultMasterZone == "World") {
		declare Text[] Zones = ComponentMenuLibsTools_TL::Split("|", _ZonePath);
		if (Zones.count <= 3) {
			return _ZonePath;
		} else {
			return ComponentMenuLibsTools_TL::Join("|", ["World", Zones.get(1), Zones.get(2)]);
		}
	} else { //CN version
		return _DefaultMasterZone;
	}

	return "";
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Parse a joinlink in Text format and
 *	return a structure containing all
 *	the joinlink parts
 */
ComponentMenuLibsTools_K_JoinLink ComponentMenuLibsTools_ParseJoinLink(Text _JoinLink) {
	declare Text[] Matches = ComponentMenuLibsTools_TL::RegexMatch("""#(\S+)=([^:@\s]+)(?::([^:@\s]+)?(?::([^:@\s]+))?)?(?:@(\S+))?""", _JoinLink, "");
	declare ComponentMenuLibsTools_K_JoinLink JoinLink;
	if (Matches.count >= 6) {
		JoinLink = ComponentMenuLibsTools_K_JoinLink {
			Full = Matches[0],
			Type = Matches[1],
			ServerLoginOrIp = Matches[2],
			Password = Matches[3],
			Port = Matches[4],
			Title = Matches[5]
		};
	}
	return JoinLink;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update the full joinlink inside a joinlink structure
ComponentMenuLibsTools_K_JoinLink ComponentMenuLibsTools_UpdateJoinLink(ComponentMenuLibsTools_K_JoinLink _JoinLink) {
	declare ComponentMenuLibsTools_K_JoinLink JoinLink = _JoinLink;
	JoinLink.Full = "#"^JoinLink.Type^"="^JoinLink.ServerLoginOrIp;
	if (JoinLink.Password != "") JoinLink.Full ^= ":"^JoinLink.Password;
	if (JoinLink.Port != "") {
		if (JoinLink.Password != "") JoinLink.Full ^= ":"^JoinLink.Port;
		else JoinLink.Full ^= "::"^JoinLink.Port;
	}
	if (JoinLink.Title != "") JoinLink.Full ^= "@"^JoinLink.Title;
	return JoinLink;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Generate a Text joinlink from a joinlink structure
Text ComponentMenuLibsTools_GenerateJoinLink(ComponentMenuLibsTools_K_JoinLink _JoinLink) {
	return ComponentMenuLibsTools_UpdateJoinLink(_JoinLink).Full;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Return the formatted club tag
Text ComponentMenuLibsTools_FormatClubTag(Text _ClubTag) {
	if (_ClubTag != "") {
		if (ComponentMenuLibsTools_TL::Find("$", _ClubTag, True, False)) {
			return "["^ComponentMenuLibsTools_TL::CloseStyleTags("$<"^ComponentMenuLibsTools_RemoveForbiddenTags(ComponentMenuLibsTools_TL::SubText(_ClubTag, 0, ComponentMenuLibsTools_C_TagMaxLength), ComponentMenuLibsTools_C_TagForbiddenTags)^"$>")^"]";
		} else {
			return "[$<"^ComponentMenuLibsTools_TL::SubText(_ClubTag, 0, ComponentMenuLibsTools_C_TagMaxLength)^"$>]";
		}
	}
	return _ClubTag;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Return the day of the current month depending on timezone
Integer ComponentMenuLibsTools_GetMonthDay() {
	declare Integer Epoch = ComponentMenuLibsTools_TL::ToInteger(ComponentMenuLibsTools_TiL::GetCurrent()) / 86400 + 719468; //< Shift epoch (719468 days from 1970-01-01 to 0000-03-01)
	declare Integer Era = Epoch - 146096 / 146097; //< 146097 days in an era
	if (Epoch >= 0) Era = Epoch / 146097;
	declare Integer DayOfEra = Epoch - Era * 146097; //< In the range [0, 146096].
	declare Integer YearOfEra = (DayOfEra - DayOfEra/1460 + DayOfEra/36524 - DayOfEra/146096) / 365; //< In the range [0, 399].
	declare Integer DayOfYear = DayOfEra - (365*YearOfEra + YearOfEra/4 - YearOfEra/100); //< In the range of [0, 364] for a non-leap year, and for leap years has a range of [0, 365].
	declare Integer InternalMonth = (5*DayOfYear + 2)/153; //< Map civil month number [1, 12] (Jan. - Dec.) into the internal month numbering [0, 11] (Mar. - Feb.).

	return DayOfYear - (153*InternalMonth+2)/5 + 1;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**
 * Get the formatted name of the given script name
 *
 * @param _ScriptName											The script name to format
 * @param _DefaultScriptPath							The default path of a script name. e.g. "TrackMania/{ScriptName}.Script.txt"
 * @param _ToReplaceInDefaultScriptPath		The text to replace in the default script path. e.g. "{ScriptName}"
 * @param _ModeNames											An array with script names associated with their script path
 */
Text ComponentMenuLibsTools_GetScriptName(Text _ScriptName, Text _DefaultScriptPath, Text _ToReplaceInDefaultScriptPath, Text[Text] _ModeNames) {
	declare Text NewScriptName = _ScriptName;
	if (!ComponentMenuLibsTools_TL::EndsWith("Script.txt", _ScriptName, False, False)) {
		NewScriptName = ComponentMenuLibsTools_TL::Replace(_DefaultScriptPath, _ToReplaceInDefaultScriptPath, _ScriptName);
	}

	if (_ModeNames.exists(NewScriptName)) {
		return _ModeNames.keyof(NewScriptName);
	} else {
		// This Regex extract the name of the script to display it as a gamemode label.
		// The path and the extension are removed during the operation, the case is ignored (flag "i").
		declare ParsedScriptName = ComponentMenuLibsTools_TL::RegexMatch("(?:.*(?:\\/|\\\\|^))(.*).Script.txt", NewScriptName, "i");
		if (ParsedScriptName.count > 1 && ParsedScriptName[1] != "") {
			NewScriptName = ParsedScriptName[1];
			if (ComponentMenuLibsTools_TL::StartsWith("TM_", NewScriptName)) {
				// This Regex extract words from camelCase and PascalCase.
				return ComponentMenuLibsTools_TL::Join(" ", ComponentMenuLibsTools_TL::RegexFind("([A-Z0-9]+|[A-Z]?[a-z]+)(?=[A-Z0-9]|\\b)", ComponentMenuLibsTools_TL::Split("_", NewScriptName)[1], "g"));
			}
			return NewScriptName;
		}
	}

	return _ScriptName; //< Return the function's parameter to avoid partially formatted script name
}

// */
// @Component end component-menulibs-tools

// @Component start component-checkbox
// /*

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the component's opacity
Void ComponentCheckbox_ApplyOpacityAndColor(CMlFrame _Frame_Checkbox, Boolean _IsAnimated) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	assert(ComponentCheckbox_Properties.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");

	declare Label_Checkbox <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_label-checkbox") as CMlLabel);
	declare LabelMirror_Checkbox <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_label-mirror-checkbox") as CMlLabel);
	declare Quad_Icon <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_quad-icon") as CMlQuad);

	AnimMgr.Flush(Label_Checkbox);
	AnimMgr.Flush(LabelMirror_Checkbox);
	AnimMgr.Flush(Quad_Icon);

	if (ComponentCheckbox_Properties.IsLocked) {
		if (_IsAnimated) {
			AnimMgr.Add(Quad_Icon, "<anim colorize=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Icon.Color)^"\" opacity=\"0.5\"/>", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Label_Checkbox, "<anim textcolor=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Label.Color)^"\" opacity=\"0.5\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			if (ComponentCheckbox_Properties.LabelMirrorValue != "") {
				AnimMgr.Add(LabelMirror_Checkbox, "<anim textcolor=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Label.Color)^"\" opacity=\"0.5\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			Quad_Icon.Colorize = ComponentCheckbox_Properties.Icon.Color;
			Quad_Icon.Opacity = 0.5;
			Label_Checkbox.TextColor = ComponentCheckbox_Properties.Label.Color;
			Label_Checkbox.Opacity = 0.5;
			if (ComponentCheckbox_Properties.LabelMirrorValue != "") {
				LabelMirror_Checkbox.TextColor = ComponentCheckbox_Properties.Label.Color;
				LabelMirror_Checkbox.Opacity = 0.5;
			}
		}
	} else if (ComponentCheckbox_Properties.IsFocused) {
		if (_IsAnimated) {
			AnimMgr.Add(Quad_Icon, "<anim colorize=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Icon.FocusColor)^"\" opacity=\""^ComponentCheckbox_Properties.OpacityFocus^"\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Label_Checkbox, "<anim textcolor=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Label.FocusColor)^"\" opacity=\""^ComponentCheckbox_Properties.OpacityFocus^"\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			if (ComponentCheckbox_Properties.LabelMirrorValue != "") {
				AnimMgr.Add(LabelMirror_Checkbox, "<anim textcolor=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Label.FocusColor)^"\" opacity=\""^ComponentCheckbox_Properties.OpacityFocus^"\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			Quad_Icon.Colorize = ComponentCheckbox_Properties.Icon.FocusColor;
			Quad_Icon.Opacity = ComponentCheckbox_Properties.OpacityFocus;
			Label_Checkbox.TextColor = ComponentCheckbox_Properties.Label.FocusColor;
			Label_Checkbox.Opacity = ComponentCheckbox_Properties.OpacityFocus;
			if (ComponentCheckbox_Properties.LabelMirrorValue != "") {
				LabelMirror_Checkbox.TextColor = ComponentCheckbox_Properties.Label.FocusColor;
				LabelMirror_Checkbox.Opacity = ComponentCheckbox_Properties.OpacityFocus;
			}
		}
	} else {
		if (_IsAnimated) {
			AnimMgr.Add(Quad_Icon, "<anim colorize=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Icon.Color)^"\" opacity=\""^ComponentCheckbox_Properties.OpacityUnfocus^"\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			AnimMgr.Add(Label_Checkbox, "<anim textcolor=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Label.Color)^"\" opacity=\""^ComponentCheckbox_Properties.OpacityUnfocus^"\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			if (ComponentCheckbox_Properties.LabelMirrorValue != "") {
				AnimMgr.Add(LabelMirror_Checkbox, "<anim textcolor=\""^ComponentCheckbox_CL::RgbToHex6(ComponentCheckbox_Properties.Label.Color)^"\" opacity=\""^ComponentCheckbox_Properties.OpacityUnfocus^"\" />", ComponentCheckbox_C_FocusAnimDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		} else {
			Quad_Icon.Colorize = ComponentCheckbox_Properties.Icon.Color;
			Quad_Icon.Opacity = ComponentCheckbox_Properties.OpacityUnfocus;
			Label_Checkbox.TextColor = ComponentCheckbox_Properties.Label.Color;
			Label_Checkbox.Opacity = ComponentCheckbox_Properties.OpacityUnfocus;
			if (ComponentCheckbox_Properties.LabelMirrorValue != "") {
				LabelMirror_Checkbox.TextColor = ComponentCheckbox_Properties.Label.Color;
				LabelMirror_Checkbox.Opacity = ComponentCheckbox_Properties.OpacityUnfocus;
			}
		}
	}
}
Void ComponentCheckbox_ApplyOpacityAndColor(CMlFrame _Frame_Checkbox) {
	ComponentCheckbox_ApplyOpacityAndColor(_Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is focused by the Navigation component
Void ComponentCheckbox_Focus(CMlFrame _Frame_Checkbox, Boolean _IsAnimated) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	assert(ComponentCheckbox_Properties.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");
	if (ComponentCheckbox_Properties.IsLocked) return;

	ComponentCheckbox_Properties.IsFocused = True;
	ComponentCheckbox_ApplyOpacityAndColor(_Frame_Checkbox, _IsAnimated);
}
Void ComponentCheckbox_Focus(CMlFrame _Frame_Checkbox) {
	ComponentCheckbox_Focus(_Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is unfocused by the Navigation component
Void ComponentCheckbox_Unfocus(CMlFrame _Frame_Checkbox, Boolean _IsAnimated) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	assert(ComponentCheckbox_Properties.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");
	if (ComponentCheckbox_Properties.IsLocked) return;

	ComponentCheckbox_Properties.IsFocused = False;
	ComponentCheckbox_ApplyOpacityAndColor(_Frame_Checkbox, _IsAnimated);
}
Void ComponentCheckbox_Unfocus(CMlFrame _Frame_Checkbox) {
	ComponentCheckbox_Unfocus(_Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Apply a locked or unlocked appearance to the component (will not lock/unlock the navigation)
Void ComponentCheckbox_Lock(CMlFrame _Frame_Checkbox, Boolean _IsLocked) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	assert(ComponentCheckbox_Properties.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");

	ComponentCheckbox_Properties.IsLocked = _IsLocked;
	ComponentCheckbox_ApplyOpacityAndColor(_Frame_Checkbox);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Apply all the properties to the component
Void ComponentCheckbox_ApplyProperties(CMlFrame _Frame_Checkbox, ComponentCheckbox_K_Properties _Properties) {
	declare CMlFrame Frame_Align <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_frame-checkbox-align") as CMlFrame);
	declare CMlLabel Label_Checkbox <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_label-checkbox") as CMlLabel);
	declare CMlLabel Label_MirrorCheckbox <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_label-mirror-checkbox") as CMlLabel);
	declare CMlQuad Quad_Icon <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_quad-icon") as CMlQuad);
	declare CMlQuad Quad_Activation <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_quad-activation") as CMlQuad);

	Label_Checkbox.Value = _Properties.Label.Value;
	Label_Checkbox.TextSizeReal = _Properties.Label.TextSize;
	Label_Checkbox.TextPrefix = _Properties.Label.TextPrefix;
	Label_Checkbox.TextFont = _Properties.Label.Font;
	Label_Checkbox.HorizontalAlign = ComponentMenuLibsTools_TextToHAlign(_Properties.Label.HAlign);
	Label_Checkbox.VerticalAlign = ComponentMenuLibsTools_TextToVAlign(_Properties.Label.VAlign);
	Label_Checkbox.ItalicSlope = _Properties.Label.ItalicSlope;
	Label_Checkbox.Size = _Properties.Label.Size;
	Label_Checkbox.AutoNewLine = _Properties.Label.AutoNewLine;
	Label_Checkbox.MaxLine = _Properties.Label.MaxLine;

	if (_Properties.LabelMirrorValue != "") {
		Label_MirrorCheckbox.Value = _Properties.LabelMirrorValue;
		Label_MirrorCheckbox.TextSizeReal = _Properties.Label.TextSize;
		Label_MirrorCheckbox.TextPrefix = _Properties.Label.TextPrefix;
		Label_MirrorCheckbox.TextFont = _Properties.Label.Font;
		Label_MirrorCheckbox.HorizontalAlign = ComponentMenuLibsTools_MirrorHAlign(Label_Checkbox.HorizontalAlign);
		Label_MirrorCheckbox.VerticalAlign = ComponentMenuLibsTools_MirrorVAlign(Label_Checkbox.VerticalAlign);
		Label_MirrorCheckbox.ItalicSlope = _Properties.Label.ItalicSlope;
		Label_MirrorCheckbox.Size = _Properties.Label.Size;
	} else {
		Label_MirrorCheckbox.Value = "";
		Label_MirrorCheckbox.Size = <0., 0.>;
	}

	Quad_Icon.Size = _Properties.Icon.Size;

	ComponentCheckbox_ApplyOpacityAndColor(_Frame_Checkbox, False);

	/* Check state */
	if (_Properties.IsChecked && _Properties.Icon.ImageChecked != "") {
		Quad_Icon.ChangeImageUrl(_Properties.Icon.ImageChecked);
		Quad_Icon.Visible = True;
	} else if (!_Properties.IsChecked && _Properties.Icon.ImageUnchecked != "") {
		Quad_Icon.ChangeImageUrl(_Properties.Icon.ImageUnchecked);
		Quad_Icon.Visible = True;
	} else {
		Quad_Icon.Visible = False;
	}

	/* Position */
	declare Vec2 SizeOfReference = <ComponentCheckbox_ML::Max(Label_Checkbox.Size.X, Quad_Icon.Size.X), ComponentCheckbox_ML::Max(Label_Checkbox.Size.Y, Quad_Icon.Size.Y)>;
	Quad_Icon.RelativePosition_V3 = <SizeOfReference.X * (_Properties.Icon.PosX-0.5), SizeOfReference.Y * (_Properties.Icon.PosY-0.5)>;
	Label_Checkbox.RelativePosition_V3 = <SizeOfReference.X * (_Properties.Label.PosX-0.5), SizeOfReference.Y * (_Properties.Label.PosY-0.5)>;
	if (Label_MirrorCheckbox.Value != "") Label_MirrorCheckbox.RelativePosition_V3 = <SizeOfReference.X * (1-_Properties.Label.PosX-0.5), SizeOfReference.Y * (1-_Properties.Label.PosY-0.5)>;

	/* Get the center pos of the label depending on its alignment */
	declare Vec2 Pos_LabelCenter = Label_Checkbox.RelativePosition_V3;
	switch (Label_Checkbox.HorizontalAlign) {
		case CMlControl::AlignHorizontal::Left: Pos_LabelCenter.X += Label_Checkbox.Size.X/2;
		case CMlControl::AlignHorizontal::Right: Pos_LabelCenter.X -= Label_Checkbox.Size.X/2;
	}
	switch (Label_Checkbox.VerticalAlign) {
		case CMlControl::AlignVertical::Top: Pos_LabelCenter.Y -= Label_Checkbox.Size.Y/2;
		case CMlControl::AlignVertical::Bottom: Pos_LabelCenter.Y += Label_Checkbox.Size.Y/2;
	}

	/* Activation zone */
	if (Label_MirrorCheckbox.Value != "") {
		declare Real Margin = ComponentCheckbox_ML::Abs(Quad_Icon.RelativePosition_V3.X - Pos_LabelCenter.X) - Quad_Icon.Size.X/2 - Label_Checkbox.Size.X/2;
		Quad_Activation.Size.X = ComponentCheckbox_ML::Max(SizeOfReference.X * 2, Quad_Icon.Size.X + (2 * Margin) + (2 * Label_Checkbox.Size.X));
		Quad_Activation.Size.Y = SizeOfReference.Y;
		Quad_Activation.RelativePosition_V3.X = Quad_Icon.RelativePosition_V3.X;
		Quad_Activation.RelativePosition_V3.Y = Quad_Icon.RelativePosition_V3.Y;
	} else {
		Quad_Activation.Size.X = ComponentCheckbox_ML::Max(SizeOfReference.X, Quad_Icon.Size.X/2 + ComponentCheckbox_ML::Abs(Quad_Icon.RelativePosition_V3.X - Pos_LabelCenter.X) + Label_Checkbox.Size.X/2);
		Quad_Activation.Size.Y = ComponentCheckbox_ML::Max(SizeOfReference.Y, Quad_Icon.Size.Y/2 + ComponentCheckbox_ML::Abs(Quad_Icon.RelativePosition_V3.Y - Pos_LabelCenter.Y) + Label_Checkbox.Size.Y/2);
		Quad_Activation.RelativePosition_V3 = Quad_Icon.RelativePosition_V3;
		if (Quad_Icon.RelativePosition_V3.X < Pos_LabelCenter.X) {
			Quad_Activation.RelativePosition_V3.X = ((Quad_Icon.RelativePosition_V3.X - Quad_Icon.Size.X*0.5) + (Pos_LabelCenter.X + Label_Checkbox.Size.X*0.5))*0.5;
		} else if (Quad_Icon.RelativePosition_V3.X > Pos_LabelCenter.X) {
			Quad_Activation.RelativePosition_V3.X = ((Pos_LabelCenter.X - Label_Checkbox.Size.X*0.5) + (Quad_Icon.RelativePosition_V3.X + Quad_Icon.Size.X*0.5))*0.5;
		}
		if (Quad_Icon.RelativePosition_V3.Y < Pos_LabelCenter.Y) {
			Quad_Activation.RelativePosition_V3.Y = ((Quad_Icon.RelativePosition_V3.Y - Quad_Icon.Size.Y*0.5) + (Pos_LabelCenter.Y + Label_Checkbox.Size.Y*0.5))*0.5;
		} else if (Quad_Icon.RelativePosition_V3.Y > Pos_LabelCenter.Y) {
			Quad_Activation.RelativePosition_V3.Y = ((Pos_LabelCenter.Y - Label_Checkbox.Size.Y*0.5) + (Quad_Icon.RelativePosition_V3.Y + Quad_Icon.Size.Y*0.5))*0.5;
		}
	}

	/* Align */
	ComponentMenuLibsTools_Align(Frame_Align, Quad_Activation.Size, _Properties.HAlign, _Properties.VAlign);
	Frame_Align.RelativePosition_V3 -= Quad_Activation.RelativePosition_V3; //< Adjust the offset created by the label

	/* Fit - Apply after every other label properties, especially its size */
	if (_Properties.Label.Fit > 0.) {
		ComponentMenuLibsTools_FitLabelValue(Label_Checkbox, _Properties.Label.Fit, 0.25);
		if (Label_MirrorCheckbox.Value != "") ComponentMenuLibsTools_FitLabelValue(Label_MirrorCheckbox, _Properties.Label.Fit, 0.25);
	}
}
Void ComponentCheckbox_ApplyProperties(CMlFrame _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Special component actions
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean ComponentCheckbox_Check(CMlFrame _Frame_Checkbox, Boolean _Checked, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	assert(ComponentCheckbox_Properties.IsCheckbox, "Control '"^_Frame_Checkbox.ControlId^"' is not a checkbox");
	if (ComponentCheckbox_Properties.IsLocked) return ComponentCheckbox_Properties.IsChecked;

	ComponentCheckbox_Properties.IsChecked = _Checked;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);

	return ComponentCheckbox_Properties.IsChecked;
}
Boolean ComponentCheckbox_Check(CMlFrame _Frame_Checkbox, Boolean _Checked) {
	return ComponentCheckbox_Check(_Frame_Checkbox, _Checked, True);
}

Boolean ComponentCheckbox_Toggle(CMlFrame _Frame_Checkbox, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Check(_Frame_Checkbox, !ComponentCheckbox_Properties.IsChecked, _ApplyProperties);
}
Boolean ComponentCheckbox_Toggle(CMlFrame _Frame_Checkbox) {
	return ComponentCheckbox_Toggle(_Frame_Checkbox, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Setters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void ComponentCheckbox_SetValue(CMlFrame _Frame_Checkbox, Text _Value, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.Value = _Value;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetValue(CMlFrame _Frame_Checkbox, Text _Value) {
	ComponentCheckbox_SetValue(_Frame_Checkbox, _Value, True);
}
Void ComponentCheckbox_SetMirrorValue(CMlFrame _Frame_Checkbox, Text _MirrorValue, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.LabelMirrorValue = _MirrorValue;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetMirrorValue(CMlFrame _Frame_Checkbox, Text _MirrorValue) {
	ComponentCheckbox_SetMirrorValue(_Frame_Checkbox, _MirrorValue, True);
}
Void ComponentCheckbox_SetTextSize(CMlFrame _Frame_Checkbox, Real _TextSize, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.TextSize = _TextSize;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextSize(CMlFrame _Frame_Checkbox, Real _TextSize) {
	ComponentCheckbox_SetTextSize(_Frame_Checkbox, _TextSize, True);
}
Void ComponentCheckbox_SetTextPrefix(CMlFrame _Frame_Checkbox, Text _TextPrefix, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.TextPrefix = _TextPrefix;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextPrefix(CMlFrame _Frame_Checkbox, Text _TextPrefix) {
	ComponentCheckbox_SetTextPrefix(_Frame_Checkbox, _TextPrefix, True);
}
Void ComponentCheckbox_SetTextFont(CMlFrame _Frame_Checkbox, Text _TextFont, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.Font = _TextFont;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextFont(CMlFrame _Frame_Checkbox, Text _TextFont) {
	ComponentCheckbox_SetTextFont(_Frame_Checkbox, _TextFont, True);
}
Void ComponentCheckbox_SetTextColor(CMlFrame _Frame_Checkbox, Vec3 _TextColor, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.Color = _TextColor;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextColor(CMlFrame _Frame_Checkbox, Vec3 _TextColor) {
	ComponentCheckbox_SetTextColor(_Frame_Checkbox, _TextColor, True);
}
Void ComponentCheckbox_SetTextFocusColor(CMlFrame _Frame_Checkbox, Vec3 _TextFocusColor, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.FocusColor = _TextFocusColor;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextFocusColor(CMlFrame _Frame_Checkbox, Vec3 _TextFocusColor) {
	ComponentCheckbox_SetTextFocusColor(_Frame_Checkbox, _TextFocusColor, True);
}
Void ComponentCheckbox_SetTextXPos(CMlFrame _Frame_Checkbox, Real _TextXPos, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.PosX = _TextXPos;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextXPos(CMlFrame _Frame_Checkbox, Real _TextXPos) {
	ComponentCheckbox_SetTextXPos(_Frame_Checkbox, _TextXPos, True);
}
Void ComponentCheckbox_SetTextYPos(CMlFrame _Frame_Checkbox, Real _TextYPos, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.PosY = _TextYPos;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextYPos(CMlFrame _Frame_Checkbox, Real _TextYPos) {
	ComponentCheckbox_SetTextYPos(_Frame_Checkbox, _TextYPos, True);
}
Void ComponentCheckbox_SetTextHAlign(CMlFrame _Frame_Checkbox, Text _HAlign, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.HAlign = _HAlign;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextHAlign(CMlFrame _Frame_Checkbox, Text _HAlign) {
	ComponentCheckbox_SetTextHAlign(_Frame_Checkbox, _HAlign, True);
}
Void ComponentCheckbox_SetTextVAlign(CMlFrame _Frame_Checkbox, Text _VAlign, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.VAlign = _VAlign;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextVAlign(CMlFrame _Frame_Checkbox, Text _VAlign) {
	ComponentCheckbox_SetTextVAlign(_Frame_Checkbox, _VAlign, True);
}
Void ComponentCheckbox_SetTextItalicSlope(CMlFrame _Frame_Checkbox, Real _ItalicSlope, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.ItalicSlope = _ItalicSlope;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetTextItalicSlope(CMlFrame _Frame_Checkbox, Real _ItalicSlope) {
	ComponentCheckbox_SetTextItalicSlope(_Frame_Checkbox, _ItalicSlope, True);
}
Void ComponentCheckbox_SetLabelSize(CMlFrame _Frame_Checkbox, Vec2 _LabelSize, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.Size = _LabelSize;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetLabelSize(CMlFrame _Frame_Checkbox, Vec2 _LabelSize) {
	ComponentCheckbox_SetLabelSize(_Frame_Checkbox, _LabelSize, True);
}
Void ComponentCheckbox_SetFitLabel(CMlFrame _Frame_Checkbox, Real _MinTextSize, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Label.Fit = _MinTextSize;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetFitLabel(CMlFrame _Frame_Checkbox, Real _MinTextSize) {
	ComponentCheckbox_SetFitLabel(_Frame_Checkbox, _MinTextSize, True);
}
Void ComponentCheckbox_SetIconSize(CMlFrame _Frame_Checkbox, Vec2 _Size, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Icon.Size = _Size;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetIconSize(CMlFrame _Frame_Checkbox, Vec2 _Size) {
	ComponentCheckbox_SetIconSize(_Frame_Checkbox, _Size, True);
}
Void ComponentCheckbox_SetIconColor(CMlFrame _Frame_Checkbox, Vec3 _Color, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Icon.Color = _Color;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetIconColor(CMlFrame _Frame_Checkbox, Vec3 _Color) {
	ComponentCheckbox_SetIconColor(_Frame_Checkbox, _Color, True);
}
Void ComponentCheckbox_SetIconFocusColor(CMlFrame _Frame_Checkbox, Vec3 _FocusColor, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Icon.FocusColor = _FocusColor;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetIconFocusColor(CMlFrame _Frame_Checkbox, Vec3 _FocusColor) {
	ComponentCheckbox_SetIconFocusColor(_Frame_Checkbox, _FocusColor, True);
}
Void ComponentCheckbox_SetIconXPos(CMlFrame _Frame_Checkbox, Real _IconXPos, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Icon.PosX = _IconXPos;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetIconXPos(CMlFrame _Frame_Checkbox, Real _IconXPos) {
	ComponentCheckbox_SetIconXPos(_Frame_Checkbox, _IconXPos, True);
}
Void ComponentCheckbox_SetIconYPos(CMlFrame _Frame_Checkbox, Real _IconYPos, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Icon.PosY = _IconYPos;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetIconYPos(CMlFrame _Frame_Checkbox, Real _IconYPos) {
	ComponentCheckbox_SetIconYPos(_Frame_Checkbox, _IconYPos, True);
}
Void ComponentCheckbox_SetIconChecked(CMlFrame _Frame_Checkbox, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Icon.ImageChecked = _ImageUrl;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetIconChecked(CMlFrame _Frame_Checkbox, Text _ImageUrl) {
	ComponentCheckbox_SetIconChecked(_Frame_Checkbox, _ImageUrl, True);
}
Void ComponentCheckbox_SetIconUnchecked(CMlFrame _Frame_Checkbox, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.Icon.ImageUnchecked = _ImageUrl;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetIconUnchecked(CMlFrame _Frame_Checkbox, Text _ImageUrl) {
	ComponentCheckbox_SetIconUnchecked(_Frame_Checkbox, _ImageUrl, True);
}
Void ComponentCheckbox_SetHAlign(CMlFrame _Frame_Checkbox, Text _HAlign, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.HAlign = _HAlign;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetHAlign(CMlFrame _Frame_Checkbox, Text _HAlign) {
	ComponentCheckbox_SetHAlign(_Frame_Checkbox, _HAlign, True);
}
Void ComponentCheckbox_SetVAlign(CMlFrame _Frame_Checkbox, Text _VAlign, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.VAlign = _VAlign;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetVAlign(CMlFrame _Frame_Checkbox, Text _VAlign) {
	ComponentCheckbox_SetVAlign(_Frame_Checkbox, _VAlign, True);
}
Void ComponentCheckbox_SetOpacityFocus(CMlFrame _Frame_Checkbox, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.OpacityFocus = _Opacity;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetOpacityFocus(CMlFrame _Frame_Checkbox, Real _Opacity) {
	ComponentCheckbox_SetOpacityFocus(_Frame_Checkbox, _Opacity, True);
}
Void ComponentCheckbox_SetOpacityUnfocus(CMlFrame _Frame_Checkbox, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties.OpacityUnfocus = _Opacity;
	if (_ApplyProperties) ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
}
Void ComponentCheckbox_SetOpacityUnfocus(CMlFrame _Frame_Checkbox, Real _Opacity) {
	ComponentCheckbox_SetOpacityUnfocus(_Frame_Checkbox, _Opacity, True);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Getters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean ComponentCheckbox_IsChecked(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.IsChecked;
}

Boolean ComponentCheckbox_IsCheckbox(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.IsCheckbox;
}

Boolean ComponentCheckbox_IsCheckboxTrigger(CMlControl _Control_Trigger) {
	return (_Control_Trigger != Null && _Control_Trigger.ControlId == "ComponentCheckbox_quad-activation");
}

CMlFrame ComponentCheckbox_GetCheckboxFromTrigger(CMlControl _Control_Trigger) {
	declare CMlFrame ComponentCheckbox_ParentCheckbox for _Control_Trigger = Null;
	return ComponentCheckbox_ParentCheckbox;
}
CMlLabel ComponentCheckbox_GetLabel(CMlFrame _Frame_Checkbox) {
	return (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_label-checkbox") as CMlLabel);
}
Text ComponentCheckbox_GetValue(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.Value;
}
Text ComponentCheckbox_GetMirrorValue(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.LabelMirrorValue;
}
Real ComponentCheckbox_GetTextSize(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.TextSize;
}
Text ComponentCheckbox_GetTextPrefix(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.TextPrefix;
}
Text ComponentCheckbox_GetTextFont(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.Font;
}
Vec3 ComponentCheckbox_GetTextColor(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.Color;
}
Vec3 ComponentCheckbox_GetTextFocusColor(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.FocusColor;
}
Real ComponentCheckbox_GetTextXPos(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.PosX;
}
Real ComponentCheckbox_GetTextYPos(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.PosY;
}
Text ComponentCheckbox_GetTextHAlign(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.HAlign;
}
Text ComponentCheckbox_GetTextVAlign(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.VAlign;
}
Real ComponentCheckbox_GetTextItalicSlope(CMlFrame _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.ItalicSlope;
}
Vec2 ComponentCheckbox_GetLabelSize(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.Size;
}
Real ComponentCheckbox_GetFitLabel(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Label.Fit;
}
Vec2 ComponentCheckbox_GetIconSize(CMlFrame _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Icon.Size;
}
Vec3 ComponentCheckbox_GetIconColor(CMlFrame _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Icon.Color;
}
Vec3 ComponentCheckbox_GetIconFocusColor(CMlFrame _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Icon.FocusColor;
}
Real ComponentCheckbox_GetIconXPos(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Icon.PosX;
}
Real ComponentCheckbox_GetIconYPos(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Icon.PosY;
}
Text ComponentCheckbox_GetIconChecked(CMlFrame _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Icon.ImageChecked;
}
Text ComponentCheckbox_GetIconUnchecked(CMlFrame _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.Icon.ImageUnchecked;
}
Text ComponentCheckbox_GetHAlign(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.HAlign;
}
Text ComponentCheckbox_GetVAlign(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.VAlign;
}
Real ComponentCheckbox_GetOpacityFocus(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.OpacityFocus;
}
Real ComponentCheckbox_GetOpacityUnfocus(CMlControl _Frame_Checkbox) {
	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	return ComponentCheckbox_Properties.OpacityUnfocus;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Initialize the component
Void ComponentCheckbox_InitCheckbox(CMlFrame _Frame_Checkbox)	{
	if (_Frame_Checkbox == Null) return;

	declare CMlLabel Label_Checkbox <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_label-checkbox") as CMlLabel);
	declare CMlQuad Quad_Activation <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_quad-activation") as CMlQuad);
	declare CMlQuad Quad_Icon <=> (_Frame_Checkbox.GetFirstChild("ComponentCheckbox_quad-icon") as CMlQuad);

	declare ComponentCheckbox_K_Properties ComponentCheckbox_Properties for _Frame_Checkbox;
	ComponentCheckbox_Properties = ComponentCheckbox_K_Properties {
		IsCheckbox = True,
		IsChecked = False,
		IsLocked = False,
		IsFocused = False,
		OpacityFocus = 1.,
		OpacityUnfocus = 1.,
		HAlign = ComponentMenuLibsTools_C_HAlign_Center,
		VAlign = ComponentMenuLibsTools_C_VAlign_Center,
		Label = ComponentCheckbox_K_TextProperties {
			Value = "",
			TextSize = Label_Checkbox.TextSizeReal,
			TextPrefix = "$t$i",
			Font = Label_Checkbox.TextFont,
			Color = Label_Checkbox.TextColor,
			FocusColor = Label_Checkbox.TextColor,
			PosX = 0.5,
			PosY = 0.5,
			HAlign = "center",
			VAlign = "center2",
			ItalicSlope = 0.,
			Fit = -1.,
			Size = <0., 0.>,
			AutoNewLine = False,
			MaxLine = -1
		},
		Icon = ComponentCheckbox_K_ImageProperties {
			Size = Quad_Icon.Size,
			Color = Quad_Icon.BgColor,
			FocusColor = Quad_Icon.BgColor,
			PosX = 0.5,
			PosY = 0.5,
			ImageChecked = Quad_Icon.ImageUrl,
			ImageUnchecked = Quad_Icon.ImageUrl
		}
	};

	// Initialize the checkbox state
	if (_Frame_Checkbox.DataAttributeExists("checked")) {
		ComponentCheckbox_Properties.IsChecked = ComponentMenuLibsTools_GetBooleanAttribute(_Frame_Checkbox, "checked");
	}
	if (_Frame_Checkbox.DataAttributeExists("halign")) {
		ComponentCheckbox_Properties.HAlign = _Frame_Checkbox.DataAttributeGet("halign");
	}
	if (_Frame_Checkbox.DataAttributeExists("valign")) {
		ComponentCheckbox_Properties.VAlign = _Frame_Checkbox.DataAttributeGet("valign");
	}
	if (_Frame_Checkbox.DataAttributeExists("opacityfocus")) {
		ComponentCheckbox_Properties.OpacityFocus = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("opacityfocus"));
	}
	if (_Frame_Checkbox.DataAttributeExists("opacityunfocus")) {
		ComponentCheckbox_Properties.OpacityUnfocus = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("opacityunfocus"));
	}
	if (_Frame_Checkbox.DataAttributeExists("text")) {
		ComponentCheckbox_Properties.Label.Value = _Frame_Checkbox.DataAttributeGet("text");
	}
	if (_Frame_Checkbox.DataAttributeExists("textsize")) {
		ComponentCheckbox_Properties.Label.TextSize = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("textsize"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textprefix")) {
		ComponentCheckbox_Properties.Label.TextPrefix = _Frame_Checkbox.DataAttributeGet("textprefix");
	}
	if (_Frame_Checkbox.DataAttributeExists("textfont")) {
		ComponentCheckbox_Properties.Label.Font = _Frame_Checkbox.DataAttributeGet("textfont");
	}
	if (_Frame_Checkbox.DataAttributeExists("textcolor")) {
		ComponentCheckbox_Properties.Label.Color = ComponentCheckbox_CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("textcolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textfocuscolor")) {
		ComponentCheckbox_Properties.Label.FocusColor = ComponentCheckbox_CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("textfocuscolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textxpos")) {
		ComponentCheckbox_Properties.Label.PosX = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("textxpos"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textypos")) {
		ComponentCheckbox_Properties.Label.PosY = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("textypos"));
	}
	if (_Frame_Checkbox.DataAttributeExists("texthalign")) {
		ComponentCheckbox_Properties.Label.HAlign = _Frame_Checkbox.DataAttributeGet("texthalign");
	}
	if (_Frame_Checkbox.DataAttributeExists("textvalign")) {
		ComponentCheckbox_Properties.Label.VAlign = _Frame_Checkbox.DataAttributeGet("textvalign");
	}
	if (_Frame_Checkbox.DataAttributeExists("textitalicslope")) {
		ComponentCheckbox_Properties.Label.ItalicSlope = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("textitalicslope"));
	}
	if (_Frame_Checkbox.DataAttributeExists("textmirror")) {
		ComponentCheckbox_Properties.LabelMirrorValue = _Frame_Checkbox.DataAttributeGet("textmirror");
	}
	if (_Frame_Checkbox.DataAttributeExists("labelsize")) {
		ComponentCheckbox_Properties.Label.Size = ComponentMenuLibsTools_TextToVec2(_Frame_Checkbox.DataAttributeGet("labelsize"));
	}
	if (_Frame_Checkbox.DataAttributeExists("fitlabel")) {
		ComponentCheckbox_Properties.Label.Fit = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("fitlabel"));
	}
	if (_Frame_Checkbox.DataAttributeExists("autonewline")) {
		ComponentCheckbox_Properties.Label.AutoNewLine = ComponentMenuLibsTools_TextToBoolean(_Frame_Checkbox.DataAttributeGet("autonewline"));
	}
	if (_Frame_Checkbox.DataAttributeExists("maxline")) {
		ComponentCheckbox_Properties.Label.MaxLine = ComponentCheckbox_TL::ToInteger(_Frame_Checkbox.DataAttributeGet("maxline"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconchecked")) {
		ComponentCheckbox_Properties.Icon.ImageChecked = _Frame_Checkbox.DataAttributeGet("iconchecked");
	}
	if (_Frame_Checkbox.DataAttributeExists("iconunchecked")) {
		ComponentCheckbox_Properties.Icon.ImageUnchecked = _Frame_Checkbox.DataAttributeGet("iconunchecked");
	}
	if (_Frame_Checkbox.DataAttributeExists("iconcolor")) {
		ComponentCheckbox_Properties.Icon.Color = ComponentCheckbox_CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("iconcolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconfocuscolor")) {
		ComponentCheckbox_Properties.Icon.FocusColor = ComponentCheckbox_CL::HexToRgb(_Frame_Checkbox.DataAttributeGet("iconfocuscolor"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconsize")) {
		ComponentCheckbox_Properties.Icon.Size = ComponentMenuLibsTools_TextToVec2(_Frame_Checkbox.DataAttributeGet("iconsize"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconxpos")) {
		ComponentCheckbox_Properties.Icon.PosX = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("iconxpos"));
	}
	if (_Frame_Checkbox.DataAttributeExists("iconypos")) {
		ComponentCheckbox_Properties.Icon.PosY = ComponentCheckbox_TL::ToReal(_Frame_Checkbox.DataAttributeGet("iconypos"));
	}

	declare CMlFrame ComponentCheckbox_ParentCheckbox for Quad_Activation = Null;
	ComponentCheckbox_ParentCheckbox = _Frame_Checkbox;

	ComponentCheckbox_ApplyProperties(_Frame_Checkbox, ComponentCheckbox_Properties);
	ComponentCheckbox_Unfocus(_Frame_Checkbox);
}

***MainInit***
***
Page.GetClassChildren("ComponentCheckbox_frame-container-checkbox", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlFrame Frame_CheckboxContainer = (Control as CMlFrame);
	ComponentCheckbox_InitCheckbox(Frame_CheckboxContainer.Parent);
}
***

// */
// @Component end component-checkbox

// @Component start component-transition
// /*

declare CMlControl[] ComponentTransition_G_TransitionControls;
declare Boolean ComponentTransition_G_IsInTransition;

Void ComponentTransition_Private_InitTransitionControl(CMlControl _Control) {
	declare ComponentTransition_K_TransitionProperties TransitionProperties for _Control;

	if (_Control.DataAttributeExists("transition-in")) {
		declare TransitionIn = _Control.DataAttributeGet("transition-in");
		declare ComponentTransition_K_ControlProperties ControlProperties;
		TransitionProperties.UseTransition = True;
		declare Success = TransitionProperties.TransitionIn.fromjson(TransitionIn);
	}

	if (_Control.DataAttributeExists("transition-out")) {
		declare TransitionOut = _Control.DataAttributeGet("transition-out");
		declare ComponentTransition_K_ControlProperties ControlProperties;
		TransitionProperties.UseTransition = True;
		declare Success = TransitionProperties.TransitionOut.fromjson(TransitionOut);
	}
}

Text ComponentTransition_CreateTransitionAnim(ComponentTransition_K_ControlProperties _Transition) {
	declare Pos = "";
	if (_Transition.UsePosition) {
		Pos = " pos=\""^_Transition.Position.X^" "^_Transition.Position.Y^"\" ";
	}
	declare ZIndex = "";
	if (_Transition.UseZIndex) {
		ZIndex = " z-index=\""^_Transition.ZIndex^"\" ";
	}
	declare Size = "";
	if (_Transition.UseSize) {
		Size = " size=\""^_Transition.Size.X^" "^_Transition.Size.Y^"\" ";
	}
	declare Scale = "";
	if (_Transition.UseScale) {
		Scale = " scale=\""^_Transition.Scale^"\" ";
	}
	declare Rotation = "";
	if (_Transition.UseRotation) {
		Rotation = " rot=\""^_Transition.Rotation^"\" ";
	}
	declare Visible = "";
	if (_Transition.UseVisible) {
		declare Hidden = 0;
		if (!_Transition.Visible) Hidden = 1;
		Visible = " hidden=\""^Hidden^"\" ";
	}
	return "<transition"^Pos^""^ZIndex^""^Size^""^Scale^""^Rotation^""^Visible^"/>";
}

Void ComponentTransition_ApplyTransition(CMlControl _Control, ComponentTransition_K_ControlProperties _Transition) {
	if (_Transition.UsePosition) {
		_Control.RelativePosition_V3 = _Transition.Position;
	}
	if (_Transition.UseZIndex) {
		_Control.ZIndex = _Transition.ZIndex;
	}
	if (_Transition.UseSize) {
		_Control.Size = _Transition.Size;
	}
	if (_Transition.UseScale) {
		_Control.RelativeScale = _Transition.Scale;
	}
	if (_Transition.UseRotation) {
		_Control.RelativeRotation = _Transition.Rotation;
	}
	if (_Transition.UseVisible) {
		_Control.Visible = _Transition.Visible;
	}
}

Void ComponentTransition_PlayTransitions(Integer _StartOrEnd, Integer _InOrOut, Integer _EndTime) {
	foreach (Control in ComponentTransition_G_TransitionControls) {
		declare ComponentTransition_K_TransitionProperties TransitionProperties for Control;
		if (TransitionProperties.UseTransition) {
			if (_StartOrEnd == 0) {
				declare Duration = _EndTime - Now;
				if (_InOrOut == 0) {
					ComponentTransition_ApplyTransition(Control, TransitionProperties.TransitionOut);
					declare Anim = ComponentTransition_CreateTransitionAnim(TransitionProperties.TransitionIn);
					AnimMgr.Add(Control, Anim, Duration, CAnimManager::EAnimManagerEasing::QuadOut);
				} else if (_InOrOut == 1) {
					ComponentTransition_ApplyTransition(Control, TransitionProperties.TransitionIn);
					declare Anim = ComponentTransition_CreateTransitionAnim(TransitionProperties.TransitionOut);
					AnimMgr.Add(Control, Anim, Duration, CAnimManager::EAnimManagerEasing::QuadOut);
				}
			} else if (_StartOrEnd == 1) {
				if (_InOrOut == 0) {
					ComponentTransition_ApplyTransition(Control, TransitionProperties.TransitionIn);
				} else if (_InOrOut == 1) {
					ComponentTransition_ApplyTransition(Control, TransitionProperties.TransitionOut);
				}
			}
		}
	}

	if (_StartOrEnd == 0) {
		ComponentTransition_G_IsInTransition = True;
	} else if (_StartOrEnd == 1) {
		ComponentTransition_G_IsInTransition = False;
	}
}

Boolean ComponentTransition_IsInTransition() {
	return ComponentTransition_G_IsInTransition;
}

***MainInit***
***
ComponentTransition_G_TransitionControls = [];
Page.GetClassChildren("component-transition-container", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare TrueControlHandle = Control;
	ComponentTransition_G_TransitionControls.add(TrueControlHandle);
	ComponentTransition_Private_InitTransitionControl(TrueControlHandle);
}
ComponentTransition_G_IsInTransition = False;
***

***MainLoop***
***
foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch (Event.CustomEventType) {
				case "ComponentTransition_ActiveTransition": {
					if (Event.CustomEventData.count >= 3) {
						ComponentTransition_PlayTransitions(
							ComponentTransition_TL::ToInteger(Event.CustomEventData[0]),
							ComponentTransition_TL::ToInteger(Event.CustomEventData[1]),
							ComponentTransition_TL::ToInteger(Event.CustomEventData[2])
						);
					}
				}
			}
		}
	}
}
***

// */
// @Component end component-transition

// @Component start share-menu-navigation
// /*

declare ShareMenuNavigation_K_MenuNavigationEvent[] ShareMenuNavigation_PendingEvents;

Boolean ShareMenuNavigation_Private_TextActionExists(Text _Text) {
	return ShareMenuNavigation_C_TextToMenuNavAction.existskey(_Text);
}

CMlScriptEvent::EMenuNavAction ShareMenuNavigation_Private_TextToAction(Text _Text) {
	return ShareMenuNavigation_C_TextToMenuNavAction[_Text];
}

***MainLoop***
***
ShareMenuNavigation_PendingEvents = [];

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CMlScriptEvent::Type::PluginCustomEvent: {
			switch (Event.CustomEventType) {
				case "ShareMenuNavigation_MenuNavigation": {
					if (Event.CustomEventData.count >= 3) {
						declare TextAction = Event.CustomEventData[0];
						if (ShareMenuNavigation_Private_TextActionExists(TextAction)) {
							declare ShareMenuNavigation_K_MenuNavigationEvent MenuNavigationEvent;
							MenuNavigationEvent.MenuNavAction = ShareMenuNavigation_Private_TextToAction(TextAction);
							MenuNavigationEvent.IsActionAutoRepeat = (ShareMenuNavigation_TL::ToLowerCase(Event.CustomEventData[1]) == "true");
							MenuNavigationEvent.UserIndex = ShareMenuNavigation_TL::ToInteger(Event.CustomEventData[2]);
							MenuNavigationEvent.IsFromMouse = (ShareMenuNavigation_TL::ToLowerCase(Event.CustomEventData[3]) == "true");
							ShareMenuNavigation_PendingEvents.add(MenuNavigationEvent);
						}
					}
				}
			}
		}
	}
}
***

// */
// @Component end share-menu-navigation

// @Component start component-navigation
// /*

declare CMlControl[Text][Ident] ComponentNavigation_G_NavigationControls;
declare CMlControl[][Text] ComponentNavigation_G_GroupControls;
declare Text[Text] ComponentNavigation_G_GroupParent;
declare CMlControl[Text] ComponentNavigation_G_Focus;
declare CMlControl[Text] ComponentNavigation_G_DefaultFocus;
declare Text[] ComponentNavigation_G_DisabledGroups;
declare Ident[] ComponentNavigation_G_DisabledContainers;
declare ComponentNavigation_K_NavigationEvent[] ComponentNavigation_PendingEvents;
declare Boolean ComponentNavigation_G_UseLocalEvents;
declare Text[] ComponentNavigation_G_NavigationDisabledBy;
declare Integer ComponentNavigation_G_MouseSleepDelay;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Users authorizations
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean ComponentNavigation_IsUserAuthorized(Integer _UserIndex) {
	declare Integer[] ComponentNavigation_AuthorizedUserIndexes for This;
	//if the array is empty, all users are authorized
	if (ComponentNavigation_AuthorizedUserIndexes.count == 0) { return True; }
	return ComponentNavigation_AuthorizedUserIndexes.exists(_UserIndex);
}

Void ComponentNavigation_SetAuthorizedUsers(Integer[] _UserIndexes) {
	declare Integer[] ComponentNavigation_AuthorizedUserIndexes for This;
	ComponentNavigation_AuthorizedUserIndexes = [];
	foreach(UserIndex in _UserIndexes) { ComponentNavigation_AuthorizedUserIndexes.add(UserIndex); }
}

Void ComponentNavigation_AuthorizeAllUsers() {
	ComponentNavigation_SetAuthorizedUsers([]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Containers
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

/**
 * Get the closest container of a given control
 *
 * @param _Container	the control
 * @return the closest container
 *
 */
CMlFrame ComponentNavigation_FindClosestContainer(CMlControl _Control) {
	if (_Control != Null && _Control.Parent != Null) {
		if (_Control.Parent.HasClass("component-navigation-container")) {
			return _Control.Parent;
		} else {
			return ComponentNavigation_FindClosestContainer(_Control.Parent);
		}
	}
	return Null;
}

/**
 * Get the ident of the closest container of a given control
 *
 * @param _Container	the control
 * @return the id of the closest container
 *
 */
Ident ComponentNavigation_Private_FindClosestContainerId(CMlControl _Control) {
	declare CMlFrame Container = ComponentNavigation_FindClosestContainer(_Control);
	if (Container == Null) return NullId;
	return Container.Id;
}

/**
 * Check if the incoming event is from a nested container (and not the global container)
 *
 * @param _ContainerId 	the container id
 * @return 	True if the container is nested, False otherwise (global)
 *
 */
Boolean ComponentNavigation_IsEventFromNestedContainer(CMlFrame _Container) {
	if (_Container == Null) return False;
	assert(ComponentNavigation_G_NavigationControls.existskey(_Container.Id), "[Navigation] The container you provided does not exist");
	return _Container.Id != NullId;
}

/**
 * Check if the given container is enabled or not
 *
 * @param _ContainerId 	the container id
 * @return 	True if the container is enabled, False otherwise
 *
 */
Boolean ComponentNavigation_IsContainerEnabled(CMlFrame _Container) {
	assert(ComponentNavigation_G_NavigationControls.existskey(_Container.Id), "[Navigation] The container you provided does not exist");
	return !ComponentNavigation_G_DisabledContainers.exists(_Container.Id);
}

/**
 * Enable or disable the given navigation container
 *
 * @param _Container 	the navigation container
 * @param _Enable 		the boolean to enable or disable the navigation container
 *
 */
Void ComponentNavigation_EnableContainer(CMlFrame _Container, Boolean _Enable) {
	if (_Container == Null) return;

	assert(ComponentNavigation_G_NavigationControls.existskey(_Container.Id), "[Navigation] The container you provided does not exist");

	if (_Enable && ComponentNavigation_G_DisabledContainers.exists(_Container.Id)) {
		ComponentNavigation_G_DisabledContainers.remove(_Container.Id);
	} else if (!_Enable && !ComponentNavigation_G_DisabledContainers.exists(_Container.Id)) {
		ComponentNavigation_G_DisabledContainers.add(_Container.Id);
	}
}

/**
 * Get all navigation controls inside a given container
 * A Null container will return all current page navigation controls
 *
 * @param _Container 	the container
 * @return An array containing controls inside of the given container
 *
 */
CMlControl[Text] ComponentNavigation_GetContainerControls(CMlFrame _Container) {
	if (!ComponentNavigation_G_NavigationControls.existskey(_Container.Id)) return [];
	return ComponentNavigation_G_NavigationControls[_Container.Id];
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Groups
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// Get all the controls of a group
CMlControl[] ComponentNavigation_GetGroupControls(Text _GroupName, CMlControl[] _GroupControls) {
	declare CMlControl[] GroupControls = _GroupControls;
	if (ComponentNavigation_G_GroupControls.existskey(_GroupName)) {
		foreach (Control in ComponentNavigation_G_GroupControls[_GroupName]) {
			if (!GroupControls.exists(Control)) GroupControls.add(Control);
		}
	}
	if (ComponentNavigation_G_GroupParent.exists(_GroupName)) {
		foreach (Child => Parent in ComponentNavigation_G_GroupParent) {
			if (Parent == _GroupName) {
				declare CMlControl[] ChildControls = ComponentNavigation_GetGroupControls(Child, GroupControls);
				foreach (Control in ChildControls) {
					if (!GroupControls.exists(Control)) GroupControls.add(Control);
				}
			}
		}
	}
	return GroupControls;
}
CMlControl[] ComponentNavigation_GetGroupControls(Text _GroupName) {
	return ComponentNavigation_GetGroupControls(_GroupName, []);
}
CMlControl[] ComponentNavigation_GetGroupControls() {
	return ComponentNavigation_GetGroupControls("");
}

// Get the group name of a control
Text ComponentNavigation_GetControlGroupName(CMlControl _Control) {
	if (_Control == Null) return "";

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;

	return ComponentNavigation_NavigationProperties.Group;
}

// Get the group hierarchy of a control
Text[] ComponentNavigation_Private_GetGroupHierarchy(Text _Group, Text[] _Groups, Boolean _AssertCircularRelationship) {
	declare Text[] Groups = _Groups;
	if (_AssertCircularRelationship) {
		assert(!Groups.exists(_Group), "[Navigation] You are creating a circular relationship. Hierarchy: "^Groups^" | Add: "^_Group);
	}
	Groups.add(_Group);
	if (ComponentNavigation_G_GroupParent.existskey(_Group)) {
		Groups = ComponentNavigation_Private_GetGroupHierarchy(ComponentNavigation_G_GroupParent[_Group], Groups, _AssertCircularRelationship);
	}
	return Groups;
}
Text[] ComponentNavigation_GetGroupHierarchy(Text _Group) {
	return ComponentNavigation_Private_GetGroupHierarchy(_Group, [], False);
}
Text[] ComponentNavigation_GetControlGroups(CMlControl _Control) {
	if (_Control == Null) return [];
	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	return ComponentNavigation_GetGroupHierarchy(ComponentNavigation_NavigationProperties.Group);
}
Text[] ComponentNavigation_AssertNoCircularRelationship(Text _Group) {
	return ComponentNavigation_Private_GetGroupHierarchy(_Group, [], True);
}
Text ComponentNavigation_GetGroupRoot(Text _Group) {
	declare Text Group = _Group;
	if (ComponentNavigation_G_GroupParent.existskey(Group)) {
		Group = ComponentNavigation_GetGroupRoot(ComponentNavigation_G_GroupParent[Group]);
	}
	return Group;
}

// Check if a control is in a group or its parents
Boolean ComponentNavigation_Private_GroupIsDescendantFrom(Text _Group, Text _TargetGroup) {
	if (_Group == _TargetGroup) {
		return True;
	} else if (ComponentNavigation_G_GroupParent.existskey(_Group)) {
		return ComponentNavigation_Private_GroupIsDescendantFrom(ComponentNavigation_G_GroupParent[_Group], _TargetGroup);
	}
	return False;
}
Boolean ComponentNavigation_ControlIsInGroup(CMlControl _Control, Text _Group) {
	if (_Control == Null) return False;
	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	return ComponentNavigation_Private_GroupIsDescendantFrom(ComponentNavigation_NavigationProperties.Group, _Group);
}

Void ComponentNavigation_SetControlGroupName(CMlControl _Control, Text _GroupName) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	if (ComponentNavigation_G_GroupControls.existskey(ComponentNavigation_NavigationProperties.Group) && ComponentNavigation_G_GroupControls[ComponentNavigation_NavigationProperties.Group].exists(_Control)) {
		ComponentNavigation_G_GroupControls[ComponentNavigation_NavigationProperties.Group].remove(_Control);
		if (ComponentNavigation_G_GroupControls[ComponentNavigation_NavigationProperties.Group].count <= 0) {
			ComponentNavigation_G_GroupControls.removekey(ComponentNavigation_NavigationProperties.Group);
			if (ComponentNavigation_G_Focus.existskey(ComponentNavigation_NavigationProperties.Group)) {
				ComponentNavigation_G_Focus.removekey(ComponentNavigation_NavigationProperties.Group);
			}
			if (ComponentNavigation_G_DefaultFocus.existskey(ComponentNavigation_NavigationProperties.Group)) {
				ComponentNavigation_G_DefaultFocus.removekey(ComponentNavigation_NavigationProperties.Group);
			}
		} else {
			if (ComponentNavigation_G_DefaultFocus[ComponentNavigation_NavigationProperties.Group] == _Control) {
				ComponentNavigation_G_DefaultFocus[ComponentNavigation_NavigationProperties.Group] = ComponentNavigation_G_GroupControls[ComponentNavigation_NavigationProperties.Group][0];
			}
			if (ComponentNavigation_G_Focus[ComponentNavigation_NavigationProperties.Group] == _Control) {
				ComponentNavigation_G_Focus[ComponentNavigation_NavigationProperties.Group] = ComponentNavigation_G_DefaultFocus[ComponentNavigation_NavigationProperties.Group];
			}
		}
	}

	if (!ComponentNavigation_G_GroupControls.existskey(_GroupName)) {
		ComponentNavigation_G_GroupControls[_GroupName] = [];
		ComponentNavigation_G_Focus[_GroupName] = Null;
		ComponentNavigation_G_DefaultFocus[_GroupName] = _Control;
	}
	ComponentNavigation_G_GroupControls[_GroupName].add(_Control);
	ComponentNavigation_NavigationProperties.Group = _GroupName;
}

Boolean ComponentNavigation_IsEventFromGroup(ComponentNavigation_K_NavigationEvent _Event, Text _GroupName) {
	return ComponentNavigation_ControlIsInGroup(_Event.From, _GroupName) || ComponentNavigation_ControlIsInGroup(_Event.To, _GroupName);
}

// Create/destroy a group hierarchy
Void ComponentNavigation_UnsetGroupParent(Text _Child) {
	if (!ComponentNavigation_G_GroupParent.existskey(_Child)) return;

	declare Text OldParent = ComponentNavigation_G_GroupParent[_Child];
	ComponentNavigation_G_GroupParent.removekey(_Child);

	// The old parent does not have any children left and it is not associated to any controls
	if (!ComponentNavigation_G_GroupParent.exists(OldParent) && !ComponentNavigation_G_GroupControls.existskey(OldParent)) {
		ComponentNavigation_G_DefaultFocus.removekey(OldParent);
		ComponentNavigation_G_Focus.removekey(OldParent);
	}
}
Void ComponentNavigation_SetGroupParent(Text _Child, Text _Parent) {
	if (ComponentNavigation_G_GroupParent.existskey(_Child) && ComponentNavigation_G_GroupParent[_Child] == _Parent) return;

	// Destroy previous parent => child relationship
	ComponentNavigation_UnsetGroupParent(_Child);

	// Create new parent => child relationship
	ComponentNavigation_G_GroupParent[_Child] = _Parent;
	ComponentNavigation_AssertNoCircularRelationship(_Child);

	if (!ComponentNavigation_G_DefaultFocus.existskey(_Parent)) {
		ComponentNavigation_G_DefaultFocus[_Parent] = Null;
	}
	if (ComponentNavigation_G_DefaultFocus[_Parent] == Null && ComponentNavigation_G_DefaultFocus.existskey(_Child)) {
		ComponentNavigation_G_DefaultFocus[_Parent] = ComponentNavigation_G_DefaultFocus[_Child];
	}
	if (!ComponentNavigation_G_Focus.existskey(_Parent)) {
		ComponentNavigation_G_Focus[_Parent] = Null;
	}
	if (ComponentNavigation_G_Focus[_Parent] == Null) {
		ComponentNavigation_G_Focus[_Parent] = ComponentNavigation_G_DefaultFocus[_Parent];
	}
}

Void ComponentNavigation_SetChildrenGroupParent(Text[] _Children, Text _Parent) {
	foreach (Child in _Children) {
		ComponentNavigation_SetGroupParent(Child, _Parent);
	}
}

// Enable or disable the events generated
// by the given navigation group
CMlControl[] ComponentNavigation_EnableGroup(Text _GroupName, Boolean _Enabled) {
	if (_Enabled && ComponentNavigation_G_DisabledGroups.exists(_GroupName)) {
		ComponentNavigation_G_DisabledGroups.remove(_GroupName);
	} else if (!_Enabled && !ComponentNavigation_G_DisabledGroups.exists(_GroupName)) {
		ComponentNavigation_G_DisabledGroups.add(_GroupName);
	}
	return ComponentNavigation_GetGroupControls(_GroupName);
}
CMlControl[] ComponentNavigation_EnableGroup(Boolean _Enabled) {
	return ComponentNavigation_EnableGroup("", _Enabled);
}

// Check if group is disabled
Boolean ComponentNavigation_GroupIsEnabled(Text _GroupName) {
	return !ComponentNavigation_G_DisabledGroups.containsoneof(ComponentNavigation_GetGroupHierarchy(_GroupName));
}

// Globally (all pages!) discard events
// coming from navigation groups other
// than the given groups
Void ComponentNavigation_SetGlobalSoloGroups(Text[] _Groups) {
	declare Text[] ComponentNavigation_SoloGroups for This;
	ComponentNavigation_SoloGroups = _Groups;
}
Void ComponentNavigation_ResetGlobalSoloGroups() {
	ComponentNavigation_SetGlobalSoloGroups([]);
}
Void ComponentNavigation_AddToGlobalSoloGroups(Text[] _GroupList) {
	declare Text[] ComponentNavigation_SoloGroups for This;
	foreach(Group in _GroupList) {
		ComponentNavigation_SoloGroups.add(Group);
	}
}
Void ComponentNavigation_AddToGlobalSoloGroups(Text _Group) {
	ComponentNavigation_AddToGlobalSoloGroups([_Group]);
}
Void ComponentNavigation_RemoveFromGlobalSoloGroups(Text[] _GroupList) {
	declare Text[] ComponentNavigation_SoloGroups for This;
	foreach(Group in _GroupList) {
		ComponentNavigation_SoloGroups.remove(Group);
	}
}
Void ComponentNavigation_RemoveFromGlobalSoloGroups(Text _Group) {
	ComponentNavigation_RemoveFromGlobalSoloGroups([_Group]);
}
Boolean ComponentNavigation_IsGlobalSoloGroup(Text _Group) {
	declare Text[] ComponentNavigation_SoloGroups for This;
	return (ComponentNavigation_SoloGroups.count <= 0 || ComponentNavigation_SoloGroups.containsoneof(ComponentNavigation_GetGroupHierarchy(_Group)));
}
Text[] ComponentNavigation_GetGlobalSoloGroups() {
	declare Text[] ComponentNavigation_SoloGroups for This;
	return ComponentNavigation_SoloGroups;
}
Boolean ComponentNavigation_IsInGlobalSoloGroups(Text _Group) {
	declare Text[] ComponentNavigation_SoloGroups for This;
	return ComponentNavigation_SoloGroups.exists(_Group);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Navigation
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a navigation structure
 *	than can be passed to the
 *	data-nav attribute
 *
 *	@param	_InputTargets							The controls targeted by each input
 *	@param	_Group										The navigation group
 *	@param	_Zone											The ControlId of the quads that can trigger mouse events
 *	@param	_Focused									Is this control focused by default
 */
Text ComponentNavigation_Inject(Text[Text] _InputTargets, Text _Group, Text _Zone, Boolean _Focused) {
	declare ComponentNavigation_K_NavigationSettings NavigationSettings;
	NavigationSettings.InputTargets = _InputTargets;
	NavigationSettings.Group = _Group;
	NavigationSettings.Zone = _Zone;
	NavigationSettings.Focused = _Focused;
	return NavigationSettings.tojson();
}

/**	Use the local menu navigation events
 *	instead of the events shared by the
 *	ShareMenuNavigation component
 */
Void ComponentNavigation_UseLocalEvents(Boolean _Enable) {
	ComponentNavigation_G_UseLocalEvents = _Enable;
}

// Disable all events generated by the navigation
Void ComponentNavigation_EnableNavigation(Boolean _Enabled, Text _Key) {
	if (_Enabled) {
		ComponentNavigation_G_NavigationDisabledBy.remove(_Key);
	} else {
		if (!ComponentNavigation_G_NavigationDisabledBy.exists(_Key)) ComponentNavigation_G_NavigationDisabledBy.add(_Key);
	}
}
// The navigation remains disabled until there are no key left in the array
Boolean ComponentNavigation_NavigationIsEnabled() {
	return ComponentNavigation_G_NavigationDisabledBy.count <= 0;
}

Boolean ComponentNavigation_IsNavigationControl(CMlControl _Control) {
	if (_Control == Null) return False;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	return ComponentNavigation_NavigationProperties.IsInitialized;
}

// Get the control currently focused
// in the given navigation group
CMlControl ComponentNavigation_GetFocusedControl(Text _GroupName) {
	declare Text GroupRoot = ComponentNavigation_GetGroupRoot(_GroupName);
	if (ComponentNavigation_G_Focus.existskey(GroupRoot)) {
		return ComponentNavigation_G_Focus[GroupRoot];
	}
	return Null;
}
CMlControl ComponentNavigation_GetFocusedControl() {
	return ComponentNavigation_GetFocusedControl("");
}

// Return true if the control is focused
// in the given navigation group
Boolean ComponentNavigation_IsFocused(CMlControl _Control, Text _GroupName) {
	return _Control == ComponentNavigation_GetFocusedControl(_GroupName);
}

// Reset the focus of a group
Void ComponentNavigation_ResetFocus(Text _GroupName) {
	ComponentNavigation_G_Focus[ComponentNavigation_GetGroupRoot(_GroupName)] = Null;
}
Void ComponentNavigation_ResetFocus() {
	ComponentNavigation_ResetFocus("");
}

// Focus the given control
Void ComponentNavigation_Focus(CMlControl _Control) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to focus control \""^_Control.ControlId^"\" but it is not a navigation control");

	if (ComponentNavigation_NavigationProperties.IsLocked) return;

	ComponentNavigation_G_Focus[ComponentNavigation_GetGroupRoot(ComponentNavigation_NavigationProperties.Group)] = _Control;
}

// Unfocus the given control
Void ComponentNavigation_Unfocus(CMlControl _Control) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to unfocus control \""^_Control.ControlId^"\" but it is not a navigation control");

	ComponentNavigation_ResetFocus(ComponentNavigation_GetGroupRoot(ComponentNavigation_NavigationProperties.Group));
}

// Lock/Unlock the given control
Void ComponentNavigation_Lock(CMlControl _Control, Boolean _Lock) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to lock control \""^_Control.ControlId^"\" but it is not a navigation control");

	ComponentNavigation_NavigationProperties.IsLocked = _Lock;
}

Boolean ComponentNavigation_IsLocked(CMlControl _Control) {
	if (_Control == Null) return False;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to see if \""^_Control.ControlId^"\" is locked but it is not a navigation control");

	return ComponentNavigation_NavigationProperties.IsLocked;
}

// Apply an input navigation to a control
Void ComponentNavigation_ApplyInput(CMlControl _Control, CMlScriptEvent::EMenuNavAction _Action, Integer _UserIndex, CMlControl[] _ControlChain, Boolean _IsFromMouse) {
	if (_Control == Null) return;
	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties as FromProperties for _Control;
	assert(FromProperties.IsInitialized, "[Navigation] You are trying to apply an action on control \""^_Control.ControlId^"\" but it is not a navigation control");

	if (FromProperties.Actions.existskey(_Action)) {
		declare Target = FromProperties.Actions[_Action];

		declare CanApplyInput = ComponentNavigation_IsGlobalSoloGroup(FromProperties.Group);
		if (Target != Null) {
			declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties as ToProperties for Target;
			if (ComponentNavigation_G_DisabledGroups.containsoneof(ComponentNavigation_GetGroupHierarchy(ToProperties.Group))) {
				CanApplyInput = False;
			} else if (!ComponentNavigation_IsGlobalSoloGroup(ToProperties.Group)) {
				CanApplyInput = False;
			} else if (ComponentNavigation_G_DisabledContainers.count > 0 && ComponentNavigation_G_DisabledContainers.exists(ComponentNavigation_Private_FindClosestContainerId(_Control))) {
				CanApplyInput = False;
			}

			if (CanApplyInput && ToProperties.IsLocked && (!_ControlChain.exists(Target) || Target == _Control)) {
				CanApplyInput = False;
				if (Target != _Control) {
					declare CMlControl[] ControlChain = _ControlChain;
					ControlChain.add(Target);
					ComponentNavigation_ApplyInput(Target, _Action, _UserIndex, ControlChain, _IsFromMouse);
				}
			}
		}

		if (CanApplyInput) {
			declare CMlControl OriginalFromControl = _Control;
			if (_ControlChain.existskey(0)) OriginalFromControl = _ControlChain[0];

			if (!ComponentNavigation_IsLocked(Target)) { // Target Locked here means that the input cannot be applied to any controls in the target's control chain.
				declare ComponentNavigation_K_NavigationEvent NavigationEvent = ComponentNavigation_K_NavigationEvent {
					Type = ComponentNavigation_C_EventType_NavigateInput,
					From = OriginalFromControl,
					To = Target,
					Input = _Action,
					UserIndex = _UserIndex,
					Container = ComponentNavigation_FindClosestContainer(Target),
					IsFromMouse = _IsFromMouse
				};
				ComponentNavigation_PendingEvents.add(NavigationEvent);
			}
		}
	}
}
Void ComponentNavigation_ApplyInput(CMlControl _Control, CMlScriptEvent::EMenuNavAction _Action, Integer _UserIndex, CMlControl[] _ControlChain) {
	ComponentNavigation_ApplyInput(_Control, _Action, _UserIndex, _ControlChain, False);
}

// Apply a mouse navigation to a control
Void ComponentNavigation_ApplyMouse(CMlControl _Control, CMlScriptEvent::Type _Type, Integer _UserIndex) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	if (!ComponentNavigation_NavigationProperties.IsInitialized) return;

	declare CMlControl FromControl;
	declare Text FromGroupRoot = ComponentNavigation_GetGroupRoot(ComponentNavigation_NavigationProperties.Group);
	if (ComponentNavigation_G_Focus.existskey(FromGroupRoot)) {
		FromControl = ComponentNavigation_G_Focus[FromGroupRoot];
	}

	declare CMlControl ToControl;
	if (_Type == CMlScriptEvent::Type::MouseClick || _Type == CMlScriptEvent::Type::MouseOver) {
		if (ComponentNavigation_NavigationProperties.IsInitialized) {
			ToControl = _Control;
		}
	}

	declare CanApplyMouse = ComponentNavigation_IsGlobalSoloGroup(ComponentNavigation_NavigationProperties.Group) && !ComponentNavigation_IsLocked(ToControl);
	if (ToControl != Null) {
		declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties as ToProperties for ToControl;
		if (ComponentNavigation_G_DisabledGroups.containsoneof(ComponentNavigation_GetGroupHierarchy(ToProperties.Group))) {
			CanApplyMouse = False;
		} else if (!ComponentNavigation_IsGlobalSoloGroup(ToProperties.Group)) {
			CanApplyMouse = False;
		} else if (ComponentNavigation_G_DisabledContainers.count > 0 && ComponentNavigation_G_DisabledContainers.exists(ComponentNavigation_Private_FindClosestContainerId(_Control))) {
			CanApplyMouse = False;
		}
	}

	if (CanApplyMouse) {
		declare ComponentNavigation_K_NavigationEvent NavigationEvent = ComponentNavigation_K_NavigationEvent {
			Type = ComponentNavigation_C_EventType_NavigateMouse,
			From = FromControl,
			To = ToControl,
			Mouse = _Type,
			UserIndex = _UserIndex,
			Container = ComponentNavigation_FindClosestContainer(ToControl),
			IsFromMouse = True
		};
		ComponentNavigation_PendingEvents.add(NavigationEvent);
	}
}

// Trigger a navigation event to the default
// focused control of a group
Void ComponentNavigation_ApplyDefaultFocus(Text _GroupName, CMlScriptEvent::EMenuNavAction _Action, Integer _UserIndex, Boolean _IsFromMouse) {
	declare Text GroupRoot = ComponentNavigation_GetGroupRoot(_GroupName);
	declare Text[] GroupHierarchy = ComponentNavigation_GetGroupHierarchy(_GroupName);
	if (ComponentNavigation_G_DisabledGroups.containsoneof(GroupHierarchy)) return;
	if (!ComponentNavigation_G_DefaultFocus.existskey(GroupRoot)) return;
	if (!ComponentNavigation_IsGlobalSoloGroup(_GroupName)) return;

	declare CMlControl ToControl;
	ToControl = ComponentNavigation_G_DefaultFocus[GroupRoot];
	if (ComponentNavigation_IsLocked(ToControl)) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for ToControl;
	if (!ComponentNavigation_NavigationProperties.IsInitialized || !ComponentNavigation_NavigationProperties.Actions.existskey(_Action)) return;

	declare CMlControl FromControl;
	if (ComponentNavigation_G_Focus.existskey(GroupRoot)) {
		FromControl = ComponentNavigation_G_Focus[GroupRoot];
	}

	declare ComponentNavigation_K_NavigationEvent NavigationEvent = ComponentNavigation_K_NavigationEvent {
		Type = ComponentNavigation_C_EventType_NavigateInput,
		From = FromControl,
		To = ToControl,
		Input = _Action,
		UserIndex = _UserIndex,
		Container = ComponentNavigation_FindClosestContainer(ToControl),
		IsFromMouse = _IsFromMouse
	};
	ComponentNavigation_PendingEvents.add(NavigationEvent);
}
Void ComponentNavigation_ApplyDefaultFocus(Text _GroupName, CMlScriptEvent::EMenuNavAction _Action, Integer _UserIndex) {
	ComponentNavigation_ApplyDefaultFocus(_GroupName, _Action, _UserIndex, False);
}
Void ComponentNavigation_ApplyDefaultFocus(Text _GroupName, Integer _UserIndex, Boolean _IsFromMouse) {
	ComponentNavigation_ApplyDefaultFocus(_GroupName, CMlScriptEvent::EMenuNavAction::Down, _UserIndex, _IsFromMouse);
}
Void ComponentNavigation_ApplyDefaultFocus(Text _GroupName, Integer _UserIndex) {
	ComponentNavigation_ApplyDefaultFocus(_GroupName, _UserIndex, False);
}
Void ComponentNavigation_ApplyDefaultFocuses(CMlScriptEvent::EMenuNavAction _Action, Integer _UserIndex, Boolean _IsFromMouse) {
	foreach (GroupName => Control in ComponentNavigation_G_DefaultFocus) {
		ComponentNavigation_ApplyDefaultFocus(GroupName, _Action, _UserIndex, _IsFromMouse);
	}
}
Void ComponentNavigation_ApplyDefaultFocuses(CMlScriptEvent::EMenuNavAction _Action, Integer _UserIndex) {
	ComponentNavigation_ApplyDefaultFocuses(_Action, _UserIndex, False);
}
Void ComponentNavigation_ApplyDefaultFocuses(Integer _UserIndex) {
	ComponentNavigation_ApplyDefaultFocuses(CMlScriptEvent::EMenuNavAction::Down, _UserIndex);
}

CMlControl ComponentNavigation_Private_GetActivationZoneParent(CMlControl _Control) {
	if (_Control == Null) return _Control;

	declare CMlControl ComponentNavigation_ParentNavigationControl for _Control;
	if (ComponentNavigation_ParentNavigationControl == Null) {
		return _Control;
	}

	return ComponentNavigation_ParentNavigationControl;
}

CMlScriptEvent::EMenuNavAction ComponentNavigation_Private_TextToAction(Text _Text) {
	switch (ComponentNavigation_TL::ToLowerCase(_Text)) {
		case "up": return CMlScriptEvent::EMenuNavAction::Up;
		case "right": return CMlScriptEvent::EMenuNavAction::Right;
		case "left": return CMlScriptEvent::EMenuNavAction::Left;
		case "down": return CMlScriptEvent::EMenuNavAction::Down;
		case "select": return CMlScriptEvent::EMenuNavAction::Select;
		case "cancel": return CMlScriptEvent::EMenuNavAction::Cancel;
		case "pageup": return CMlScriptEvent::EMenuNavAction::PageUp;
		case "pagedown": return CMlScriptEvent::EMenuNavAction::PageDown;
		case "appmenu": return CMlScriptEvent::EMenuNavAction::AppMenu;
		case "action1": return CMlScriptEvent::EMenuNavAction::Action1;
		case "action2": return CMlScriptEvent::EMenuNavAction::Action2;
		case "scrollup": return CMlScriptEvent::EMenuNavAction::ScrollUp;
		case "scrolldown": return CMlScriptEvent::EMenuNavAction::ScrollDown;
	}

	return CMlScriptEvent::EMenuNavAction::Select;
}

/**
 * Get the opposite directionnal input of the given action
 *
 * @param _Action 	The action to invert
 */
CMlScriptEvent::EMenuNavAction ComponentNavigation_InvertInput(CMlScriptEvent::EMenuNavAction _Action) {
	switch (_Action) {
		case CMlScriptEvent::EMenuNavAction::Up: return CMlScriptEvent::EMenuNavAction::Down;
		case CMlScriptEvent::EMenuNavAction::Down: return CMlScriptEvent::EMenuNavAction::Up;
		case CMlScriptEvent::EMenuNavAction::Left: return CMlScriptEvent::EMenuNavAction::Right;
		case CMlScriptEvent::EMenuNavAction::Right: return CMlScriptEvent::EMenuNavAction::Left;
	}

	return _Action;
}

/**
 * Enable or disable all navigation inputs on a given CMlControl
 *
 * @param _Control 	the given CMlControl
 * @param _Enable 	the boolean to enable or disable all navigation inputs
 */
Void ComponentNavigation_EnableInputs(CMlControl _Control, Boolean _Enable) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to get \""^_Control.ControlId^"\" target but it is not a navigation control");

	if (_Enable) {
		ComponentNavigation_NavigationProperties.Actions = ComponentNavigation_NavigationProperties.SavedActions;
	} else {
		ComponentNavigation_NavigationProperties.Actions = [];
	}
}

/**
 * Enable or disable given navigation inputs on a given CMlControl
 * Disabled inputs are inputs not present in the `Actions` array and therefore cannot be executed
 * Both enabled and disabled inputs are saved in the `SavedActions` array
 *
 * @param _Control 	the given CMlControl
 * @param _Actions	the navigation actions list (CMlScriptEvent::EMenuNavAction::Right, etc.)
 * @param _Enable 	the boolean to enable or disable given navigation inputs
 */
Void ComponentNavigation_EnableInputs(CMlControl _Control, CMlScriptEvent::EMenuNavAction[] _Actions, Boolean _Enable) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to get \""^_Control.ControlId^"\" target but it is not a navigation control");

	foreach (Action in _Actions) {
		if (_Enable && ComponentNavigation_NavigationProperties.SavedActions.existskey(Action)) {
			ComponentNavigation_NavigationProperties.Actions[Action] = ComponentNavigation_NavigationProperties.SavedActions[Action];
		} else if (!_Enable && ComponentNavigation_NavigationProperties.Actions.existskey(Action)) {
			ComponentNavigation_NavigationProperties.Actions.removekey(Action);
		}
	}
}

/**
 * Enable or disable given navigation inputs on a given CMlControl
 * Disabled inputs are inputs not present in the `Actions` array and therefore cannot be executed
 * Both enabled and disabled inputs are saved in the `SavedActions` array
 *
 * @param _Control 	the given CMlControl
 * @param _Inputs		the inputs list ("right", "left", etc.)
 * @param _Enable 	the boolean to enable or disable given navigation inputs
 */
Void ComponentNavigation_EnableInputs(CMlControl _Control, Text[] _Inputs, Boolean _Enable) {
	declare CMlScriptEvent::EMenuNavAction[] Actions;
	foreach (Input in _Inputs) {
		Actions.add(ComponentNavigation_Private_TextToAction(Input));
	}
	ComponentNavigation_EnableInputs(_Control, Actions, _Enable);
}

CMlControl ComponentNavigation_GetControlTarget(CMlControl _Control, CMlScriptEvent::EMenuNavAction _Action) {
	if (_Control == Null) return Null;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to get \""^_Control.ControlId^"\" target but it is not a navigation control");

	if (!ComponentNavigation_NavigationProperties.Actions.existskey(_Action)) return Null;

	return ComponentNavigation_NavigationProperties.Actions[_Action];
}
CMlControl ComponentNavigation_GetControlTarget(CMlControl _Control, Text _Action) {
	return ComponentNavigation_GetControlTarget(_Control, ComponentNavigation_Private_TextToAction(_Action));
}
CMlControl[CMlScriptEvent::EMenuNavAction] ComponentNavigation_GetControlTargets(CMlControl _Control) {
	if (_Control == Null) return [];
	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to get \""^_Control.ControlId^"\" target but it is not a navigation control");
	return ComponentNavigation_NavigationProperties.Actions;
}

Void ComponentNavigation_ChangeControlTarget(CMlControl _Container, CMlControl _Control, CMlScriptEvent::EMenuNavAction _Action, Text _TargetControlId) {
	if (_Control == Null) return;

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	assert(ComponentNavigation_NavigationProperties.IsInitialized, "[Navigation] You are trying to change \""^_Control.ControlId^"\" target but it is not a navigation control");

	declare Ident ContainerId = NullId;
	if (_Container != Null) ContainerId = _Container.Id;
	assert(ComponentNavigation_G_NavigationControls.existskey(ContainerId), "[Navigation] The container you provided does not exist");

	// We need to enable all inputs before changing the control's target
	// Disabled inputs are inputs not present in the `Actions` array and therefore cannot be executed
	// Both enabled and disabled inputs are saved in the `SavedActions` array
	// If all inputs are not enabled prior to this operation, disabled inputs will be completly erased
	declare CMlScriptEvent::EMenuNavAction[] DisabledActions;
	if (ComponentNavigation_NavigationProperties.SavedActions.count != ComponentNavigation_NavigationProperties.Actions.count) {
		foreach (NavAction => Control in ComponentNavigation_NavigationProperties.SavedActions) {
			if (!ComponentNavigation_NavigationProperties.Actions.existskey(NavAction)) {
				DisabledActions.add(NavAction);
			}
		}
		ComponentNavigation_EnableInputs(_Control, DisabledActions, True);
	}

	if (ComponentNavigation_G_NavigationControls[ContainerId].existskey(_TargetControlId)) {
		ComponentNavigation_NavigationProperties.Actions[_Action] = ComponentNavigation_G_NavigationControls[ContainerId][_TargetControlId];
	} else if (_TargetControlId == "_" || _TargetControlId == "") {
		ComponentNavigation_NavigationProperties.Actions[_Action] = ComponentNavigation_G_NavigationControls[ContainerId][_Control.ControlId];
	}

	ComponentNavigation_NavigationProperties.SavedActions = ComponentNavigation_NavigationProperties.Actions;
	ComponentNavigation_EnableInputs(_Control, DisabledActions, False); //< Disable inputs that were previously disabled before this operation
}
Void ComponentNavigation_ChangeControlTarget(CMlControl _Container, CMlControl _Control, Text _Action, Text _TargetControlId) {
	ComponentNavigation_ChangeControlTarget(_Container, _Control, ComponentNavigation_Private_TextToAction(_Action), _TargetControlId);
}
Void ComponentNavigation_ChangeControlTarget(CMlControl _Control, Text _Action, Text _TargetControlId) {
	ComponentNavigation_ChangeControlTarget(Null, _Control, _Action, _TargetControlId);
}
Void ComponentNavigation_ChangeControlTargets(CMlControl _Container, CMlControl _Control, Text[] _Actions, Text[] _TargetsControlId) {
	assert(_Actions.count == _TargetsControlId.count, "[Navigation] You must set the same number of actions and targets for control \""^_Control.ControlId^"\"");
	foreach (Index => Action in _Actions) {
		ComponentNavigation_ChangeControlTarget(_Container, _Control, Action, _TargetsControlId[Index]);
	}
}
Void ComponentNavigation_ChangeControlTargets(CMlControl _Control, Text[] _Actions, Text[] _TargetsControlId) {
	ComponentNavigation_ChangeControlTargets(Null, _Control, _Actions, _TargetsControlId);
}
Void ComponentNavigation_ChangeControlTargets(CMlControl _Container, CMlControl _Control, CMlControl[CMlScriptEvent::EMenuNavAction] _Actions) {
	foreach (NavAction => Control in _Actions) {
		ComponentNavigation_ChangeControlTarget(_Container, _Control, NavAction, Control.ControlId);
	}
}

Void ComponentNavigation_Private_InitNavigationControl(Ident _ContainerId, CMlControl _Control) {
	if (_Control == Null) return;

	assert(ComponentNavigation_G_NavigationControls.existskey(_ContainerId), "[Navigation] Invalid container id '"^_ContainerId^"'");

	declare ComponentNavigation_K_NavigationProperties ComponentNavigation_NavigationProperties for _Control;
	declare UseNavigationSettings = _Control.DataAttributeExists("nav");
	declare ComponentNavigation_K_NavigationSettings NavigationSettings;
	declare CMlScriptEvent::EMenuNavAction[] Actions;
	declare CMlControl[] Targets;

	if (UseNavigationSettings) {
		declare NavigationSettingsJson = _Control.DataAttributeGet("nav");
		declare Success = NavigationSettings.fromjson(NavigationSettingsJson);

		foreach (ActionText => TargetControlId in NavigationSettings.InputTargets) {
			Actions.add(ComponentNavigation_Private_TextToAction(ActionText));
			if ((TargetControlId == "" || TargetControlId == "_") && ComponentNavigation_G_NavigationControls[_ContainerId].existskey(_Control.ControlId)) {
				Targets.add(ComponentNavigation_G_NavigationControls[_ContainerId][_Control.ControlId]);
			} else if (ComponentNavigation_G_NavigationControls[_ContainerId].existskey(TargetControlId)) {
				Targets.add(ComponentNavigation_G_NavigationControls[_ContainerId][TargetControlId]);
			} else {
				Targets.add(Null);
			}
		}
	} else {
		if (_Control.DataAttributeExists("nav-inputs")) {
			declare ActionsText = _Control.DataAttributeGet("nav-inputs");
			declare ActionsTextSplit = ComponentNavigation_TL::Split(";", ActionsText);
			foreach (ActionText in ActionsTextSplit) {
				Actions.add(ComponentNavigation_Private_TextToAction(ActionText));
			}
		}

		if (_Control.DataAttributeExists("nav-targets")) {
			declare TargetControlIds = _Control.DataAttributeGet("nav-targets");
			declare TargetControlIdsSplit = ComponentNavigation_TL::Split(";", TargetControlIds);
			foreach (TargetControlId in TargetControlIdsSplit) {
				if (TargetControlId == "_" && ComponentNavigation_G_NavigationControls[_ContainerId].existskey(_Control.ControlId)) {
					Targets.add(ComponentNavigation_G_NavigationControls[_ContainerId][_Control.ControlId]);
				} else if (ComponentNavigation_G_NavigationControls[_ContainerId].existskey(TargetControlId)) {
					Targets.add(ComponentNavigation_G_NavigationControls[_ContainerId][TargetControlId]);
				} else {
					Targets.add(Null);
				}
			}
		}
	}

	assert(Actions.count == Targets.count, "[Navigation] You must set the same number of actions and targets in the data attributes of control \""^_Control.ControlId^"\"");

	ComponentNavigation_NavigationProperties.IsInitialized = True;

	ComponentNavigation_NavigationProperties.Actions = [];
	foreach (Key => Action in Actions) {
		if (Targets.existskey(Key)) {
			ComponentNavigation_NavigationProperties.Actions[Action] = Targets[Key];
		}
	}
	ComponentNavigation_NavigationProperties.SavedActions = ComponentNavigation_NavigationProperties.Actions;

	declare IsDefaultFocus = False;
	if (UseNavigationSettings) {
		IsDefaultFocus = NavigationSettings.Focused;
		ComponentNavigation_NavigationProperties.IsLocked = NavigationSettings.Locked;
	} else {
		if (_Control.DataAttributeExists("nav-selected")) {
			declare SelectedText = _Control.DataAttributeGet("nav-selected");
			if (SelectedText != "" && SelectedText != "0" && ComponentNavigation_TL::ToLowerCase(SelectedText) != "false") {
				IsDefaultFocus = True;
			}
		}
		if (_Control.DataAttributeExists("nav-locked")) {
			declare LockedText = _Control.DataAttributeGet("nav-locked");
			if (LockedText != "" && LockedText != "0" && ComponentNavigation_TL::ToLowerCase(LockedText) != "false") {
				ComponentNavigation_NavigationProperties.IsLocked = True;
			}
		}
	}

	if (_Control is CMlFrame) {
		declare UseZone = False;
		declare Text[] ZoneControlIds;
		if (UseNavigationSettings) {
			ZoneControlIds = [NavigationSettings.Zone];
			UseZone = True;
		} else if (_Control.DataAttributeExists("nav-zone")) {
			ZoneControlIds = ComponentNavigation_TL::Split(" ", ComponentNavigation_TL::Trim(_Control.DataAttributeGet("nav-zone")));
			UseZone = True;
		}
		if (UseZone) {
			Page.GetClassChildren("component-navigation-item-zone", (_Control as CMlFrame), True);
			foreach (ActivationZone in Page.GetClassChildren_Result) {
				if (ZoneControlIds.exists(ActivationZone.ControlId)) {
					declare CMlControl ComponentNavigation_ParentNavigationControl for ActivationZone;
					ComponentNavigation_ParentNavigationControl = _Control;
				}
			}
		}
	}

	ComponentNavigation_NavigationProperties.Group = "";
	if (UseNavigationSettings) {
		ComponentNavigation_NavigationProperties.Group = NavigationSettings.Group;
	} else if (_Control.DataAttributeExists("nav-group")) {
		ComponentNavigation_NavigationProperties.Group = _Control.DataAttributeGet("nav-group");
	}

	if (!ComponentNavigation_G_GroupControls.existskey(ComponentNavigation_NavigationProperties.Group)) {
		ComponentNavigation_G_GroupControls[ComponentNavigation_NavigationProperties.Group] = [];
		ComponentNavigation_G_Focus[ComponentNavigation_NavigationProperties.Group] = Null;
		ComponentNavigation_G_DefaultFocus[ComponentNavigation_NavigationProperties.Group] = _Control;
	}
	ComponentNavigation_G_GroupControls[ComponentNavigation_NavigationProperties.Group].add(_Control);
	if (IsDefaultFocus) {
		ComponentNavigation_G_DefaultFocus[ComponentNavigation_NavigationProperties.Group] = _Control;
	}
}

Void ComponentNavigation_Initialize() {
	ComponentNavigation_G_NavigationControls = [NullId => []];
	ComponentNavigation_G_GroupControls = [];
	ComponentNavigation_G_Focus = [];
	ComponentNavigation_G_DefaultFocus = [];
	ComponentNavigation_G_DisabledGroups = [];
	ComponentNavigation_G_DisabledContainers = [];
	ComponentNavigation_G_NavigationDisabledBy = [];

	ComponentNavigation_UseLocalEvents(False);

	Page.GetClassChildren("component-navigation-item-zone", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlControl ComponentNavigation_ParentNavigationControl for Control;
		ComponentNavigation_ParentNavigationControl = Null;
	}

	// Find containers
	declare CMlControl[] Containers;
	Page.GetClassChildren("component-navigation-container", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlControl TrueControlHandle = Control;
		Containers.add(TrueControlHandle);
		ComponentNavigation_G_NavigationControls[TrueControlHandle.Id] = [];
	}
	foreach (Container in Containers) {
		Page.GetClassChildren("component-navigation-item", Page.MainFrame, True);
		foreach (Control in Page.GetClassChildren_Result) {
			declare Boolean ComponentNavigation_IsInsideContainer for Control;
			ComponentNavigation_IsInsideContainer = True;
		}
	}

	// Find navigation controls
	Page.GetClassChildren("component-navigation-item", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare TrueControlHandle = Control;
		assert(Control.ControlId != "", "[Navigation] A navigation control must have an id");

		// Find container id
		declare Boolean ComponentNavigation_IsInsideContainer for TrueControlHandle = False;
		declare Ident ContainerId = NullId;
		if (ComponentNavigation_IsInsideContainer) {
			ContainerId = ComponentNavigation_Private_FindClosestContainerId(TrueControlHandle);
		}

		assert(!ComponentNavigation_G_NavigationControls[ContainerId].existskey(TrueControlHandle.ControlId), "[Navigation] Two navigation controls cannot share the same id '"^TrueControlHandle.ControlId^"' in the same container '"^ContainerId^"'");
		ComponentNavigation_G_NavigationControls[ContainerId][TrueControlHandle.ControlId] = TrueControlHandle;
	}
	foreach (ContainerId => Controls in ComponentNavigation_G_NavigationControls) {
		foreach (Control in Controls) {
			ComponentNavigation_Private_InitNavigationControl(ContainerId, Control);
		}
	}
}

/**
 * Change the navigation container for a specific set of controls
 *
 * @param _Control 			the controls to apply the container modification
 * @param _ContainerId 	the container id
 *
 */
Void ComponentNavigation_ChangeNavigationContainers(CMlControl[] _Controls, Ident _ContainerId) {
	assert(ComponentNavigation_G_NavigationControls.existskey(_ContainerId), "[Navigation] The container you provided does not exist");

	// Remove the control from it's old container and add it to the new one
	foreach (Control in _Controls) {
		if (Control != Null) {
			declare Ident ClosestContainerId = ComponentNavigation_Private_FindClosestContainerId(Control);
			if (ComponentNavigation_G_NavigationControls.existskey(ClosestContainerId)) {
				ComponentNavigation_G_NavigationControls[ClosestContainerId].removekey(Control.ControlId);
			}
			ComponentNavigation_G_NavigationControls[_ContainerId][Control.ControlId] = Control;
		}
	}

	// Controls must be resetted in order to handle container modification
	// This reset can only be done after changing the container on each control
	foreach (Control in _Controls) {
		ComponentNavigation_Private_InitNavigationControl(_ContainerId, Control);
	}
}

Void ComponentNavigation_UpdateNavigationSettings(CMlControl _Control, Text _NavigationSettings) {
	if (_Control == Null || !_Control.DataAttributeExists("nav")) return;

	_Control.DataAttributeSet("nav", _NavigationSettings);
	ComponentNavigation_Initialize();
}

Boolean ComponentNavigation_MouseIsSleeping() {
	return (ComponentNavigation_G_MouseSleepDelay >= 0 && Input.TimeSinceLatestMouseActivity >= ComponentNavigation_G_MouseSleepDelay);
}

// Use a negative value to disable
Void ComponentNavigation_SetMouseSleepDelay(Integer _Delay) {
	ComponentNavigation_G_MouseSleepDelay = _Delay;
}

Integer ComponentNavigation_GetMouseSleepDelay() {
	return ComponentNavigation_G_MouseSleepDelay;
}
***MainInit***
***
ComponentNavigation_Initialize();
ComponentNavigation_SetMouseSleepDelay(ComponentNavigation_C_MouseSleepDelay);
***

***MainLoop***
***
ComponentNavigation_PendingEvents = [];

if (PageIsVisible && ComponentNavigation_NavigationIsEnabled()) {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseClick: {
				ComponentNavigation_ApplyMouse(ComponentNavigation_Private_GetActivationZoneParent(Event.Control), Event.Type, 0);
			}
			case CMlScriptEvent::Type::MouseRightClick: {
				ComponentNavigation_ApplyMouse(ComponentNavigation_Private_GetActivationZoneParent(Event.Control), Event.Type, 0);
			}
			case CMlScriptEvent::Type::MouseOver: {
				if (!ComponentNavigation_MouseIsSleeping()) {
					ComponentNavigation_ApplyMouse(ComponentNavigation_Private_GetActivationZoneParent(Event.Control), Event.Type, 0);
				}
			}
			case CMlScriptEvent::Type::MouseOut: {
				if (!ComponentNavigation_MouseIsSleeping()) {
					ComponentNavigation_ApplyMouse(ComponentNavigation_Private_GetActivationZoneParent(Event.Control), Event.Type, 0);
				}
			}
			case CMlScriptEvent::Type::MenuNavigation: {
				if (ComponentNavigation_G_UseLocalEvents) {
					foreach (GroupName => Control in ComponentNavigation_G_Focus) {
						// Only the group root can be focused and generate events
						if (!ComponentNavigation_G_GroupParent.existskey(GroupName)) {
							// The mouse scrollwheel creates the same event than the L2:R2/LT:RT buttons on the gamepad
							// We want to be able to distinguish them
							declare Boolean IsFromMouse = (Input != Null && Input.TimeSinceLatestActivity == Input.TimeSinceLatestMouseActivity);
							// If no control in the group was focus, then focus the default one
							if (Control == Null) {
								ComponentNavigation_ApplyDefaultFocus(GroupName, Event.MenuNavAction, 0, IsFromMouse);
							} else {
								// Only apply one input per yield to each control
								declare Integer ComponentNavigation_PreviousInputTime for Control;
								if (ComponentNavigation_PreviousInputTime != Now) {
									ComponentNavigation_PreviousInputTime = Now;
									ComponentNavigation_ApplyInput(Control, Event.MenuNavAction, 0, [Control], IsFromMouse);
								}
							}
						}
					}
				}
			}
		}
	}

	if (!ComponentNavigation_G_UseLocalEvents) {
		foreach (Event in ShareMenuNavigation_PendingEvents) {
			if (ComponentNavigation_IsUserAuthorized(Event.UserIndex)) {
				foreach (GroupName => Control in ComponentNavigation_G_Focus) {
					// Only the group root can be focused and generate events
					if (!ComponentNavigation_G_GroupParent.existskey(GroupName)) {
						// If no control in the group was focus, then focus the default one
						if (Control == Null) {
							ComponentNavigation_ApplyDefaultFocus(GroupName, Event.MenuNavAction, Event.UserIndex, Event.IsFromMouse);
						} else {
							// Only apply one input per yield to each control
							declare Integer ComponentNavigation_PreviousInputTime for Control;
							if (ComponentNavigation_PreviousInputTime != Now) {
								ComponentNavigation_PreviousInputTime = Now;
								ComponentNavigation_ApplyInput(Control, Event.MenuNavAction, Event.UserIndex, [Control], Event.IsFromMouse);
							}
						}
					}
				}
			}
		}
	}
}
***

// */
// @Component end component-navigation

// @Component start router
// /*

declare Router_K_RouterEvent[] Router_PendingEvents;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Lock or unlock an overlay
 *
 *	@param	_OverlayName										The name of the overlay to lock/unlock
 *	@param	_IsLocked												The lock state for the overlay
 */
Void Router_LockOverlay(Text _OverlayName, Boolean _IsLocked) {
	declare Text IsLocked = "0";
	if (_IsLocked) IsLocked = "1";
	SendCustomEvent("Router_OverlayLocked", [_OverlayName, IsLocked]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if an overlay is currently locked
 *
 *	@param	_OverlayName										The name of the overlay to check
 */
Boolean Router_IsOverlayLocked(Text _OverlayName) {
	declare Text[] Router_LockedOverlays for LocalUser;
	return Router_LockedOverlays.exists(_OverlayName);
}

Void Router_Push(Text _URL, Text[Text] _Query, Router_K_URL_Config _Config) {
	declare Text[] Data = [_URL];
	Data.add(_Query.tojson());
	Data.add(_Config.tojson());
	SendCustomEvent("Router_Push", Data);
}
Void Router_Push(Text _URL, Text[Text] _Query, Boolean _KeepPreviousPagesDisplayed, Boolean _HidePreviousPage, Boolean _ShowParent) {
	declare Router_K_URL_Config Config;
	declare Text[] Data = [_URL];
	Config = Router_K_URL_Config {
		SaveHistory = True,
		ResetPreviousPagesDisplayed = True,
		KeepPreviousPagesDisplayed = _KeepPreviousPagesDisplayed,
		HidePreviousPage = _HidePreviousPage,
		ShowParentPage = _ShowParent,
		ExcludeOverlays = []
	};
	Data.add(_Query.tojson());
	Data.add(Config.tojson());
	SendCustomEvent("Router_Push", Data);
}
Void Router_Push(Text _URL, Text[Text] _Query, Boolean _KeepPreviousPagesDisplayed, Boolean _HidePreviousPage) {
	Router_Push(_URL, _Query, _KeepPreviousPagesDisplayed, _HidePreviousPage, False);
}
Void Router_Push(Text _URL, Text[Text] _Query, Boolean _KeepPreviousPagesDisplayed) {
	Router_Push(_URL, _Query, _KeepPreviousPagesDisplayed, False, False);
}
Void Router_Push(Text _URL, Boolean _KeepPreviousPagesDisplayed) {
	Router_Push(_URL, [], _KeepPreviousPagesDisplayed, False, False);
}
Void Router_Push(Text _URL, Text[Text] _Query) {
	Router_Push(_URL, _Query, False, True);
}
Void Router_Push(Text _URL) {
	Router_Push(_URL, [], False, True);
}

Void Router_PushParent(Text _URL, Text[Text] _Query, Router_K_URL_Config _Config) {
	SendCustomEvent("Router_PushParent", [_URL, _Query.tojson(), _Config.tojson()]);
}
Void Router_PushParent(Text _URL, Text[Text] _Query) {
	Router_PushParent(_URL, _Query, Router_K_URL_Config {
		SaveHistory = True,
		ResetPreviousPagesDisplayed = True,
		KeepPreviousPagesDisplayed = False,
		HidePreviousPage = True,
		ShowParentPage = False,
		ExcludeOverlays = []
	});
}
Void Router_PushParent(Text _URL) {
	SendCustomEvent("Router_PushParent", [_URL]);
}
Void Router_PushParent(Text[Text] _Query, Router_K_URL_Config _Config) {
	declare K_Router_Route Router_CurrentRoute for LocalUser;
	Router_PushParent(Router_CurrentRoute.URL.Path, _Query, _Config);
}
Void Router_PushParent(Text[Text] _Query) {
	declare K_Router_Route Router_CurrentRoute for LocalUser;
	Router_PushParent(Router_CurrentRoute.URL.Path, _Query);
}
Void Router_PushParent() {
	declare K_Router_Route Router_CurrentRoute for LocalUser;
	Router_PushParent(Router_CurrentRoute.URL.Path);
}

Void Router_UpdateOverlayData(Text _OverlayName, Text[Text] _Data) {
	declare Text[] Data = [_OverlayName];
	Data.add(_Data.tojson());
	SendCustomEvent("Router_OverlayUpdateData", Data);
}

Void Router_UpdateOverlayParent(Text _OverlayName, Text[Text] _Data) {
	declare Text[] Data = [_OverlayName];
	Data.add(_Data.tojson());
	SendCustomEvent("Router_OverlayUpdateParent", Data);
}

Void Router_SetParentPath(Text _Path, Text _ParentPath) {
	SendCustomEvent("Router_SetParentPath", [_Path, _ParentPath]);
}
Void Router_SetParentURL(Text _Path, K_Router_URL _URL) {
	SendCustomEvent("Router_SetParentURL", [_Path, _URL.tojson()]);
}

Void Router_Go(Integer _Steps) {
	SendCustomEvent("Router_Go", [""^_Steps]);
}

Boolean Router_TransitionIsActive() {
	declare Boolean Router_TransitionIsActive for Page;
	return Router_TransitionIsActive;
}

K_Router_Route Router_GetCurrentRoute() {
	declare K_Router_Route Router_CurrentRoute for LocalUser;
	return Router_CurrentRoute;
}

Text Router_GetCurrentRoutePath() {
	return Router_GetCurrentRoute().URL.Path;
}

Boolean Router_PageIsRunning(Text _Path) {
	declare Text[] Router_CurrentDeactivatedPaths for LocalUser;
	return PageIsVisible && !Router_CurrentDeactivatedPaths.exists(_Path);
}

Boolean Router_PageIsRunning() {
	return Router_PageIsRunning(Router_GetCurrentRoutePath());
}

Text[Text] Router_GetCurrentRouteQuery() {
	return Router_GetCurrentRoute().URL.Query;
}

Text Router_GetCurrentParentPath() {
	declare K_Router_Route Router_CurrentRoute for LocalUser;
	return Router_CurrentRoute.ParentURL.Path;
}

K_Router_Route[] Router_GetHistory() {
	declare K_Router_Route[] Router_History for LocalUser;
	return Router_History;
}
Integer Router_GetHistoryKey() {
	declare Integer Router_HistoryKey for LocalUser;
	return Router_HistoryKey;
}

Boolean Router_IsPreloadDone() {
	declare Boolean Router_IsPreloadDone for LocalUser;
	return Router_IsPreloadDone;
}

***MainLoop***
***
Router_PendingEvents = [];

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CMlScriptEvent::Type::PluginCustomEvent: {
			if (Event.CustomEventType == "Router_AddPendingEvent") {
				if (Event.CustomEventData.count > 0 && Event.CustomEventData.count <= 1) {
					Router_PendingEvents.add(Router_K_RouterEvent {
						Type = Event.CustomEventData[0],
						Data = []
					});
				} else if (Event.CustomEventData.count > 1) {
					declare Text[Text] Data;
					Data.fromjson(Event.CustomEventData[1]);
					Router_PendingEvents.add(Router_K_RouterEvent {
						Type = Event.CustomEventData[0],
						Data = Data
					});
				}
			}
		}
	}
}
***

// */
// @Component end router

// @Component start structures-club
// /*

LibStructuresClub_K_Club LibStructuresClub_GetEmptyClub() {
	return LibStructuresClub_K_Club {
		Id = LibStructuresClub_C_ClubNullId,
		Name = "",
		Tag = "",
		IconUrl = "",
		LogoUrl = "",
		DecalUrl = "",
		BgUrl = "",
		VerticalUrl = "",
		DecoImageUrl_DecalSponsor4x1 = "",
		DecoImageUrl_Screen16x9 = "",
		DecoImageUrl_Screen8x1 = "",
		DecoImageUrl_Screen16x1 = "",
		PrivacyState = LibStructuresClub_C_ClubState_Public,
		PopularityLevel = 0
	};
}

LibStructuresClub_K_Skin LibStructuresClub_GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin, Boolean _IsFavorite, Boolean _IsUsed) {
	return LibStructuresClub_K_Skin {
		Id = _NSSkin.Id,
		Type = _NSSkin.Type,
		Name = _NSSkin.Name,
		DisplayName = _NSSkin.DisplayName,
		CreatorAccountId = _NSSkin.CreatorAccountId,
		CreatorDisplayName = _NSSkin.CreatorDisplayName,
		CreatorIsFirstPartyDisplayName = _NSSkin.CreatorIsFirstPartyDisplayName,
		FileName = _NSSkin.FileName,
		FileUrl = _NSSkin.FileUrl,
		ThumbnailUrl = _NSSkin.ThumbnailUrl,
		TimeStamp = _NSSkin.TimeStamp,
		IsFavorite = _IsFavorite,
		IsUsed = _IsUsed
	};
}
LibStructuresClub_K_Skin LibStructuresClub_GetSkinFromNSSkin(CNadeoServicesSkin _NSSkin) {
	return LibStructuresClub_GetSkinFromNSSkin(_NSSkin, False, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the display name of a club activity
Text LibStructuresClub_GetActivityDisplayName(Text _ActivityType) {
	return LibStructuresClub_C_ClubActivity_DisplayNames.get(_ActivityType, "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty member structure
LibStructuresClub_K_Member LibStructuresClub_GetEmptyMember() {
	return LibStructuresClub_K_Member {
		AccountId = LibStructuresClub_C_AccountNullId,
		Role = LibStructuresClub_C_ClubRoleNone,
		JoinDate = 0
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty activity structure
LibStructuresClub_K_Activity LibStructuresClub_GetEmptyActivity() {
	return LibStructuresClub_K_Activity {
		Id = LibStructuresClub_C_ActivityNullId
	};
}

// */
// @Component end structures-club

// @Component start lib-rbac
// /*

Boolean LibRBAC_HasClubPermission(LibStructuresClub_K_Member _Member, Integer _Permission) {
	return LibRBAC_C_ClubPermissions.get(_Member.Role, []).exists(_Permission);
}

// _UserId come from a CUserV2 (UserMgr.MainUser.Id) not a CUser
Boolean LibRBAC_HasGamePermission(Ident _UserId, Text _Permission, Text _SeasonId) {
	declare Boolean LibRBAC_Debug_UseFakePermissions for System = False;
	if (LibRBAC_Debug_UseFakePermissions) {
		declare Text[] LibRBAC_Debug_FakePermissions for System = [];
		return LibRBAC_Debug_FakePermissions.exists(_Permission);
	}

	return (PrivilegeMgr != Null && (PrivilegeMgr.IsPermissionEnabled(_UserId, _Permission) || (_SeasonId != "" && PrivilegeMgr.IsSeasonPlayable(_UserId, _SeasonId))));
}
Boolean LibRBAC_HasGamePermission(Ident _UserId, Text _Permission) {
	return LibRBAC_HasGamePermission(_UserId, _Permission, "");
}

// _UserId come from a CUserV2 (UserMgr.MainUser.Id) not a CUser
Boolean LibRBAC_HasGamePermissions(Ident _UserId, Text[] _Permissions) {
	declare Boolean LibRBAC_Debug_UseFakePermissions for System = False;
	if (LibRBAC_Debug_UseFakePermissions) {
		declare Text[] LibRBAC_Debug_FakePermissions for System = [];
		return _Permissions.containsonly(LibRBAC_Debug_FakePermissions);
	}

	if (PrivilegeMgr == Null) return False;
	foreach (Permission in _Permissions) {
		if (!PrivilegeMgr.IsPermissionEnabled(_UserId, Permission)) {
			return False;
		}
	}

	return True;
}

// */
// @Component end lib-rbac

// @Component start structures-matchmaking
// /*

LibStructuresMatchmaking_K_Mode LibStructuresMatchmaking_GetMode(Text _ModeName) {
	return LibStructuresMatchmaking_C_Modes.get(_ModeName, LibStructuresMatchmaking_K_Mode {});
}

// */
// @Component end structures-matchmaking

// @Component start lib-common-http-authorization-header
// /*

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the automatic authorization header
Text LibCommonHttpAuthorizationHeader_Get() {
	declare Text LibCommonHttpAuthorizationHeader_OverrideHeader for System;
	if (LibCommonHttpAuthorizationHeader_OverrideHeader != "") {
		return LibCommonHttpAuthorizationHeader_OverrideHeader;
	}

	declare Text Sys_Auth_HttpHeader for System;
	return Sys_Auth_HttpHeader;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Override the automatic authorization header
Void LibCommonHttpAuthorizationHeader_Override(Text _AuthorizationHeader) {
	declare Text LibCommonHttpAuthorizationHeader_OverrideHeader for System;
	LibCommonHttpAuthorizationHeader_OverrideHeader = _AuthorizationHeader;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if an authentication header is set
Boolean LibCommonHttpAuthorizationHeader_IsSet() {
	declare Text Sys_Auth_HttpHeader for System;
	declare Text LibCommonHttpAuthorizationHeader_OverrideHeader for System;
	return (Sys_Auth_HttpHeader != "" || LibCommonHttpAuthorizationHeader_OverrideHeader != "");
}

// */
// @Component end lib-common-http-authorization-header

// @Component start lib-common-http
// /*

/** Enable or disable offline mode
 *	In offline mode, requests not directed
 *	to file:// will not be sent
 */
Void LibCommonHttp_SetOfflineMode(Boolean _Enabled) {
	declare Boolean LibCommonHttp_IsOfflineMode for System = False;
	LibCommonHttp_IsOfflineMode = _Enabled;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the library is in offline mode
Boolean LibCommonHttp_IsOfflineMode() {
	declare Boolean LibCommonHttp_IsOfflineMode for System = False;
	return LibCommonHttp_IsOfflineMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get an empty request (useful to initialize variables)
LibCommonHttp_K_Request LibCommonHttp_GetEmptyRequest() {
	return LibCommonHttp_K_Request {
		RequestId = NullId,
		IsInitialized = False,
		IsProcessing = False,
		IsWaitingSlot = False,
		CooldownEndTime = -1,
		IsSuccess = False,
		IsDestroyed = False,
		RetryTime = -1,
		RetryNb = 0,
		RetryInterval = -1,
		Result = "",
		StatusCode = LibCommonHttp_C_StatusCode_Null,
		Url = "",
		Ressource = "",
		AdditionnalHeaders = [],
		Method = LibCommonHttp_C_Method_Get,
		Metadata = []
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Initialize a new request
LibCommonHttp_K_Request LibCommonHttp_Private_InitRequest(
	Integer _Method,
	Text _Url,
	Text _Ressource,
	Text[Text] _AdditionalHeaders,
	Integer _RetryNb,
	Integer _RetryInterval
) {
	return LibCommonHttp_K_Request {
		RequestId = NullId,
		IsInitialized = True,
		IsProcessing = True,
		IsWaitingSlot = False,
		CooldownEndTime = -1,
		IsSuccess = False,
		IsDestroyed = False,
		RetryTime = -1,
		RetryNb = _RetryNb,
		RetryInterval = _RetryInterval,
		Result = "",
		StatusCode = LibCommonHttp_C_StatusCode_Null,
		Url = _Url,
		Ressource = _Ressource,
		AdditionnalHeaders = _AdditionalHeaders,
		Method = _Method,
		Metadata = []
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Add metadata on a request
LibCommonHttp_K_Request LibCommonHttp_SetMetadata(LibCommonHttp_K_Request _Request, Text[Text] _Metadata) {
	declare LibCommonHttp_K_Request Request = _Request;
	foreach (Key => Value in _Metadata) {
		Request.Metadata[Key] = Value;
	}
	return Request;
}
LibCommonHttp_K_Request LibCommonHttp_SetMetadata(LibCommonHttp_K_Request _Request, Text _Key, Text _Value) {
	declare LibCommonHttp_K_Request Request = _Request;
	Request.Metadata[_Key] = _Value;
	return Request;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Remove all metadata from a request
LibCommonHttp_K_Request LibCommonHttp_ResetMetadata(LibCommonHttp_K_Request _Request) {
	declare LibCommonHttp_K_Request Request = _Request;
	Request.Metadata = [];
	return Request;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get metadata from a request
Text[Text] LibCommonHttp_GetMetadata(LibCommonHttp_K_Request _Request) {
	return _Request.Metadata;
}
Text LibCommonHttp_GetMetadata(LibCommonHttp_K_Request _Request, Text _Key) {
	return _Request.Metadata.get(_Key, "");
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a query string from an array
 *	["key" => "value, "key2" => "value2"]
 *	-> "?key=value&key2=value2"
 *	["key3" => ["valueA", "valueB"], "key4" => ["valueC"]]
 *	-> "?key3[]=valueA&key3[]=valueB&key4[]=valueC"
 *
 *	@param	_Query										The query array to encode
 *
 *	@return														The query string
 */
Text LibCommonHttp_CreateQueryString(Text[Text] _Query, Text[][Text] _QueryArray) {
	declare Text QueryString = "";

	foreach (Key => Value in _Query) {
		if (QueryString == "") QueryString ^= "?";
		else QueryString ^= "&";
		QueryString ^= LibCommonHttp_TL::URLEncode(Key)^"="^LibCommonHttp_TL::URLEncode(Value);
	}
	foreach (Key => Values in _QueryArray) {
		foreach (Value in Values) {
			if (QueryString == "") QueryString ^= "?";
			else QueryString ^= "&";
			QueryString ^= LibCommonHttp_TL::URLEncode(Key)^"[]="^LibCommonHttp_TL::URLEncode(Value);
		}
	}

	return QueryString;
}
Text LibCommonHttp_CreateQueryString(Text[Text] _Query) {
	return LibCommonHttp_CreateQueryString(_Query, []);
}
Text LibCommonHttp_CreateQueryString(Text[][Text] _QueryArray) {
	return LibCommonHttp_CreateQueryString([], _QueryArray);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a query string from an array
 *	_KeyName: "keyname"
 *	_QueryArray: ["key5" => valueA, "key6" => valueB, "key7" => valueC]
 *	-> "?keyname[key5]=valueA&keyname[key6]=valueB&keyname[key7]=valueC"
 */
Text LibCommonHttp_CreateQueryString(Text _ChainQueryString, Text _ArrayName, Integer[Text] _QueryArray) {
	declare Text QueryString = _ChainQueryString;

	foreach (Key => Value in _QueryArray) {
		if (QueryString == "") QueryString = "?";
		else QueryString ^= "&";
		QueryString ^= LibCommonHttp_TL::URLEncode(_ArrayName)^"["^LibCommonHttp_TL::URLEncode(Key)^"]="^Value;
	}

	return QueryString;
}
Text LibCommonHttp_CreateQueryString(Text _ArrayName, Integer[Text] _QueryArray) {
	return LibCommonHttp_CreateQueryString("", _ArrayName, _QueryArray);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create an headers string from an array
 *	["key" => "value", "key2" => "value2"]
 *	-> "key: value\nkey2: value2"
 *
 *	@param	_AppendTo									The new headers will be append to these headers
 *	@param	_Headers									The new headers
 *
 *	@return														The headers string
 */
Text LibCommonHttp_CreateHeadersString(Text _AppendTo, Text[Text] _Headers) {
	declare Text HeadersString = _AppendTo;

	foreach (Key => Value in _Headers) {
		if (HeadersString != "") HeadersString ^= "\n";
		HeadersString ^= Key^": "^Value;
	}

	return HeadersString;
}
Text LibCommonHttp_CreateHeadersString(Text[Text] _Headers) {
	return LibCommonHttp_CreateHeadersString("", _Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Inject the given parameters into the route
 *	_Route => "/path/:Param1/to/:Param2"
 *	_Parameters => ["Param1" => "aaa", "Param2" => "bbb"]
 *	=> "/path/aaa/to/bbb"
 */
Text LibCommonHttp_InjectRouteParameters(Text _Route, Text[Text] _Parameters) {
	declare Text Route = _Route;
	foreach (Key => Value in _Parameters) {
		Route = LibCommonHttp_TL::Replace(Route, ":"^Key, Value);
	}
	return Route;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Check if an http request was a success
 *	from its status code
 *
 *	@param	_StatusCode								Status code of the request
 *
 *	@return														True if the request completed successfully
 *																		False otherwise
 */
Boolean LibCommonHttp_IsHttpSuccess(Integer _StatusCode) {
	return (_StatusCode >= 200 && _StatusCode < 300);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Check if there are already too many requests
 *
 *	@return														True if there are already too many requests created
 */
Boolean LibCommonHttp_IsSaturated() {
	return (Http.SlotsAvailable <= LibCommonHttp_C_MinimumAvailableSlots);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if an url is on cooldown
Integer LibCommonHttp_GetUrlCooldownEndTime(Text _Url) {
	declare Integer[Text] LibCommonHttp_CooldownList for System;
	return LibCommonHttp_CooldownList.get(_Url, -1);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Remove the finished cooldown from the list
Integer[Text] LibCommonHttp_Private_CleanUpCooldownList(Integer[Text] _CooldownList) {
	declare Integer[Text] CooldownList;

	foreach (Url => CooldownEndTime in _CooldownList) {
		if (Now < CooldownEndTime) {
			CooldownList[Url] = CooldownEndTime;
		}
	}

	return CooldownList;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Start a cooldown on an url
Void LibCommonHttp_StartUrlCooldown(Text _Url) {
	declare Integer[Text] LibCommonHttp_CooldownList for System;

	if (LibCommonHttp_CooldownList.count > LibCommonHttp_C_CooldownListSizeMax) {
		LibCommonHttp_CooldownList = LibCommonHttp_Private_CleanUpCooldownList(LibCommonHttp_CooldownList);
	}

	LibCommonHttp_CooldownList[_Url] = Now + LibCommonHttp_C_CooldownDuration;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy the given request
LibCommonHttp_K_Request LibCommonHttp_Destroy(LibCommonHttp_K_Request _Request) {
	declare LibCommonHttp_K_Request Request = _Request;
	if (Request.RequestId != NullId && Http.Requests.existskey(Request.RequestId)) {
		Http.Destroy(Http.Requests[Request.RequestId]);
	}
	Request.RequestId = NullId;
	Request.IsInitialized = False;
	Request.IsProcessing = False;
	Request.IsWaitingSlot = False;
	Request.CooldownEndTime = -1;
	Request.IsDestroyed = True;
	Request.RetryTime = -1;
	return Request;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Create a new request
 *
 *	@param	_Method										The type of request to create: GET, POST, PUT, ...
 *	@param	_Url											Url to request
 *	@param	_Ressource								A ressource to send with a POST or PUT request
 *	@param	_AdditionalHeaders				Headers to add to the request
 *	@param	_RetryNb									The number of time the request will be resend in case of error
 *																		LibCommonHttp_C_AlwaysRetry => infinite, 0 => no retry, n => n tries
 *	@param	_RetryInterval						Time interval between two tries
 *	@param	_IgnoreCooldown						Ignore any ongoing cooldown on the request url
 *
 *	@return														A request structure
 */
LibCommonHttp_K_Request LibCommonHttp_Create(
	Integer _Method,
	Text _Url,
	Text _Ressource,
	Text[Text] _AdditionalHeaders,
	Integer _RetryNb,
	Integer _RetryInterval,
	Boolean _IgnoreCooldown
) {
	declare LibCommonHttp_K_Request Request = LibCommonHttp_Private_InitRequest(_Method, _Url, _Ressource, _AdditionalHeaders, _RetryNb, _RetryInterval);

	if (LibCommonHttp_IsSaturated()) {
		Request.IsWaitingSlot = True;
	} else if (!_IgnoreCooldown && LibCommonHttp_GetUrlCooldownEndTime(_Url) > Now) {
		// The way the cooldown works might be a bit counter intuitive at first.
		// Creating 10 requests in parallel to the same url will not create the
		// 10 requests one after another with a 1 second interval. The first one
		// will be sent immediatly and the 9 others at the same time 1 second later.
		// Parallels requests are already limited by the `IsSaturated()` check above.
		// Here the cooldown is based on the fact that a lot of time the user can spam
		// a request by keeping on pressing a button. Without the cooldown the http request
		// would be destroyed and re-created every frame, spamming the API.
		// The cooldown here prevent the re-creation of the http request to the same url
		// before 1 second.
		Request.CooldownEndTime = LibCommonHttp_GetUrlCooldownEndTime(_Url);
	} else {
		declare CHttpRequest HttpRequest;
		if (_Method == LibCommonHttp_C_Method_CacheHit) {
			Request.IsSuccess = True;
		} else if (!LibCommonHttp_IsOfflineMode() || LibCommonHttp_TL::StartsWith("file://", _Url)) {
			declare Text DefaultHeaders;
			if (!_AdditionalHeaders.existskey("Authorization")) {
				DefaultHeaders = LibCommonHttpAuthorizationHeader_Get();
			}
			declare Text Headers = LibCommonHttp_CreateHeadersString(DefaultHeaders, _AdditionalHeaders);
			switch (_Method) {
				case LibCommonHttp_C_Method_Get: HttpRequest = Http.CreateGet(_Url, False, Headers);
				case LibCommonHttp_C_Method_Post: HttpRequest = Http.CreatePost(_Url, _Ressource, Headers);
				case LibCommonHttp_C_Method_PostFile: HttpRequest = Http.CreatePostFile(_Url, _Ressource, Headers);
				//case LibCommonHttp_C_Method_Put: HttpRequest = Http.CreatePut(_Url, _Ressource, Headers);
			}
		}
		if (HttpRequest != Null) {
			Request.RequestId = HttpRequest.Id;
			LibCommonHttp_StartUrlCooldown(_Url);
		} else {
			Request.IsProcessing = False;
		}
	}

	return Request;
}
LibCommonHttp_K_Request LibCommonHttp_Create(Integer _Method, Text _Url, Text _Ressource, Text[Text] _AdditionalHeaders, Integer _RetryNb, Integer _RetryInterval) {
	return LibCommonHttp_Create(_Method, _Url, _Ressource, _AdditionalHeaders, _RetryNb, _RetryInterval, False);
}
LibCommonHttp_K_Request LibCommonHttp_CreatePost(Text _Url, Text _Ressource, Text[Text] _AdditionalHeaders, Integer _RetryNb, Integer _RetryInterval) {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_Post, _Url, _Ressource, _AdditionalHeaders, _RetryNb, _RetryInterval);
}
LibCommonHttp_K_Request LibCommonHttp_CreatePostFile(Text _Url, Text _Ressource, Text[Text] _AdditionalHeaders, Integer _RetryNb, Integer _RetryInterval) {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_PostFile, _Url, _Ressource, _AdditionalHeaders, _RetryNb, _RetryInterval);
}
LibCommonHttp_K_Request LibCommonHttp_CreateGet(Text _Url, Text[Text] _AdditionalHeaders, Integer _RetryNb, Integer _RetryInterval) {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_Get, _Url, "", _AdditionalHeaders, _RetryNb, _RetryInterval);
}
LibCommonHttp_K_Request LibCommonHttp_Create(Integer _Method, Text _Url, Text _Ressource, Text[Text] _AdditionalHeaders) {
	return LibCommonHttp_Create(_Method, _Url, _Ressource, _AdditionalHeaders, LibCommonHttp_C_NeverRetry, -1);
}
LibCommonHttp_K_Request LibCommonHttp_CreatePost(Text _Url, Text _Ressource, Text[Text] _AdditionalHeaders) {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_Post, _Url, _Ressource, _AdditionalHeaders);
}
LibCommonHttp_K_Request LibCommonHttp_CreatePostFile(Text _Url, Text _Ressource, Text[Text] _AdditionalHeaders) {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_PostFile, _Url, _Ressource, _AdditionalHeaders);
}
LibCommonHttp_K_Request LibCommonHttp_CreateGet(Text _Url, Text[Text] _AdditionalHeaders) {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_Get, _Url, "", _AdditionalHeaders);
}
LibCommonHttp_K_Request LibCommonHttp_CreateCacheHit(Text _Url, Text[Text] _AdditionalHeaders) {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_CacheHit, _Url, "", _AdditionalHeaders);
}
LibCommonHttp_K_Request LibCommonHttp_CreateCacheHit() {
	return LibCommonHttp_Create(LibCommonHttp_C_Method_CacheHit, "", "", []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy and recreate a request
LibCommonHttp_K_Request LibCommonHttp_Retry(LibCommonHttp_K_Request _OldRequest) {
	declare Boolean IgnoreCooldown = _OldRequest.CooldownEndTime >= 0; //< Do this before destroying the request
	LibCommonHttp_Destroy(_OldRequest);
	declare LibCommonHttp_K_Request NewRequest = LibCommonHttp_Create(_OldRequest.Method, _OldRequest.Url, _OldRequest.Ressource, _OldRequest.AdditionnalHeaders, _OldRequest.RetryNb, _OldRequest.RetryInterval, IgnoreCooldown);
	// Transfer the metadata from the old to the new request
	if (_OldRequest.Metadata.count > 0) {
		NewRequest = LibCommonHttp_SetMetadata(NewRequest, _OldRequest.Metadata);
	}
	return NewRequest;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Retry a request with a delay
LibCommonHttp_K_Request LibCommonHttp_RetryWithDelay(LibCommonHttp_K_Request _Request, Integer _RetryTime) {
	declare LibCommonHttp_K_Request Request = LibCommonHttp_Retry(_Request);
	Request.IsProcessing = _RetryTime < 0;
	Request.RetryTime = _RetryTime;
	return Request;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Setup a retry for the given request
LibCommonHttp_K_Request LibCommonHttp_Private_RetrySetup(LibCommonHttp_K_Request _Request) {
	if (_Request.RetryNb == 0) return _Request;

	declare LibCommonHttp_K_Request Request = _Request;
	if (Request.RetryNb > 0) {
		Request.RetryNb -= 1;
	} else if (Request.RetryNb < 0) {
		Request.RetryNb = LibCommonHttp_C_AlwaysRetry;
	}

	if (Request.RetryInterval >= 0) {
		Request.RetryTime = Now + Request.RetryInterval + LibCommonHttp_ML::Rand(0, LibCommonHttp_C_RetryRandomVariation);
	} else {
		Request.RetryTime = Now;
	}

	return Request;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Update on ongoing request
LibCommonHttp_K_Request LibCommonHttp_Private_Update(LibCommonHttp_K_Request _Request) {
	if (_Request.IsInitialized && _Request.IsProcessing && (_Request.IsWaitingSlot || _Request.CooldownEndTime >= 0)) {
		if (
			(_Request.IsWaitingSlot && !LibCommonHttp_IsSaturated()) ||
			(_Request.CooldownEndTime >= 0 && Now >= _Request.CooldownEndTime)
		) {
			return LibCommonHttp_Retry(_Request);
		}
	} else if (Http.Requests.existskey(_Request.RequestId)) {
		declare CHttpRequest HttpRequest = Http.Requests[_Request.RequestId];
		if (HttpRequest.IsCompleted) {
			declare LibCommonHttp_K_Request Request = _Request;
			Request.IsProcessing = False;
			Request.IsSuccess = LibCommonHttp_IsHttpSuccess(HttpRequest.StatusCode);
			if (!Request.IsSuccess) {
				Request = LibCommonHttp_Private_RetrySetup(Request);
			}
			Request.Result = HttpRequest.Result;
			Request.StatusCode = HttpRequest.StatusCode;
			return Request;
		}
	} else {
		declare LibCommonHttp_K_Request Request = _Request;
		Request.IsProcessing = False;
		Request.IsSuccess = False;
		Request = LibCommonHttp_Private_RetrySetup(Request);
		return Request;
	}
	return _Request;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check the request is a cache hit
Boolean LibCommonHttp_IsCacheHit(LibCommonHttp_K_Request _Request) {
	return _Request.Method == LibCommonHttp_C_Method_CacheHit;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if we must wait for a retry
Boolean LibCommonHttp_IsWaitingRetry(LibCommonHttp_K_Request _Request) {
	return _Request.RetryTime >= 0;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// The request has been initialized
Boolean LibCommonHttp_IsInitialized(LibCommonHttp_K_Request _Request) {
	return _Request.IsInitialized;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// We are waiting a response to the request
Boolean LibCommonHttp_IsProcessing(LibCommonHttp_K_Request _Request) {
	return _Request.IsProcessing;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// We are waiting a slot to start the request
Boolean LibCommonHttp_IsWaitingSlot(LibCommonHttp_K_Request _Request) {
	return _Request.IsWaitingSlot;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if the request completed successfully
Boolean LibCommonHttp_IsSuccess(LibCommonHttp_K_Request _Request) {
	return _Request.IsSuccess;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** The request is ongoing
 *	Either because we are waiting for
 *	an answer or a retry
 */
Boolean LibCommonHttp_IsRunning(LibCommonHttp_K_Request _Request) {
	return (!_Request.IsDestroyed && (_Request.IsProcessing || _Request.RetryTime >= 0));
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Fully automated request management
LibCommonHttp_K_Request LibCommonHttp_Update(LibCommonHttp_K_Request _Request) {
	if (_Request.IsDestroyed) {
		return _Request;
	} else if (_Request.IsProcessing) {
		return LibCommonHttp_Private_Update(_Request);
	} else if (_Request.RetryTime >= 0) {
		if (Now >= _Request.RetryTime) {
			return LibCommonHttp_Retry(_Request);
		}
	} else {
		return LibCommonHttp_Destroy(_Request);
	}

	return _Request;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the result from the request
Text LibCommonHttp_GetResult(LibCommonHttp_K_Request _Request) {
	return _Request.Result;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the status code from the request
Integer LibCommonHttp_GetStatusCode(LibCommonHttp_K_Request _Request) {
	return _Request.StatusCode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the error details returned by the Nadeo Live Services API
LibCommonHttp_K_NLSError LibCommonHttp_GetNLSError(LibCommonHttp_K_Request _Request) {
	declare LibCommonHttp_K_HttpNLSError HttpNLSError;
	HttpNLSError.fromjson(_Request.Result);
	return LibCommonHttp_K_NLSError {
		Error = HttpNLSError.error,
		Message = HttpNLSError.message,
		TraceId = HttpNLSError.traceId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Destroy a previous request and create a new one in its place
LibCommonHttp_K_Request LibCommonHttp_DestroyAndCreate(LibCommonHttp_K_Request _OldRequest, LibCommonHttp_K_Request _NewRequest) {
	if (LibCommonHttp_IsInitialized(_OldRequest)) LibCommonHttp_Destroy(_OldRequest);
	return _NewRequest;
}

// */
// @Component end lib-common-http

// @Component start lib-http-struct
// /*


// */
// @Component end lib-http-struct

// @Component start lib-tmnext-config
// /*

LibTMNextConfig_K_Config LibTMNextConfig_Get() {
	declare LibTMNextConfig_K_Config LibTMNextConfig_Config for System = LibTMNextConfig_C_DefaultConfig;
	return LibTMNextConfig_Config;
}

Boolean LibTMNextConfig_HasFeature(Text _Feature) {
	declare LibTMNextConfig_K_Config LibTMNextConfig_Config for System = LibTMNextConfig_C_DefaultConfig;
	return LibTMNextConfig_Config.Features.exists(_Feature);
}

// */
// @Component end lib-tmnext-config

// @Component start lib-common-http-club-authorization-header
// /*

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get the automatic authorization header
Text LibCommonHttpClubAuthorizationHeader_Get() {
	declare Text LibCommonHttpClubAuthorizationHeader_OverrideHeader for System;
	if (LibCommonHttpClubAuthorizationHeader_OverrideHeader != "") {
	return LibCommonHttpClubAuthorizationHeader_OverrideHeader;
}

declare Text Sys_Auth_ClubHttpHeader for System;
	return Sys_Auth_ClubHttpHeader;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Override the automatic authorization header
	Void LibCommonHttpClubAuthorizationHeader_Override(Text _AuthorizationHeader) {
	declare Text LibCommonHttpClubAuthorizationHeader_OverrideHeader for System;
	LibCommonHttpClubAuthorizationHeader_OverrideHeader = _AuthorizationHeader;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Check if an authentication header is set
	Boolean LibCommonHttpClubAuthorizationHeader_IsSet() {
	declare Text Sys_Auth_ClubHttpHeader for System;
	declare Text LibCommonHttpClubAuthorizationHeader_OverrideHeader for System;
	return (Sys_Auth_ClubHttpHeader != "" || LibCommonHttpClubAuthorizationHeader_OverrideHeader != "");
}

// */
// @Component end lib-common-http-club-authorization-header

// @Component start component-matchmaking-api
// /*

Text[Text] ComponentMatchmakingAPI_GetHeadersWithClubAuth() {
	declare Text[Text] Headers = ComponentMatchmakingAPI_C_Headers;
	declare Text AuthorizationHeaders = LibCommonHttpClubAuthorizationHeader_Get();
	declare Text KeyAutho = ComponentMatchmakingAPI_TL::SubString(AuthorizationHeaders, 0, 13);
	declare Text ValueAutho = ComponentMatchmakingAPI_TL::SubString(AuthorizationHeaders, 15, ComponentMatchmakingAPI_TL::Length(AuthorizationHeaders));
	Headers[KeyAutho] = ValueAutho;
	return Headers;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to post a Matchmaking Heartbeat
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_PostMatchmakingHeartbeat(Integer _MatchmakingId, Text[] _SquadMembersIds, Text _Code) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_PostMatchmakingHeartbeat,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	declare ComponentMatchmakingAPI_K_HttpHeartbeatBody HeartBeatBody = ComponentMatchmakingAPI_K_HttpHeartbeatBody {
		playWith = _SquadMembersIds,
		code = _Code
	};
	return LibCommonHttp_CreatePost(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route, HeartBeatBody.tojson(), ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_Heartbeat HeartbeatApiToScript(ComponentMatchmakingAPI_K_HttpHeartbeat _HeartbeatResponse) {
	return LibStructuresMatchmaking_K_Heartbeat {
		Status = _HeartbeatResponse.status,
		CreationDate = _HeartbeatResponse.creationDate,
		MatchmakingWaitingTime = _HeartbeatResponse.matchmakingWaitingTime,
		MatchLiveId = _HeartbeatResponse.matchLiveId,
		BanEndDate = _HeartbeatResponse.banEndDate
	};
}

LibStructuresMatchmaking_K_Heartbeat ComponentMatchmakingAPI_GetResponseFromPostMatchmakingHeartbeat(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpHeartbeat HeartbeatResponse;
	HeartbeatResponse.fromjson(LibCommonHttp_GetResult(_Request));

	return HeartbeatApiToScript(HeartbeatResponse);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the player status
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetMatchmakingPlayerStatus(Integer _MatchmakingId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetMatchmakingPlayerStatus,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_PlayerStatus ComponentMatchmakingAPI_GetResponseFromGetMatchmakingPlayerStatus(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpPlayerStatus PlayerStatusResponse;
	PlayerStatusResponse.fromjson(LibCommonHttp_GetResult(_Request));

	return LibStructuresMatchmaking_K_PlayerStatus {
		CurrentHeartbeat = HeartbeatApiToScript(PlayerStatusResponse.currentHeartbeat),
		Penalty = LibStructuresMatchmaking_K_Penalty {
			CreationDate = PlayerStatusResponse.penalty.creationDate,
			Points = PlayerStatusResponse.penalty.points
		},
		CurrentDivision = PlayerStatusResponse.currentDivision,
		CurrentProgression = PlayerStatusResponse.currentProgression,
		MatchmakingStatus = PlayerStatusResponse.matchmakingStatus
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the matchmaking division rules
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetMatchmakingDivisionRules(Integer _MatchmakingId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetMatchmakingDivisionRules,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_Division[Text] ComponentMatchmakingAPI_GetResponseFromGetMatchmakingDivisionRules(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpDisplayDivisionRules DisplayDivisionRulesResponse;
	DisplayDivisionRulesResponse.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibStructuresMatchmaking_K_Division[Text] Divisions;

	foreach (division in DisplayDivisionRulesResponse.divisions) {
		Divisions[division.id] = LibStructuresMatchmaking_K_Division {
			Id = division.id,
			Position = division.position,
			RuleType = division.displayRuleType,
			MinimumPoints = division.displayRuleMinimumPoints,
			MaximumPoints = division.displayRuleMaximumPoints,
			MinimumRank = division.displayRuleMinimumRank
		};
	}

	return Divisions;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the local player leaderboard
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetMyMatchmakingLeaderboard(Integer _MatchmakingId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetLeaderboard,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);

	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route^ComponentMatchmakingAPI_C_Route_Me, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_PlayerRank ComponentMatchmakingAPI_GetResponseFromGetMyMatchmakingLeaderboard(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpPlayerRanking LeaderboardResponse;
	LeaderboardResponse.fromjson(LibCommonHttp_GetResult(_Request));

	declare Leaderboard = LibStructuresMatchmaking_K_PlayerRank {
		MatchmakingId = LeaderboardResponse.matchmakingId,
		AccountId = LeaderboardResponse.player,
		Score = LeaderboardResponse.score
	};

	return Leaderboard;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the local player leaderboard
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetMatchmakingLeaderboard(Integer _MatchmakingId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetLeaderboard,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);

	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_PlayerLeaderboard[] ComponentMatchmakingAPI_GetResponseFromGetMatchmakingLeaderboard(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpLeaderboard LeaderboardResponse;
	LeaderboardResponse.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibStructuresMatchmaking_K_PlayerLeaderboard[] Leaderboard = [];
	foreach (Result in LeaderboardResponse.results) {
		Leaderboard.add(LibStructuresMatchmaking_K_PlayerLeaderboard {
			AccountId = Result.player,
			Rank = Result.rank,
			Score = Result.score
		});
	}

	return Leaderboard;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to post "accept match". NB no response body.
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_PostMatchmakingAccept(Integer _MatchmakingId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_PostMatchmakingAccept,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return LibCommonHttp_CreatePost(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route, "", ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to post "cancel match". NB no response body.
	*
	* @param _MatchmakingId				The id of matchmaking queue
	*
	* @return 													The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_PostMatchmakingCancel(Integer _MatchmakingId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_PostMatchmakingCancel,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);
	return LibCommonHttp_CreatePost(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route, "", ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a match by match Lid
	*
	* @param _MatchId				The Lid of match
	*
	* @return 													The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetMatchByLid(Text _MatchLid) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetMatchByLid,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchLid => _MatchLid]
	);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIBordeauxClubUrl^ComponentMatchmakingAPI_C_API_Matches^Route, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Match by Lid response
	*
	* @param _Request				The request
	*
	* @return 							The match join link
*/
Text ComponentMatchmakingAPI_GetResponseFromGetMatchByLid(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpMatch MatchResponse;
	MatchResponse.fromjson(LibCommonHttp_GetResult(_Request));
	return MatchResponse.joinLink;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the players progressions
	*
	* @param _MatchmakingId				The id of matchmaking queue
	* @param _AccountIds					The array of the players accountIds
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetMatchmakingPlayersProgressions(Integer _MatchmakingId, Text[] _AccountIds) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetPlayersProgression,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId]
	);

	declare QueryString =LibCommonHttp_CreateQueryString([
		ComponentMatchmakingAPI_C_QueryParameter_Players => _AccountIds
	]);

	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route^QueryString, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_PlayerProgression[Text] ComponentMatchmakingAPI_GetResponseFromGetMatchmakingPlayersProgressions(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpProgressions ProgressionsResponse;
	ProgressionsResponse.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibStructuresMatchmaking_K_PlayerProgression[Text] Progressions;
	foreach (Progression in ProgressionsResponse.progressions) {
		Progressions[Progression.player] = LibStructuresMatchmaking_K_PlayerProgression {
			AccountId = Progression.player,
			CurrentDivision = Progression.division,
			CurrentProgression = Progression.progression
		};
	}

	return Progressions;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to generate a Party Code
	*
	* @return 											The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GeneratePartyCode() {
	return LibCommonHttp_CreatePost(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Code, "", ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to check if a party code is correct (meaning available in CLUB database)
	*
	* @param _Code								The code to check
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_CheckPartyCode(Text _Code) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetCode,
		[ComponentMatchmakingAPI_C_RouteParameter_Code => _Code]
	);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Code^Route, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

Text ComponentMatchmakingAPI_GetResponseFromPartyCode(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpCode CodeResponse;
	CodeResponse.fromjson(LibCommonHttp_GetResult(_Request));
	declare Text Code = CodeResponse.code;
	return Code;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to have the SuperRoyal infos
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetCurrentSuperRoyal() {
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APICompetitionUrl^ComponentMatchmakingAPI_C_API_SuperRoyal^ComponentMatchmakingAPI_C_Route_Current, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_SuperRoyal ComponentMatchmakingAPI_GetResponseFromCurrentSuperRoyal(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpSuperRoyal SuperRoyalResponse;
	SuperRoyalResponse.fromjson(LibCommonHttp_GetResult(_Request));

	return LibStructuresMatchmaking_K_SuperRoyal {
		StartsIn = SuperRoyalResponse.startsIn,
		Status = SuperRoyalResponse.status,
		MatchLiveId = SuperRoyalResponse.matchLiveId
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to have the SuperRoyal infos of my player
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetMySuperRoyalStats() {
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APICompetitionUrl^ComponentMatchmakingAPI_C_API_SuperRoyal^ComponentMatchmakingAPI_C_Route_Stats, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to have the SuperRoyal infos of a specific player
	*
	* @param _AccountId						The id of the player
	*
	* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetSuperRoyalStats(Text _AccountId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_SuperRoyal_Stats_Player,
		[ComponentMatchmakingAPI_C_RouteParameter_PlayerId => ""^_AccountId]
	);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APICompetitionUrl^Route, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_SuperRoyalStatistics ComponentMatchmakingAPI_GetResponseFromSuperRoyalStats(LibCommonHttp_K_Request _Request) {
	declare ComponentMatchmakingAPI_K_HttpSuperRoyalStatistics SuperRoyalStatsResponse;
	SuperRoyalStatsResponse.fromjson(LibCommonHttp_GetResult(_Request));

	return LibStructuresMatchmaking_K_SuperRoyalStatistics {
		BronzeVictories = SuperRoyalStatsResponse.bronzeWon,
		SilverVictories = SuperRoyalStatsResponse.silverWon,
		GoldVictories = SuperRoyalStatsResponse.goldWon,
		MasterVictories = SuperRoyalStatsResponse.masterWon
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the player statistics in a specific matchmaking and player
*
* @param _MatchmakingId				The id of matchmaking queue
* @param _AccountId						The id of the player
*
* @return 										The request
*/
LibCommonHttp_K_Request ComponentMatchmakingAPI_GetPlayerMatchmakingStatistics(Integer _MatchmakingId, Text _AccountId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		ComponentMatchmakingAPI_C_Route_GetStats^ComponentMatchmakingAPI_C_Route_PlayerId,
		[ComponentMatchmakingAPI_C_RouteParameter_MatchmakingId => ""^_MatchmakingId, ComponentMatchmakingAPI_C_RouteParameter_PlayerId => ""^_AccountId]
	);

	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIMatchmakingUrl^ComponentMatchmakingAPI_C_API_Matchmaking^Route, ComponentMatchmakingAPI_GetHeadersWithClubAuth());
}

LibStructuresMatchmaking_K_PlayerStatistics ComponentMatchmakingAPI_GetResponseFromGetPlayerMatchmakingStatistics(LibCommonHttp_K_Request _Request) {

	declare ComponentMatchmakingAPI_K_HttpPlayerStatistics PlayerStatisticsResponse;
	PlayerStatisticsResponse.fromjson(LibCommonHttp_GetResult(_Request));

	return LibStructuresMatchmaking_K_PlayerStatistics {
		MatchmakingId = PlayerStatisticsResponse.matchmakingId,
		AccountId = PlayerStatisticsResponse.player,
		CurrentDivision = PlayerStatisticsResponse.currentDivision,
		CurrentProgression = PlayerStatisticsResponse.currentProgression,
		BestDivision = PlayerStatisticsResponse.bestDivision,
		BestProgression = PlayerStatisticsResponse.bestProgression,
		BestProgressionDate = PlayerStatisticsResponse.bestProgressionDate,
		PreviousDivision = PlayerStatisticsResponse.previousDivision,
		PreviousProgression = PlayerStatisticsResponse.previousProgression,
		PreviousProgressionDate = PlayerStatisticsResponse.previousProgressionDate,
		MVPCount = PlayerStatisticsResponse.mvpCount,
		Victories = PlayerStatisticsResponse.victories,
		PlayedMatches = PlayerStatisticsResponse.playedMatches
	};
}

// */
// @Component end component-matchmaking-api

// @Component start lib-campaign-struct
// /*

LibCampaignStruct_K_Campaign LibCampaignStruct_GetCampaignFromHttpCampaign(LibHttpStruct_K_HttpCampaign _HttpCampaign) {
	declare Integer MapCount = 0;
	declare LibCampaignStruct_K_Category[] Categories;
	foreach (HttpCategory in _HttpCampaign.categories) {
		declare LibCampaignStruct_K_Map[] Playlist;
		for (HttpMapIndex, HttpCategory.position*5, (HttpCategory.position*5+HttpCategory.length*5)-1) {
			declare Text MapUid = "";
			if (_HttpCampaign.playlist.existskey(HttpMapIndex)) {
				MapUid = _HttpCampaign.playlist[HttpMapIndex].mapUid;
				if (MapUid != "") MapCount += 1;
			}
			Playlist.add(
				LibCampaignStruct_K_Map {
					Position = HttpMapIndex,
					Uid = MapUid
				}
			);
		}

		Categories.add(LibCampaignStruct_K_Category {
			Name = HttpCategory.name,
			Playlist = Playlist
		});
	}

	declare Boolean IsSeasonLive = False;
	declare LibCampaignStruct_K_Season[] Seasons;
	foreach (latestSeason in _HttpCampaign.latestSeasons) {
		Seasons.add(LibCampaignStruct_K_Season {
			Uid = latestSeason.uid,
			Name = latestSeason.name,
			StartTimestamp = latestSeason.startTimestamp,
			StartDate = latestSeason.startDate,
			EndTimestamp = latestSeason.endTimestamp,
			EndDate = latestSeason.endDate,
			RelativeStart = latestSeason.relativeStart,
			RelativeEnd = latestSeason.relativeEnd,
			RelativeNow = Now,
			CampaignId = latestSeason.campaignId,
			Active = latestSeason.active
		});
		if (!IsSeasonLive && latestSeason.active) {
			IsSeasonLive = True;
		}
	}

	return LibCampaignStruct_K_Campaign {
		Id = _HttpCampaign.id,
		SeasonId = _HttpCampaign.seasonUid,
		Type = _HttpCampaign.useCase,
		Name = _HttpCampaign.name,
		Color = _HttpCampaign.color,
		LeaderboardGroupUid = _HttpCampaign.leaderboardGroupUid,
		Club = LibStructuresClub_K_Club {
			Id = _HttpCampaign.clubId
		},
		Published = _HttpCampaign.published,
		IsSeasonLive = IsSeasonLive,
		IsLoaded = False,
		IsFetched = False,
		FailedToGetMapUrl = False,
		MapCount = MapCount,
		Categories = Categories,
		CampaignRanking = LibCampaignStruct_K_CampaignRanking {},
		TopRankings = [],
		ClubTopRankings = [],
		Media = LibCampaignStruct_K_Media {
			ButtonBackgroundUrl = _HttpCampaign.media.buttonBackgroundUrl,
			ButtonForegroundUrl = _HttpCampaign.media.buttonForegroundUrl,
			DecalUrl = _HttpCampaign.media.decalUrl,
			PopUpBackgroundUrl = _HttpCampaign.media.popUpBackgroundUrl,
			PopUpImageUrl = _HttpCampaign.media.popUpImageUrl,
			LiveButtonBackgroundUrl = _HttpCampaign.media.liveButtonBackgroundUrl,
			LiveButtonForegroundUrl = _HttpCampaign.media.liveButtonForegroundUrl
		},
		Seasons = Seasons,
		EditionTimestamp = _HttpCampaign.editionTimestamp
	};
}

LibCampaignStruct_K_Map LibCampaignStruct_GetMapFromNSMap(LibCampaignStruct_K_Map _OldMap, CNadeoServicesMap _NSMap) {
	declare LibCampaignStruct_K_Map NewMap = _OldMap;
	NewMap.Position = _OldMap.Position;
	NewMap.Uid = _NSMap.Uid;
	NewMap.Name = _NSMap.Name;
	NewMap.Type = _NSMap.Type;
	NewMap.Style = _NSMap.Style;
	NewMap.AuthorLogin = _NSMap.AuthorAccountId;
	NewMap.AuthorDisplayName = _NSMap.AuthorDisplayName;
	NewMap.AuthorIsFirstPartyDisplayName = _NSMap.AuthorIsFirstPartyDisplayName;
	NewMap.SubmitterAccountId = _NSMap.SubmitterAccountId;
	NewMap.AuthorTime = _NSMap.AuthorScore;
	NewMap.GoldTime = _NSMap.GoldScore;
	NewMap.SilverTime = _NSMap.SilverScore;
	NewMap.BronzeTime = _NSMap.BronzeScore;
	NewMap.DownloadUrl = _NSMap.FileUrl;
	NewMap.ThumbnailUrl = _NSMap.ThumbnailUrl;
	NewMap.UploadTimestamp = _NSMap.TimeStamp;
	NewMap.IsPlayable = _NSMap.IsPlayable;
	NewMap.CollectionName = _NSMap.CollectionName;

	return NewMap;
}

LibCampaignStruct_K_Map LibCampaignStruct_GetMapFromMapInfo(CMapInfo _MapInfo) {
	return LibCampaignStruct_K_Map {
		Uid = _MapInfo.MapUid,
		Name = _MapInfo.Name,
		LocalFileName = _MapInfo.FileName,
		Type = _MapInfo.MapType,
		Style = _MapInfo.MapStyle,
		AuthorLogin = _MapInfo.AuthorLogin,
		AuthorDisplayName = _MapInfo.AuthorNickName,
		AuthorTime = _MapInfo.TMObjective_AuthorTime,
		GoldTime = _MapInfo.TMObjective_GoldTime,
		SilverTime = _MapInfo.TMObjective_SilverTime,
		BronzeTime = _MapInfo.TMObjective_BronzeTime,
		ThumbnailUrl = "file://Thumbnails/MapUid/"^_MapInfo.MapUid,
		IsPlayable = _MapInfo.IsPlayable,
		CollectionName = _MapInfo.CollectionName,
		CreatedWithSimpleEditor = _MapInfo.CreatedWithSimpleEditor,
		CreatedWithGamepadEditor = _MapInfo.CreatedWithGamepadEditor
	};
}

LibCampaignStruct_K_Campaign LibCampaignStruct_GetEmptyCampaign() {
	return LibCampaignStruct_K_Campaign {
		Id = LibCampaignStruct_C_Campaign_NullId
	};
}

LibCampaignStruct_K_MonthlyCampaign LibCampaignStruct_GetEmptyMonthlyCampaign() {
	return LibCampaignStruct_K_MonthlyCampaign {
		Id = LibCampaignStruct_C_MonthlyCampaign_NullId
	};
}

Boolean LibCampaignStruct_IsNull(LibCampaignStruct_K_MonthlyCampaign _MonthlyCampaign) {
	return _MonthlyCampaign.Id == LibCampaignStruct_C_MonthlyCampaign_NullId;
}

/**
 * Parse a campaign name into a struct containing its season (see Const::C_Season_Names) and its year
 *
 *	@param _CampaignName		The name of the campaign to parse
 *
 *	@return									A struct LibCampaignStruct_K_CampaignName
 */
LibCampaignStruct_K_CampaignName LibCampaignStruct_ParseCampaignName(Text _CampaignName) {
	declare LibCampaignStruct_K_CampaignName CampaignName = LibCampaignStruct_K_CampaignName {
		IsValid = False,
		Name = _CampaignName
	};

	declare Text[] NameSplit = LibCampaignStruct_TL::Split(" ", _CampaignName);
	if (NameSplit.count >= 2) {
		CampaignName.Season = NameSplit[0];
		CampaignName.Year = NameSplit[1];
		CampaignName.IsValid = LibCampaignStruct_C_Season_Names.existskey(CampaignName.Season) && LibCampaignStruct_TL::ToInteger(CampaignName.Year) > 0;
		if (CampaignName.IsValid) {
			CampaignName.TranslatedName = LibCampaignStruct_TL::Compose("%1 %2", LibCampaignStruct_C_Season_Names[CampaignName.Season], CampaignName.Year);
		}
	}

	return CampaignName;
}

/**
 * Translate map if it's an official map from a quarterly campaign
 *
 *	@param _MapName							The name of the map to translate
 *	@param _ForceTranslation		Force the translation of the map name
 *
 *	@return											The translated name
 */
Text LibCampaignStruct_TranslateOfficialMapName(Text _MapName, Text _AuthorLogin, Boolean _ForceTranslation) {
	declare Text MapName = _MapName;
	if (_ForceTranslation || _AuthorLogin == "Nadeo") {
		declare Text[] NameSplit = LibCampaignStruct_TL::Split(" ", MapName);
		if (NameSplit.count > 0) {
			declare Text MapNameEnd = LibCampaignStruct_TL::Trim(LibCampaignStruct_TL::Replace(MapName, NameSplit[0], ""));
			MapName = LibCampaignStruct_TL::Compose("%1 %2", LibCampaignStruct_C_Season_Names.get(NameSplit[0], NameSplit[0]), MapNameEnd);
		}
	}
	return MapName;
}
Text LibCampaignStruct_TranslateOfficialMapName(Text _MapName, Text _AuthorLogin) {
	return LibCampaignStruct_TranslateOfficialMapName(_MapName, _AuthorLogin, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Return the top rank index for the best rank to display
Integer LibCampaignStruct_Private_GetTopRankIndex(Integer _Index, Integer _Rank, Integer _Count) {
	declare Index = _Index;
	// We find a rank higher than top 100
	if (_Rank > 100) {
		// We take a smallest zone if it exists
		if (Index < _Count - 1) {
			Index += 1;
		}
	}
	return Index;
}

/**
* Return the best ranking to display
*
*	@param _Rankings						The rankings to check
*
*	@return											The best rank to display (ex : Top 3 Ile de France)
*/
LibCampaignStruct_K_Ranking LibCampaignStruct_GetTopRank(LibCampaignStruct_K_Ranking[] _Rankings) {
	declare Integer TrueIndex;
	declare Integer RankingIndex;
	declare LibCampaignStruct_K_Ranking TopRank;
	for (Index, 0, _Rankings.count-1) {
		RankingIndex = _Rankings.count-1 - Index;
		TopRank = _Rankings[RankingIndex];
		TrueIndex = LibCampaignStruct_Private_GetTopRankIndex(RankingIndex, TopRank.Position, _Rankings.count);
		if (TrueIndex != RankingIndex) break;
	}
	return TopRank;
}


// */
// @Component end lib-campaign-struct

// @Component start lib-api-leaderboard
// /*

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get a player's trophy ranking
 *
 *	@param	_AccountId								Id of the player's account
 *
 *	@return														The request
 */
LibCommonHttp_K_Request GetMyTrophyRanking(Text _AccountId) {
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIBaseUrl^LibLeaderboardAPI_C_API_Trophy^LibLeaderboardAPI_C_Route_GetMyTrophyRanking, LibLeaderboardAPI_C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMyTrophyRanking request
LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking GetResponseFromGetMyTrophyRanking(LibCommonHttp_K_Request _Request) {
	declare LibLeaderboardAPI_K_HttpGetPlayerTrophyRanking HttpGetPlayerTrophyRanking;
	HttpGetPlayerTrophyRanking.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking Response;
	Response.AccountId = HttpGetPlayerTrophyRanking.accountId;
	Response.Points = HttpGetPlayerTrophyRanking.countPoint;
	Response.Echelon = HttpGetPlayerTrophyRanking.echelon;

	declare LibCampaignStruct_K_Ranking[] Ranking;
	foreach (Zone in HttpGetPlayerTrophyRanking.zones) {
		Ranking.add(
			LibCampaignStruct_K_Ranking {
				ZoneId = Zone.zoneId,
				ZoneName = Zone.zoneName,
				Position = Zone.ranking.position,
				Length = Zone.ranking.length
			}
		);
	}
	Response.Ranking = Ranking;

	return Response;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the players' trophy ranking
 *
 *	@param	_AccountIds								Ids of the accounts to retrieve
 *	@param	_OnlyWorldRanking					Retrieve only the world ranking and not the sub-zones (continent, country, ...)
 *
 *	@return														The request
 */
LibCommonHttp_K_Request LibLeaderboardAPI_GetPlayersTrophyRanking(Text[] _AccountIds, Boolean _OnlyWorldRanking) {
	declare LibLeaderboardAPI_K_BodyGetPlayersTrophyRanking Body;
	foreach (AccountId in _AccountIds) {
		Body.listPlayer.add(LibLeaderboardAPI_K_TrophyPlayer {
			accountId = AccountId
		});
		Body.onlyWorld = _OnlyWorldRanking;
	}
	return LibCommonHttp_CreatePost(LibTMNextConfig_Get().APIBaseUrl^LibLeaderboardAPI_C_API_Trophy^LibLeaderboardAPI_C_Route_GetPlayersTrophyRanking, Body.tojson(), LibLeaderboardAPI_C_Headers);
}
LibCommonHttp_K_Request LibLeaderboardAPI_GetPlayersTrophyRanking(Text[] _AccountIds) {
	return LibLeaderboardAPI_GetPlayersTrophyRanking(_AccountIds, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetPlayersTrophyRanking request
LibLeaderboardAPI_K_ResponseFromGetPlayersTrophyRanking LibLeaderboardAPI_GetResponseFromGetPlayersTrophyRanking(LibCommonHttp_K_Request _Request) {
	declare LibLeaderboardAPI_K_HttpGetPlayersTrophyRanking HttpGetPlayersTrophyRanking;
	HttpGetPlayersTrophyRanking.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibLeaderboardAPI_K_ResponseFromGetPlayersTrophyRanking Response;
	foreach (Player in HttpGetPlayersTrophyRanking.rankings) {
		declare LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking PlayerRanking;
		PlayerRanking.AccountId = Player.accountId;
		PlayerRanking.Points = Player.countPoint;
		PlayerRanking.Echelon = Player.echelon;

		declare LibCampaignStruct_K_Ranking[] Ranking;
		foreach (Zone in Player.zones) {
			Ranking.add(
				LibCampaignStruct_K_Ranking {
					ZoneId = Zone.zoneId,
					ZoneName = Zone.zoneName,
					Position = Zone.ranking.position,
					Length = Zone.ranking.length
				}
			);
		}
		PlayerRanking.Ranking = Ranking;

		Response.Players.add(PlayerRanking);
	}

	Response.Total = HttpGetPlayersTrophyRanking.length;

	return Response;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the top rankings of a group for a specific club
 *
 *	@param	_GroupUid							The group Uid to fetch
 *	@param	_ClubId								The club Id to fetch
 *	@param	_Offset								The offset to start the ranking
 *	@param	_Length								The length of the ranking
 *
 *	@return												The request
 */
LibCommonHttp_K_Request LibLeaderboardAPI_GetTopRankingsInClub(Text _GroupUid, Integer _ClubId, Integer _Offset, Integer _Length) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		LibLeaderboardAPI_C_Route_GetTopRankingsInClub,
		[LibLeaderboardAPI_C_RouteParameter_GroupUid => _GroupUid, LibLeaderboardAPI_C_RouteParameter_ClubId => ""^_ClubId]
	);
	declare Text QueryString = LibCommonHttp_CreateQueryString([
		LibLeaderboardAPI_C_QueryParameter_Offset => ""^_Offset,
		LibLeaderboardAPI_C_QueryParameter_Length => ""^_Length
	]);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIBaseUrl^LibLeaderboardAPI_C_API_Leaderboard^Route^QueryString, LibLeaderboardAPI_C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetTopRankingsInClub request
LibLeaderboardAPI_K_ResponseFromGetTopRankingsInClub LibLeaderboardAPI_GetResponseFromGetTopRankingsInClub(LibCommonHttp_K_Request _Request) {
	declare LibLeaderboardAPI_K_HttpGetTopRankingsInClub HttpGetTopRankingsInClub;
	HttpGetTopRankingsInClub.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibLeaderboardAPI_K_ResponseFromGetTopRankingsInClub TopRankingsInClub;
	TopRankingsInClub.ClubId = HttpGetTopRankingsInClub.clubId;
	TopRankingsInClub.Length = HttpGetTopRankingsInClub.length;
	foreach (Top in HttpGetTopRankingsInClub.top) {
		TopRankingsInClub.TopRankings.add(
			LibCampaignStruct_K_Top {
				AccountId = Top.accountId,
				ZoneId = Top.zoneId,
				Position = Top.position,
				SP = Top.sp
			}
		);
	}

	return TopRankingsInClub;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the ranking of the player of a group for a specific club
 *
 *	@param	_GroupUid							The group Uid to fetch
 *	@param	_ClubId								The club Id to fetch
 *
 *	@return												The request
 */
LibCommonHttp_K_Request LibLeaderboardAPI_GetPlayerRankingInClub(Text _GroupUid, Integer _ClubId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(
		LibLeaderboardAPI_C_Route_GetPlayerRankingInClub,
		[LibLeaderboardAPI_C_RouteParameter_GroupUid => _GroupUid, LibLeaderboardAPI_C_RouteParameter_ClubId => ""^_ClubId]
	);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIBaseUrl^LibLeaderboardAPI_C_API_Leaderboard^Route, LibLeaderboardAPI_C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetPlayerRankingInClub request
LibCampaignStruct_K_Top LibLeaderboardAPI_GetResponseFromGetPlayerRankingInClub(LibCommonHttp_K_Request _Request) {
	declare LibLeaderboardAPI_K_HttpPlayerScore HttpPlayerScore;
	HttpPlayerScore.fromjson(LibCommonHttp_GetResult(_Request));

	return LibCampaignStruct_K_Top {
		Position = HttpPlayerScore.position,
		SP = HttpPlayerScore.sp
	};
}


// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the top rankings of a map for a specific club
 *
 *	@param	_GroupUid							The group Uid to fetch
 *	@param	_MapUid								The map to fetch
 *	@param	_ClubId								The club Id to fetch
 *	@param	_Offset								The offset to start the ranking
 *	@param	_Length								The length of the ranking
 *
 *	@return												The request
 */
LibCommonHttp_K_Request LibLeaderboardAPI_GetMapTopRankingsInClub(Text _GroupUid, Text _MapUid, Integer _ClubId, Integer _Offset, Integer _Length) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(LibLeaderboardAPI_C_Route_GetMapTopRankingsInClub, [
		LibLeaderboardAPI_C_RouteParameter_GroupUid => _GroupUid,
		LibLeaderboardAPI_C_RouteParameter_MapUid => _MapUid,
		LibLeaderboardAPI_C_RouteParameter_ClubId => ""^_ClubId
	]);
	declare Text QueryString = LibCommonHttp_CreateQueryString([
		LibLeaderboardAPI_C_QueryParameter_Offset => ""^_Offset,
		LibLeaderboardAPI_C_QueryParameter_Length => ""^_Length
	]);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIBaseUrl^LibLeaderboardAPI_C_API_Leaderboard^Route^QueryString, LibLeaderboardAPI_C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetMapTopRankingsInClub request
LibLeaderboardAPI_K_ResponseFromGetMapTopRankingsInClub LibLeaderboardAPI_GetResponseFromGetMapTopRankingsInClub(LibCommonHttp_K_Request _Request) {
	declare LibLeaderboardAPI_K_HttpGetMapTopRankingsInClub HttpGetMapTopRankingsInClub;
	HttpGetMapTopRankingsInClub.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibLeaderboardAPI_K_ResponseFromGetMapTopRankingsInClub MapTopRankingsInClub;
	foreach (Top in HttpGetMapTopRankingsInClub.top) {
		MapTopRankingsInClub.Tops.add(
			LibCampaignStruct_K_TopScore {
				AccountId = Top.accountId,
				ZoneId = Top.zoneId,
				Position = Top.position,
				Score = Top.score
			}
		);
	}
	MapTopRankingsInClub.LeaderboardGroupUid = HttpGetMapTopRankingsInClub.groupUid;
	MapTopRankingsInClub.Length = HttpGetMapTopRankingsInClub.length;

	return MapTopRankingsInClub;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to get the ranking of a player in a map for a specific club
 *
 *	@param	_GroupUid							The group Uid to fetch
 *	@param	_MapUid								The map to fetch
 *	@param	_ClubId								The club Id to fetch
 *
 *	@return												The request
 */
LibCommonHttp_K_Request LibLeaderboardAPI_GetPlayerMapRankingInClub(Text _GroupUid, Text _MapUid, Integer _ClubId) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(LibLeaderboardAPI_C_Route_GetPlayerMapRankingInClub, [
		LibLeaderboardAPI_C_RouteParameter_GroupUid => _GroupUid,
		LibLeaderboardAPI_C_RouteParameter_MapUid => _MapUid,
		LibLeaderboardAPI_C_RouteParameter_ClubId => ""^_ClubId
	]);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIBaseUrl^LibLeaderboardAPI_C_API_Leaderboard^Route, LibLeaderboardAPI_C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetPlayerMapRankingInClub request
LibLeaderboardAPI_K_ResponseFromGetPlayerMapRankingsInClub LibLeaderboardAPI_GetResponseFromGetPlayerMapRankingInClub(LibCommonHttp_K_Request _Request) {
	declare LibLeaderboardAPI_K_HttpGetPlayerMapRankingInClub HttpGetPlayerMapRankingInClub;
	HttpGetPlayerMapRankingInClub.fromjson(LibCommonHttp_GetResult(_Request));
	return LibLeaderboardAPI_K_ResponseFromGetPlayerMapRankingsInClub {
		LeaderboardGroupUid = HttpGetPlayerMapRankingInClub.groupUid,
		MapUid = HttpGetPlayerMapRankingInClub.mapUid,
		ClubId = HttpGetPlayerMapRankingInClub.clubId,
		Score = HttpGetPlayerMapRankingInClub.score,
		Position = HttpGetPlayerMapRankingInClub.position
	};
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Start a request to retrieve players near map's medals
 *
 *	@param	_GroupUid							The group Uid to fetch
 *	@param	_MapUid								The map to fetch
 *
 *	@return												The request
 */
LibCommonHttp_K_Request LibLeaderboardAPI_GetPlayersCloseToMedals(Text _GroupUid, Text _MapUid) {
	declare Text Route = LibCommonHttp_InjectRouteParameters(LibLeaderboardAPI_C_Route_GetPlayersCloseToMedals, [
		LibLeaderboardAPI_C_RouteParameter_GroupUid => _GroupUid,
		LibLeaderboardAPI_C_RouteParameter_MapUid => _MapUid
	]);
	return LibCommonHttp_CreateGet(LibTMNextConfig_Get().APIBaseUrl^LibLeaderboardAPI_C_API_Leaderboard^Route, LibLeaderboardAPI_C_Headers);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Parse the response to the GetPlayersCloseToMedals request
LibLeaderboardAPI_K_ResponseFromGetPlayersCloseToMedals LibLeaderboardAPI_GetResponseFromGetPlayersCloseToMedals(LibCommonHttp_K_Request _Request) {
	declare LibLeaderboardAPI_K_HttpGetPlayersCloseToMedals HttpGetPlayersCloseToMedals;
	HttpGetPlayersCloseToMedals.fromjson(LibCommonHttp_GetResult(_Request));

	declare LibLeaderboardAPI_K_ResponseFromGetPlayersCloseToMedals PlayersCloseToMedals;
	foreach (PlayerCloseToMedal in HttpGetPlayersCloseToMedals.medals) {
		PlayersCloseToMedals.Medals.add(LibCampaignStruct_K_PlayerCloseToMedal {
			Medal = PlayerCloseToMedal.medal,
			AccountId = PlayerCloseToMedal.accountId,
			ZoneId = PlayerCloseToMedal.zoneId,
			ZoneName = PlayerCloseToMedal.zoneName,
			Score = PlayerCloseToMedal.score
		});
	}
	PlayersCloseToMedals.LeaderboardGroupUid = HttpGetPlayersCloseToMedals.groupUid;
	PlayersCloseToMedals.MapUid = HttpGetPlayersCloseToMedals.mapUid;

	return PlayersCloseToMedals;
}

// */
// @Component end lib-api-leaderboard

// @Component start lib-common-task
// /*

LibCommonTask_K_Task LibCommonTask_GetEmptyTask() {
	return LibCommonTask_K_Task {
		SourceTaskId = NullId,
		Owner = LibCommonTask_K_TaskOwner {
			Type = LibCommonTask_C_Owner_Null,
			DataFileMgr = Null,
			ScoreMgr = Null,
			TrackingMgr = Null,
			UserMgr = Null,
			PresenceMgr = Null,
			/*
			ManiaPlanet = Null,
			AchievementsMgr = Null,
			*/
			ZoneMgr = Null,
			WSNotificationMgr = Null,
			Mode = Null
		},
		SystemDialogTaskId = NullId,
		SystemDialogManager = Null,
		IsInitialized = False,
		IsProcessing = False,
		IsSuccess = False,
		Error = LibCommonTask_K_TaskError {
			Type = "",
			Code = "",
			Description = ""
		},
		Metadata = []
	};
}

LibCommonTask_K_Task LibCommonTask_Destroy(LibCommonTask_K_Task _Task) {
	declare LibCommonTask_K_Task Task = _Task;

	switch (Task.Owner.Type) {
		case LibCommonTask_C_Owner_DataFileMgr: {
			if (Task.Owner.DataFileMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.DataFileMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case LibCommonTask_C_Owner_ScoreMgr: {
			if (Task.Owner.ScoreMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.ScoreMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case LibCommonTask_C_Owner_TrackingMgr: {
			if (Task.Owner.TrackingMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.TrackingMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case LibCommonTask_C_Owner_UserMgr: {
			if (Task.Owner.UserMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.UserMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case LibCommonTask_C_Owner_PresenceMgr: {
			if (Task.Owner.PresenceMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.PresenceMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		/*
		case LibCommonTask_C_Owner_ManiaPlanet: {
			if (Task.Owner.ManiaPlanet.MasterServer_MSTaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.ManiaPlanet.MasterServer_ReleaseMSTaskResult(Task.SourceTaskId);
			}
		}
		case LibCommonTask_C_Owner_AchievementsMgr: {
			if (Task.Owner.AchievementsMgr.MasterServer_MSTaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.AchievementsMgr.MasterServer_ReleaseMSTaskResult(Task.SourceTaskId);
			}
		}
		*/
		case LibCommonTask_C_Owner_ZoneMgr: {
			if (Task.Owner.ZoneMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.ZoneMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case LibCommonTask_C_Owner_NotificationMgr: {
			if (Task.Owner.WSNotificationMgr.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.WSNotificationMgr.TaskResult_Release(Task.SourceTaskId);
			}
		}
		case LibCommonTask_C_Owner_Mode: {
			if (Task.Owner.Mode.TaskResults.existskey(Task.SourceTaskId)) {
				Task.Owner.Mode.TaskResult_Release(Task.SourceTaskId);
			}
		}
	}

	if (
		Task.SystemDialogTaskId != NullId &&
		Task.SystemDialogManager != Null &&
		Task.SystemDialogManager.TaskResults.existskey(Task.SystemDialogTaskId)
	) {
		Task.SystemDialogManager.TaskResult_Release(Task.SystemDialogTaskId);
	}

	Task.SourceTaskId = NullId;
	Task.SystemDialogTaskId = NullId;
	Task.IsInitialized = False;
	Task.IsProcessing = False;

	return Task;
}

CUserV2Manager LibCommonTask_GetUserMgr(CNod _Nod) {
	switchtype (_Nod) {
		case CMode: return (_Nod as CMode).UserMgr;
		case CMlScript: return (_Nod as CMlScript).UserMgr;
		case CManiaApp: return (_Nod as CManiaApp).UserMgr;
	}
	return Null;
}

LibCommonTask_K_Task LibCommonTask_Create(CNod _Owner, CTaskResult _SourceTask, CUserV2Manager _SystemDialogManager) {
	declare LibCommonTask_K_Task Task = LibCommonTask_GetEmptyTask();

	if (_SourceTask != Null) {
		assert(_Owner != Null, "Owner cannot be Null.");

		switchtype (_Owner) {
			case CDataFileMgr: {
				declare CDataFileMgr Owner <=> (_Owner as CDataFileMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in DataFileMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_DataFileMgr;
				Task.Owner.DataFileMgr <=> Owner;
			}
			case CScoreMgr: {
				declare CScoreMgr Owner <=> (_Owner as CScoreMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in ScoreMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_ScoreMgr;
				Task.Owner.ScoreMgr <=> Owner;
			}
			case CTrackingMgr: {
				declare CTrackingMgr Owner <=> (_Owner as CTrackingMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in TrackingMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_TrackingMgr;
				Task.Owner.TrackingMgr <=> Owner;
			}
			case CUserV2Manager: {
				declare CUserV2Manager Owner <=> (_Owner as CUserV2Manager);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in UserMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_UserMgr;
				Task.Owner.UserMgr <=> Owner;
			}
			case CPresenceMgr: {
				declare CPresenceMgr Owner <=> (_Owner as CPresenceMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in PresenceMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_PresenceMgr;
				Task.Owner.PresenceMgr <=> Owner;
			}
			/*
			case CManiaPlanet: {
				declare CManiaPlanet Owner <=> (_Owner as CManiaPlanet);
				assert(Owner.MasterServer_MSTaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in ManiaPlanet.");
				Task.Owner.Type = LibCommonTask_C_Owner_ManiaPlanet;
				Task.Owner.ManiaPlanet <=> Owner;
			}
			case CAchievementsManager: {
				declare CAchievementsManager Owner <=> (_Owner as CAchievementsManager);
				assert(Owner.MasterServer_MSTaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in AchievementsMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_AchievementsMgr;
				Task.Owner.AchievementsMgr <=> Owner;
			}
			*/
			case CRankingsZoneMgr: {
				declare CRankingsZoneMgr Owner <=> (_Owner as CRankingsZoneMgr);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in ZoneMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_ZoneMgr;
				Task.Owner.ZoneMgr <=> Owner;
			}
			case CWSNotificationManager: {
				declare CWSNotificationManager Owner <=> (_Owner as CWSNotificationManager);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in WSNotificationMgr.");
				Task.Owner.Type = LibCommonTask_C_Owner_NotificationMgr;
				Task.Owner.WSNotificationMgr <=> Owner;
			}
			case CMode: {
				declare CMode Owner <=> (_Owner as CMode);
				assert(Owner.TaskResults.existskey(_SourceTask.Id), "Wrong owner. Cannot find task in CMode.");
				Task.Owner.Type = LibCommonTask_C_Owner_Mode;
				Task.Owner.Mode <=> Owner;
			}
			default: {
				assert(False, "Unknown owner type.");
			}
		}

		Task.SourceTaskId = _SourceTask.Id;
		Task.SystemDialogTaskId = NullId;
		Task.SystemDialogManager <=> _SystemDialogManager;
		Task.IsInitialized = True;
		Task.IsProcessing = _SourceTask.IsProcessing;
		Task.IsSuccess = _SourceTask.HasSucceeded && !_SourceTask.HasFailed && !_SourceTask.IsCanceled;
		Task.Error.Type = _SourceTask.ErrorType;
		Task.Error.Code = _SourceTask.ErrorCode;
		Task.Error.Description = _SourceTask.ErrorDescription;
	} else {
		Task.SourceTaskId = NullId;
		Task.Owner.Type = LibCommonTask_C_Owner_Null;
		Task.SystemDialogTaskId = NullId;
		Task.SystemDialogManager = Null;
		Task.IsInitialized = True;
		Task.IsProcessing = False;
		Task.IsSuccess = False;
		Task.Error.Type = LibCommonTask_C_ErrorType_CreationFailed;
		Task.Error.Code = LibCommonTask_C_ErrorCode_CreationFailed;
		Task.Error.Description = LibCommonTask_C_ErrorDescription_CreationFailed;
	}

	return Task;
}
LibCommonTask_K_Task LibCommonTask_Create(CNod _Owner, CTaskResult _SourceTask) {
	return LibCommonTask_Create(_Owner, _SourceTask, LibCommonTask_GetUserMgr(This));
}

Boolean LibCommonTask_IsInitialized(LibCommonTask_K_Task _Task) {
	return _Task.IsInitialized;
}

Boolean LibCommonTask_IsRunning(LibCommonTask_K_Task _Task) {
	return _Task.IsProcessing;
}

Boolean LibCommonTask_IsSuccess(LibCommonTask_K_Task _Task) {
	return _Task.IsSuccess;
}

LibCommonTask_K_Task LibCommonTask_DestroyAndCreate(LibCommonTask_K_Task _PreviousTask, CNod _Owner, CTaskResult _SourceTask, CUserV2Manager _SystemDialogManager) {
	if (LibCommonTask_IsInitialized(_PreviousTask)) {
		LibCommonTask_Destroy(_PreviousTask);
	}
	return LibCommonTask_Create(_Owner, _SourceTask, _SystemDialogManager);
}
LibCommonTask_K_Task LibCommonTask_DestroyAndCreate(LibCommonTask_K_Task _PreviousTask, CNod _Owner, CTaskResult _SourceTask) {
	return LibCommonTask_DestroyAndCreate(_PreviousTask, _Owner, _SourceTask, LibCommonTask_GetUserMgr(This));
}

LibCommonTask_K_Task DestroyIfInitialized(LibCommonTask_K_Task _Task) {
	if (LibCommonTask_IsInitialized(_Task)) return LibCommonTask_Destroy(_Task);
	return _Task;
}

CTaskResult LibCommonTask_GetSourceTask(LibCommonTask_K_Task _Task) {
	switch (_Task.Owner.Type) {
		case LibCommonTask_C_Owner_DataFileMgr: {
			if (_Task.Owner.DataFileMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.DataFileMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case LibCommonTask_C_Owner_ScoreMgr: {
			if (_Task.Owner.ScoreMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.ScoreMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case LibCommonTask_C_Owner_TrackingMgr: {
			if (_Task.Owner.TrackingMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.TrackingMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case LibCommonTask_C_Owner_UserMgr: {
			if (_Task.Owner.UserMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.UserMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case LibCommonTask_C_Owner_PresenceMgr: {
			if (_Task.Owner.PresenceMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.PresenceMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		/*
		case LibCommonTask_C_Owner_ManiaPlanet: {
			if (_Task.Owner.ManiaPlanet.MasterServer_MSTaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.ManiaPlanet.MasterServer_MSTaskResults[_Task.SourceTaskId];
			}
		}
		case LibCommonTask_C_Owner_AchievementsMgr: {
			if (_Task.Owner.AchievementsMgr.MasterServer_MSTaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.AchievementsMgr.MasterServer_MSTaskResults[_Task.SourceTaskId];
			}
		}
		*/
		case LibCommonTask_C_Owner_ZoneMgr: {
			if (_Task.Owner.ZoneMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.ZoneMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case LibCommonTask_C_Owner_NotificationMgr: {
			if (_Task.Owner.WSNotificationMgr.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.WSNotificationMgr.TaskResults[_Task.SourceTaskId];
			}
		}
		case LibCommonTask_C_Owner_Mode: {
			if (_Task.Owner.Mode.TaskResults.existskey(_Task.SourceTaskId)) {
				return _Task.Owner.Mode.TaskResults[_Task.SourceTaskId];
			}
		}
	}

	return Null;
}

CTaskResult_AccountTrophyGainHistory LibCommonTask_GetSourceTask_AccountTrophyGainHistory(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_AccountTrophyGainHistory);
	return Null;
}
CTaskResult_AccountTrophyGainList LibCommonTask_GetSourceTask_AccountTrophyGainList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_AccountTrophyGainList);
	return Null;
}
CTaskResult_AccountTrophyLastYearSummary LibCommonTask_GetSourceTask_AccountTrophyLastYearSummary(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_AccountTrophyLastYearSummary);
	return Null;
}
CTaskResult_Connect LibCommonTask_GetSourceTask_Connect(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Connect);
	return Null;
}
CTaskResult_FileList LibCommonTask_GetSourceTask_FileList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_FileList);
	return Null;
}
CTaskResult_GameModeList LibCommonTask_GetSourceTask_GameModeList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_GameModeList);
	return Null;
}
CTaskResult_GetDisplayNameResult LibCommonTask_GetSourceTask_GetDisplayNameResult(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_GetDisplayNameResult);
	return Null;
}
CTaskResult_Ghost LibCommonTask_GetSourceTask_Ghost(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Ghost);
	return Null;
}
CTaskResult_GhostList LibCommonTask_GetSourceTask_GhostList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_GhostList);
	return Null;
}
CTaskResult_MapList LibCommonTask_GetSourceTask_MapList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_MapList);
	return Null;
}
CTaskResult_MapRecordList LibCommonTask_GetSourceTask_MapRecordList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_MapRecordList);
	return Null;
}
CTaskResult_NSItemCollection LibCommonTask_GetSourceTask_NSItemCollection(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSItemCollection);
	return Null;
}
CTaskResult_NSItemCollectionList LibCommonTask_GetSourceTask_NSItemCollectionList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSItemCollectionList);
	return Null;
}
CTaskResult_NSMap LibCommonTask_GetSourceTask_NSMap(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSMap);
	return Null;
}
CTaskResult_NSMapList LibCommonTask_GetSourceTask_NSMapList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSMapList);
	return Null;
}
CTaskResult_NSSkin LibCommonTask_GetSourceTask_NSSkin(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSSkin);
	return Null;
}
CTaskResult_NSSkinList LibCommonTask_GetSourceTask_NSSkinList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_NSSkinList);
	return Null;
}
CTaskResult_ReplayList LibCommonTask_GetSourceTask_ReplayList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_ReplayList);
	return Null;
}
CTaskResult_Season LibCommonTask_GetSourceTask_Season(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Season);
	return Null;
}
CTaskResult_SeasonList LibCommonTask_GetSourceTask_SeasonList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_SeasonList);
	return Null;
}
CTaskResult_ClubTagList LibCommonTask_GetSourceTask_ClubTagList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_ClubTagList);
	return Null;
}
CTaskResult_TrophySoloMedalAchievementSettings LibCommonTask_GetSourceTask_TrophySoloMedalAchievementSettings(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_TrophySoloMedalAchievementSettings);
	return Null;
}
CTaskResult_ZoneList LibCommonTask_GetSourceTask_ZoneList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_ZoneList);
	return Null;
}
CTaskResult_FriendList LibCommonTask_GetSourceTask_FriendList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_FriendList);
	return Null;
}
CTaskResult_Squad LibCommonTask_GetSourceTask_Squad(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Squad);
	return Null;
}
CTaskResult_WSNotification LibCommonTask_GetSourceTask_WSNotification(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_WSNotification);
	return Null;
}
CTaskResult_UserZoneList LibCommonTask_GetSourceTask_UserZoneList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_UserZoneList);
	return Null;
}
CTaskResult_Bool LibCommonTask_GetSourceTask_Bool(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_Bool);
	return Null;
}
CTaskResult_UserNewsList LibCommonTask_GetSourceTask_UserNewsList(LibCommonTask_K_Task _Task) {
	declare CTaskResult Task = LibCommonTask_GetSourceTask(_Task);
	if (Task != Null) return (Task as CTaskResult_UserNewsList);
	return Null;
}

LibCommonTask_K_TaskError LibCommonTask_GetError(LibCommonTask_K_Task _Task) {
	return _Task.Error;
}

LibCommonTask_K_Task LibCommonTask_Update(LibCommonTask_K_Task _Task) {
	if (!_Task.IsProcessing) return _Task;

	declare LibCommonTask_K_Task Task = _Task;

	// We are displaying the error system dialog
	if (Task.SystemDialogTaskId != NullId) {
		if (
			!Task.SystemDialogManager.TaskResults.existskey(Task.SystemDialogTaskId) ||
			!Task.SystemDialogManager.TaskResults[Task.SystemDialogTaskId].IsProcessing
		) {
			Task.IsProcessing = False;
		}
	}
	// The task is processing
	else {
		declare CTaskResult SourceTask = LibCommonTask_GetSourceTask(Task);

		if (SourceTask != Null) {
			if (!SourceTask.IsProcessing) {
				Task.IsSuccess = SourceTask.HasSucceeded && !SourceTask.HasFailed && !SourceTask.IsCanceled;
				Task.Error.Type = SourceTask.ErrorType;
				Task.Error.Code = SourceTask.ErrorCode;
				Task.Error.Description = SourceTask.ErrorDescription;

				// Display the error system dialog
				if (
					Task.SystemDialogManager != Null &&
					!Task.IsSuccess &&
					LibCommonTask_C_FirstPartyErrorTypes.exists(Task.Error.Type)
				) {
					declare CTaskResult ShowSystemDialogTask <=> Task.SystemDialogManager.TaskError_ShowSystemDialog(Task.SystemDialogManager.MainUser.Id, Task.Error.Code);
					if (ShowSystemDialogTask != Null) {
						Task.SystemDialogTaskId = ShowSystemDialogTask.Id;
					} else {
						Task.IsProcessing = False;
					}

					// We cannot display first party error code
					// see: /trackmania-next/tmnext/-/issues/4306
					// Replace error description and code by something generic
					//L16N [LibTask] Generic error message displayed when something goes wrong but we cannot give details about it
					Task.Error.Description = _("An error occured");
					Task.Error.Code = "";
				} else {
					Task.IsProcessing = False;
				}
			}
		} else {
			Task.IsProcessing = False;
			Task.IsSuccess = False;
			Task.Error.Type = LibCommonTask_C_ErrorType_TaskNotFound;
			Task.Error.Code = LibCommonTask_C_ErrorCode_TaskNotFound;
			Task.Error.Description = LibCommonTask_C_ErrorDescription_TaskNotFound;
		}
	}

	return Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Add metadata on a task
LibCommonTask_K_Task LibCommonTask_SetMetadata(LibCommonTask_K_Task _Task, Text[Text] _Metadata) {
	declare LibCommonTask_K_Task Task = _Task;
	foreach (Key => Value in _Metadata) {
		Task.Metadata[Key] = Value;
	}
	return Task;
}
LibCommonTask_K_Task LibCommonTask_SetMetadata(LibCommonTask_K_Task _Task, Text _Key, Text _Value) {
	declare LibCommonTask_K_Task Task = _Task;
	Task.Metadata[_Key] = _Value;
	return Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Remove all metadata from a Task
LibCommonTask_K_Task LibCommonTask_ResetMetadata(LibCommonTask_K_Task _Task) {
	declare LibCommonTask_K_Task Task = _Task;
	Task.Metadata = [];
	return Task;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get metadata from a Task
Text[Text] LibCommonTask_GetMetadata(LibCommonTask_K_Task _Task) {
	return _Task.Metadata;
}
Text LibCommonTask_GetMetadata(LibCommonTask_K_Task _Task, Text _Key) {
	return _Task.Metadata.get(_Key, "");
}

// */
// @Component end lib-common-task

// @Component start component-commonlibs-platform
// /*

CSystemPlatform::ESystemPlatform LibCommonLibsPlatform_GetPlatform(CSystemPlatform _System) {
	if (_System == Null) return CSystemPlatform::ESystemPlatform::None;

	declare CSystemPlatform::ESystemPlatform LibCommonLibsPlatform_OverridePlatform for _System = CSystemPlatform::ESystemPlatform::None;
	if (LibCommonLibsPlatform_OverridePlatform != CSystemPlatform::ESystemPlatform::None) {
		return LibCommonLibsPlatform_OverridePlatform;
	}

	return _System.Platform;
}

Void LibCommonLibsPlatform_OverridePlatform(CSystemPlatform _System, CSystemPlatform::ESystemPlatform _Platform) {
	declare CSystemPlatform::ESystemPlatform LibCommonLibsPlatform_OverridePlatform for _System = CSystemPlatform::ESystemPlatform::None;
	LibCommonLibsPlatform_OverridePlatform = _Platform;
}
CSystemPlatform::ESystemPlatform LibCommonLibsPlatform_GetPlatformOverride(CSystemPlatform _System) {
	declare CSystemPlatform::ESystemPlatform LibCommonLibsPlatform_OverridePlatform for _System = CSystemPlatform::ESystemPlatform::None;
	return LibCommonLibsPlatform_OverridePlatform;
}

Integer LibCommonLibsPlatform_GetFamily(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_C_PlatformToFamily.get(_Platform, LibCommonLibsPlatform_C_Family_Unknown);
}
Integer LibCommonLibsPlatform_GetFamily(CSystemPlatform _System) {
	return LibCommonLibsPlatform_GetFamily(LibCommonLibsPlatform_GetPlatform(_System));
}

Text LibCommonLibsPlatform_GetFamilyName(Integer _Family) {
	return LibCommonLibsPlatform_C_FamilyNames.get(_Family, LibCommonLibsPlatform_C_FamilyNames[LibCommonLibsPlatform_C_Family_Unknown]);
}

Boolean LibCommonLibsPlatform_IsPC(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFamily(_Platform) == LibCommonLibsPlatform_C_Family_PC;
}
Boolean LibCommonLibsPlatform_IsPC(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsPC(LibCommonLibsPlatform_GetPlatform(_System));
}
Boolean LibCommonLibsPlatform_IsConsole(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFamily(_Platform) == LibCommonLibsPlatform_C_Family_Console;
}
Boolean LibCommonLibsPlatform_IsConsole(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsConsole(LibCommonLibsPlatform_GetPlatform(_System));
}
Boolean LibCommonLibsPlatform_IsStreaming(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFamily(_Platform) == LibCommonLibsPlatform_C_Family_Streaming;
}
Boolean LibCommonLibsPlatform_IsStreaming(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsStreaming(LibCommonLibsPlatform_GetPlatform(_System));
}
Boolean LibCommonLibsPlatform_IsFromFirstParty(CSystemPlatform::ESystemPlatform _Platform) {
	declare Integer Family = LibCommonLibsPlatform_GetFamily(_Platform);
	return (
		Family == LibCommonLibsPlatform_C_Family_Console ||
		Family == LibCommonLibsPlatform_C_Family_Streaming
	);
}
Boolean LibCommonLibsPlatform_IsFromFirstParty(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsFromFirstParty(LibCommonLibsPlatform_GetPlatform(_System));
}

Integer LibCommonLibsPlatform_GetFirstParty(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_C_PlatformToFirstParty.get(_Platform, LibCommonLibsPlatform_C_FirstParty_Unknown);
}
Integer LibCommonLibsPlatform_GetFirstParty(CSystemPlatform _System) {
	return LibCommonLibsPlatform_GetFirstParty(LibCommonLibsPlatform_GetPlatform(_System));
}

Boolean LibCommonLibsPlatform_IsSony(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFirstParty(_Platform) == LibCommonLibsPlatform_C_FirstParty_Sony;
}
Boolean LibCommonLibsPlatform_IsSony(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsSony(LibCommonLibsPlatform_GetPlatform(_System));
}
Boolean LibCommonLibsPlatform_IsMicrosoft(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFirstParty(_Platform) == LibCommonLibsPlatform_C_FirstParty_Microsoft;
}
Boolean LibCommonLibsPlatform_IsMicrosoft(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsMicrosoft(LibCommonLibsPlatform_GetPlatform(_System));
}
Boolean LibCommonLibsPlatform_IsGoogle(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFirstParty(_Platform) == LibCommonLibsPlatform_C_FirstParty_Google;
}
Boolean LibCommonLibsPlatform_IsGoogle(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsGoogle(LibCommonLibsPlatform_GetPlatform(_System));
}
Boolean LibCommonLibsPlatform_IsAmazon(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFirstParty(_Platform) == LibCommonLibsPlatform_C_FirstParty_Amazon;
}
Boolean LibCommonLibsPlatform_IsAmazon(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsAmazon(LibCommonLibsPlatform_GetPlatform(_System));
}
Boolean LibCommonLibsPlatform_IsUnknownFirstParty(CSystemPlatform::ESystemPlatform _Platform) {
	return LibCommonLibsPlatform_GetFirstParty(_Platform) == LibCommonLibsPlatform_C_FirstParty_Unknown;
}
Boolean LibCommonLibsPlatform_IsUnknownFirstParty(CSystemPlatform _System) {
	return LibCommonLibsPlatform_IsUnknownFirstParty(LibCommonLibsPlatform_GetPlatform(_System));
}

Text LibCommonLibsPlatform_GetNetworkName(CSystemPlatform _System) {
	declare Text Network = "$<$zUbisoft Connect$>";
	if (LibCommonLibsPlatform_IsSony(_System)) {
		Network = "$<$zPlayStationâ„¢Network$>";
	} else if (LibCommonLibsPlatform_IsMicrosoft(_System)) {
		Network = "$<$zXbox network$>";
	} else if (LibCommonLibsPlatform_IsGoogle(_System)) {
		Network = "$<$zStadia network$>";
	}	else if (LibCommonLibsPlatform_IsAmazon(_System)) {
		Network = "$<$zLuna network$>";
	}
	return Network;
}

Text LibCommonLibsPlatform_GetFirstPartyLogo(CSystemPlatform::ESystemPlatform _Platform) {
	switch (LibCommonLibsPlatform_GetFirstParty(_Platform)) {
		case LibCommonLibsPlatform_C_FirstParty_Sony: return "$zïž®";
		case LibCommonLibsPlatform_C_FirstParty_Amazon: return "$zïž²";
		case LibCommonLibsPlatform_C_FirstParty_Google: return "$zïž°";
		case LibCommonLibsPlatform_C_FirstParty_Microsoft: return "$zïž±";
	}
	return "$zïž¯"; //< Ubisoft Logo
}
Text LibCommonLibsPlatform_GetFirstPartyLogo(CSystemPlatform _System) {
	return LibCommonLibsPlatform_GetFirstPartyLogo(LibCommonLibsPlatform_GetPlatform(_System));
}

// */
// @Component end component-commonlibs-platform

// @Component start lib-common-store
// /*

Void LibCommonStore_SendEvent(CNod _Context, Text _StoreId, Text _Type, Text[] _Data) {
	declare Text[] Data = [_StoreId, _Type];
	foreach (Value in _Data) {
		Data.add(Value);
	}
	SendCustomEvent(LibCommonStore_C_Event_RelayEvent, Data);
}
Void LibCommonStore_SendEvent(Text _StoreId, Text _Type, Text[] _Data) {
	LibCommonStore_SendEvent(This, _StoreId, _Type, _Data);
}
Void LibCommonStore_SendEvent(Text _StoreId, Text _Type) {
	LibCommonStore_SendEvent(This, _StoreId, _Type, []);
}

Void LibCommonStore_Subscribe(Text _StoreId) {
	SendCustomEvent(LibCommonStore_C_Event_Subscribe, [_StoreId]);
}

Void LibCommonStore_Unsubscribe(Text _StoreId) {
	SendCustomEvent(LibCommonStore_C_Event_Unsubscribe, [_StoreId]);
}

// */
// @Component end lib-common-store

// @Component start lib-user-store
// /*

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
LibUserStore_K_State LibUserStore_GetState() {
	declare LibUserStore_K_State LibUserStore_State for System;
	return LibUserStore_State;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Ident LibUserStore_GetMainUserId() {
	declare LibUserStore_K_State LibUserStore_State for System;
	return LibUserStore_State.MainUserId;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean LibUserStore_IsOfflineMode() {
	declare LibUserStore_K_State LibUserStore_State for System;
	return LibUserStore_State.IsOfflineMode;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean LibUserStore_HasGamePermission(Text _Permission, Text _SeasonId) {
	return LibRBAC_HasGamePermission(LibUserStore_GetMainUserId(), _Permission, _SeasonId);
}
Boolean LibUserStore_HasGamePermission(Text _Permission) {
	return LibUserStore_HasGamePermission(_Permission, "");
}
Boolean LibUserStore_HasGamePermissions(Text[] _Permissions) {
	return LibRBAC_HasGamePermissions(LibUserStore_GetMainUserId(), _Permissions);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean LibUserStore_GetUserHasSetAdvertsPreferences() {
	declare persistent Boolean LibUserStore_HasSetAdvertsPreferences for UserMgr.MainUser;
	return LibUserStore_HasSetAdvertsPreferences;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_SetUserHasSetAdvertsPreferences(Boolean _HasSetAdvertsPreferences) {
	declare persistent Boolean LibUserStore_HasSetAdvertsPreferences for UserMgr.MainUser;
	LibUserStore_HasSetAdvertsPreferences = _HasSetAdvertsPreferences;
	UserMgr.MainUser.PersistentSave();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean LibUserStore_GetUserHasSeenUbiConnectWelcomeBack() {
	declare persistent Boolean LibUserStore_HasSeenUbiConnectWelcomeBack for UserMgr.MainUser;
	return LibUserStore_HasSeenUbiConnectWelcomeBack;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_SetUserHasSeenUbiConnectWelcomeBack(Boolean _HasSeenUbiConnectWelcomeBack) {
	declare persistent Boolean LibUserStore_HasSeenUbiConnectWelcomeBack for UserMgr.MainUser;
	LibUserStore_HasSeenUbiConnectWelcomeBack = _HasSeenUbiConnectWelcomeBack;
	UserMgr.MainUser.PersistentSave();
}

Boolean LibUserStore_GetUserIsFirstBoot() {
	declare persistent Boolean LibUserStore_IsFirstBoot for UserMgr.MainUser = True;
	return LibUserStore_IsFirstBoot;
}

Void LibUserStore_SetUserIsFirstBoot(Boolean _IsFirstBoot) {
	declare persistent Boolean LibUserStore_IsFirstBoot for UserMgr.MainUser = True;
	LibUserStore_IsFirstBoot = _IsFirstBoot;
	UserMgr.MainUser.PersistentSave();
}

// Check if the user linked their Ubisoft Connect account to their first party account from inside Trackmania
Boolean LibUserStore_GetUserHasLinkedUbiConnectInsideTrackmania() {
	declare persistent Boolean LibUserStore_HasLinkedUbiConnectInsideTrackmania for UserMgr.MainUser = False;
	return LibUserStore_HasLinkedUbiConnectInsideTrackmania;
}
Void LibUserStore_SetUserHasLinkedUbiConnectInsideTrackmania(Boolean _LinkedFromTrackmania) {
	declare persistent Boolean LibUserStore_HasLinkedUbiConnectInsideTrackmania for UserMgr.MainUser = False;
	LibUserStore_HasLinkedUbiConnectInsideTrackmania = _LinkedFromTrackmania;
	UserMgr.MainUser.PersistentSave();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Integer LibUserStore_GetCurrentPlayTabIndex() {
	declare persistent Integer LibUserStore_CurrentTabIndex for UserMgr.MainUser;
	return LibUserStore_CurrentTabIndex;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_SetCurrentPlayTabIndex(Integer _CurrentTabIndex) {
	declare persistent Integer LibUserStore_CurrentTabIndex for UserMgr.MainUser;
	LibUserStore_CurrentTabIndex = _CurrentTabIndex;
	UserMgr.MainUser.PersistentSave();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
LibUserStore_K_TrackBrowserInfos LibUserStore_GetPersistentTrackBrowserInfos() {
	declare persistent Integer LibUserStore_TrackBrowser_CurrentTabIndex for UserMgr.MainUser;
	declare persistent Boolean LibUserStore_TrackBrowser_IsFlatten for UserMgr.MainUser;
	declare persistent Boolean LibUserStore_TrackBrowser_IsSortingByNameElseByDate for UserMgr.MainUser;
	declare persistent Boolean LibUserStore_TrackBrowser_IsSortingFromAscendingOrder for UserMgr.MainUser;

	return LibUserStore_K_TrackBrowserInfos {
		CurrentTabIndex = LibUserStore_TrackBrowser_CurrentTabIndex,
		IsFlatten = LibUserStore_TrackBrowser_IsFlatten,
		IsSortingByNameElseByDate = LibUserStore_TrackBrowser_IsSortingByNameElseByDate,
		IsSortingFromAscendingOrder = LibUserStore_TrackBrowser_IsSortingFromAscendingOrder
	};
}

Void LibUserStore_SetTrackBrowser_Tab(Integer _CurrentTabIndex) {
	declare persistent Integer LibUserStore_TrackBrowser_CurrentTabIndex for UserMgr.MainUser;
	LibUserStore_TrackBrowser_CurrentTabIndex = _CurrentTabIndex;
	UserMgr.MainUser.PersistentSave();
}

Void LibUserStore_SetTrackBrowser_FlattenOption(Boolean _IsFlatten) {
	declare persistent Boolean LibUserStore_TrackBrowser_IsFlatten for UserMgr.MainUser;
	LibUserStore_TrackBrowser_IsFlatten = _IsFlatten;
	UserMgr.MainUser.PersistentSave();
}

Void LibUserStore_SetTrackBrowser_SortOption1(Boolean _IsSortingByNameElseByDate) {
	declare persistent Boolean LibUserStore_TrackBrowser_IsSortingByNameElseByDate for UserMgr.MainUser;
	LibUserStore_TrackBrowser_IsSortingByNameElseByDate = _IsSortingByNameElseByDate;
	UserMgr.MainUser.PersistentSave();
}

Void LibUserStore_SetTrackBrowser_SortOption2(Boolean _IsSortingFromAscendingOrder) {
	declare persistent Boolean LibUserStore_TrackBrowser_IsSortingFromAscendingOrder for UserMgr.MainUser;
	LibUserStore_TrackBrowser_IsSortingFromAscendingOrder = _IsSortingFromAscendingOrder;
	UserMgr.MainUser.PersistentSave();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking LibUserStore_GetUserTrophyRankings() {
	declare LibUserStore_K_State LibUserStore_State for System;
	return LibUserStore_State.UserTrophyRankings;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
LibUserStore_K_MatchmakingInfo LibUserStore_GetMatchmakingInfos(Text _ModeName) {
	declare LibUserStore_K_State LibUserStore_State for System;
	return LibUserStore_State.MatchmakingInfos.get(_ModeName, LibUserStore_K_MatchmakingInfo {});
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean LibUserStore_IsCrossPlayActive() {
	declare LibUserStore_K_State LibUserStore_State for System;
	return LibUserStore_State.IsCrossPlayActive;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean LibUserStore_GetUserHasSeenCrossPlayWarning() {
	declare persistent Boolean LibUserStore_HasSeenCrossPlayWarning for UserMgr.MainUser = False;
	return LibUserStore_HasSeenCrossPlayWarning;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_SetUserHasSeenCrossPlayWarning(Boolean _HasSeenCrossPlayWarning) {
	declare persistent Boolean LibUserStore_HasSeenCrossPlayWarning for UserMgr.MainUser;
	LibUserStore_HasSeenCrossPlayWarning = _HasSeenCrossPlayWarning;
	UserMgr.MainUser.PersistentSave();
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Return the formatted player name
Text LibUserStore_GetPlayerName(Text _UserName, Text _ClubTag, Boolean _IsFirstPartyDisplayName) {
	if (_UserName == "") return "";
	declare Text Name = _UserName;

	// Club Tag
	if (_ClubTag != "") {
		Name = ComponentMenuLibsTools_FormatClubTag(_ClubTag)^" $<"^Name^"$>";
	}

	// If not PC and crossplay is enabled on the client, we check if the player's display name is from the same first party as the client.
	// So if _IsFirstPartyDisplayName is True, we add the logo of the current platform, otherwise, we add the default Ubisoft Connect logo.
	// If crossplay is disabled on the client, no platform logo is added after the display name.
	if (!LibCommonLibsPlatform_IsPC(System) && LibUserStore_IsCrossPlayActive()) {
		if (_IsFirstPartyDisplayName) {
			Name = Name^" "^LibCommonLibsPlatform_GetFirstPartyLogo(System);
		} else {
			Name = Name^" "^LibCommonLibsPlatform_GetFirstPartyLogo(CSystemPlatform::ESystemPlatform::None);
		}
	}

	return Name;
}
Text LibUserStore_GetPlayerName(Text _UserName, Text _ClubTag) {
	return LibUserStore_GetPlayerName(_UserName, _ClubTag, False);
}
Text LibUserStore_GetPlayerName(Text _UserName, Boolean _IsFirstPartyDisplayName) {
	return LibUserStore_GetPlayerName(_UserName, "", _IsFirstPartyDisplayName);
}
Text LibUserStore_GetPlayerName(Text _UserName) {
	return LibUserStore_GetPlayerName(_UserName, "", False);
}
Text LibUserStore_GetPlayerName(CUser _User, Boolean _IsClubTagNeeded) {
	if (_User == Null) return "";
	if (_IsClubTagNeeded) return LibUserStore_GetPlayerName(_User.Name, _User.ClubTag, _User.IsFirstPartyDisplayName);
	return LibUserStore_GetPlayerName(_User.Name, _User.IsFirstPartyDisplayName);
}
Text LibUserStore_GetPlayerName(CUser _User) {
	return LibUserStore_GetPlayerName(_User, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Return the formatted player name from account id
Text LibUserStore_GetUserMgrPlayerName(Text _AccountId) {
	if (_AccountId == "") return "";
	declare Boolean IsFirstPartyDisplayName;
	declare Text DisplayName = UserMgr.FindDisplayName(_AccountId, IsFirstPartyDisplayName);
	return LibUserStore_GetPlayerName(DisplayName, IsFirstPartyDisplayName);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_VerifyCrossPlayActivation() {
	SendCustomEvent(LibUserStore_C_Action_VerifyCrossPlayActivation, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_SetCrossPlaySettingEnabled(Boolean _IsEnabled) {
	declare Text IsEnabled = "0";
	if (_IsEnabled) IsEnabled = "1";
	SendCustomEvent(LibUserStore_C_Action_SetCrossPlaySettingEnabled, [IsEnabled]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_UpdateUserTrophyRankings(LibLeaderboardAPI_K_ResponseFromGetPlayerTrophyRanking _UserTrophyRankings) {
	SendCustomEvent(LibUserStore_C_Action_SetUserTrophyRankings, [_UserTrophyRankings.tojson()]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_UpdatePlayerProgression(Text _ModeName, LibStructuresMatchmaking_K_PlayerProgression _PlayerProgression) {
	SendCustomEvent(LibUserStore_C_Action_SetMatchmakingPlayerProgression, [_ModeName, _PlayerProgression.tojson()]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_UpdateDivisions(Text _ModeName, LibStructuresMatchmaking_K_Division[Text] _Divisions) {
	SendCustomEvent(LibUserStore_C_Action_SetMatchmakingDivisions, [_ModeName, _Divisions.tojson()]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_UpdateGameSubscriptionPlan() {
	SendCustomEvent(LibUserStore_C_Action_UpdateGameSubscriptionPlan, []);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_SetOfflineMode(Boolean _IsOffline) {
	declare Text IsOffline = "0";
	if (_IsOffline) IsOffline = "1";
	SendCustomEvent(LibUserStore_C_Action_SetOfflineMode, [IsOffline]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_LoadUserTrophyRankings(Text _AccountId) {
	SendCustomEvent(LibUserStore_C_Action_LoadUserTrophyRankings, [_AccountId]);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void LibUserStore_Action_LoadMatchmakingInfos(Text _AccountId) {
	SendCustomEvent(LibUserStore_C_Action_LoadMatchmakingInfos, [_AccountId]);
}

***MainInit***
***
LibCommonStore_Subscribe(LibUserStore_C_StoreId);
***

// */
// @Component end lib-user-store

// @Component start component-loadingspinner
// /*

declare CMlQuad[] ComponentLoadingSpinner_G_LoadingQuads;
declare Integer[CMlQuad] ComponentLoadingSpinner_G_DelayedLoadings;

Void ComponentLoadingSpinner_Private_UpdateLabel(CMlFrame _FrameInstance, CMlLabel _Label_Loading) {
	declare Text ComponentLoadingSpinner_OverrideLabel for _FrameInstance;
	_Label_Loading.Visible = (ComponentLoadingSpinner_OverrideLabel != "" || _FrameInstance.DataAttributeExists("label"));
	if (_Label_Loading.Visible) {
		if (ComponentLoadingSpinner_OverrideLabel != "") {
			_Label_Loading.SetText(ComponentLoadingSpinner_OverrideLabel);
		} else {
			_Label_Loading.SetText(_FrameInstance.DataAttributeGet("label"));
		}
		ComponentMenuLibsTools_FitLabelValue(_Label_Loading, 5., 2.5, .5);
	}

	declare Integer LabelSide = ComponentLoadingSpinner_C_LabelSide_Center;
	if (_FrameInstance.DataAttributeExists("label-side")) {
		LabelSide = ComponentLoadingSpinner_TL::ToInteger(_FrameInstance.DataAttributeGet("label-side"));
	}
	switch (LabelSide) {
		case ComponentLoadingSpinner_C_LabelSide_Left: {
			_Label_Loading.RelativePosition_V3.X = -15.;
			_Label_Loading.RelativePosition_V3.Y = 0.;
			_Label_Loading.HorizontalAlign = CMlControl::AlignHorizontal::Right;
		}
		case ComponentLoadingSpinner_C_LabelSide_Right: {
			_Label_Loading.RelativePosition_V3.X = 15.;
			_Label_Loading.RelativePosition_V3.Y = 0.;
			_Label_Loading.HorizontalAlign = CMlControl::AlignHorizontal::Left;
		}
		default: {
			// Same as C_LabelSide_Center
			_Label_Loading.RelativePosition_V3.X = 0.;
			_Label_Loading.RelativePosition_V3.Y = -15.;
			_Label_Loading.HorizontalAlign = CMlControl::AlignHorizontal::HCenter;
		}
	}

	if (_FrameInstance.DataAttributeExists("label-textfont")) {
		_Label_Loading.TextFont = _FrameInstance.DataAttributeGet("label-textfont");
	}
}

Void ComponentLoadingSpinner_Private_StartQuadAnimation(CMlQuad _Quad_Loading) {
	if (!_Quad_Loading.Visible) {
		_Quad_Loading.RelativeRotation = 0.;
	}
	if (!ComponentLoadingSpinner_G_LoadingQuads.exists(_Quad_Loading)) {
		ComponentLoadingSpinner_G_LoadingQuads.add(_Quad_Loading);
	}
	_Quad_Loading.Show();
}

Void ComponentLoadingSpinner_SetLabel(CMlControl _FrameInstance, Text _Label) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlFrame FrameInstance = (_FrameInstance as CMlFrame);
	declare CMlLabel Label_Loading = (FrameInstance.GetFirstChild("ComponentLoadingSpinner_label-loading") as CMlLabel);

	declare Text ComponentLoadingSpinner_OverrideLabel for FrameInstance;
	ComponentLoadingSpinner_OverrideLabel = _Label;

	ComponentLoadingSpinner_Private_UpdateLabel(FrameInstance, Label_Loading);
}


Void ComponentLoadingSpinner_StartAnimation(CMlControl _FrameInstance) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlFrame FrameInstance = (_FrameInstance as CMlFrame);
	declare CMlQuad Quad_Loading = (FrameInstance.GetFirstChild("ComponentLoadingSpinner_quad-loading") as CMlQuad);
	declare CMlLabel Label_Loading = (FrameInstance.GetFirstChild("ComponentLoadingSpinner_label-loading") as CMlLabel);
	if (Quad_Loading == Null || Label_Loading == Null) return;

	if (_FrameInstance.DataAttributeExists("color")) {
		Quad_Loading.ModulateColor = ComponentLoadingSpinner_CL::HexToRgb(_FrameInstance.DataAttributeGet("color"));
	}
	if (_FrameInstance.DataAttributeExists("opacity")) {
		AnimMgr.Flush(Quad_Loading);
		Quad_Loading.Opacity = ComponentLoadingSpinner_TL::ToReal(_FrameInstance.DataAttributeGet("opacity"));
	}

	declare Integer Delay = 0;
	if (_FrameInstance.DataAttributeExists("delay")) {
		Delay = ComponentLoadingSpinner_TL::ToInteger(_FrameInstance.DataAttributeGet("delay"));
	}

	if (Delay <= 0) {
		ComponentLoadingSpinner_Private_StartQuadAnimation(Quad_Loading);
	} else if (!ComponentLoadingSpinner_G_DelayedLoadings.existskey(Quad_Loading) && !ComponentLoadingSpinner_G_LoadingQuads.exists(Quad_Loading)) {
		ComponentLoadingSpinner_G_DelayedLoadings[Quad_Loading] = Now + Delay;
	}
	declare Boolean ComponentLoadingSpinner_IsLoading for _FrameInstance = False;
	ComponentLoadingSpinner_IsLoading = True;

	ComponentLoadingSpinner_Private_UpdateLabel(FrameInstance, Label_Loading);
}
Void ComponentLoadingSpinner_StartAnimation(CMlControl _FrameInstance, Text _Label) {
	ComponentLoadingSpinner_SetLabel(_FrameInstance, _Label);
	ComponentLoadingSpinner_StartAnimation(_FrameInstance);
}

Void ComponentLoadingSpinner_StopAnimation(CMlControl _FrameInstance) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlFrame FrameInstance = (_FrameInstance as CMlFrame);
	declare Boolean ComponentLoadingSpinner_IsLoading for _FrameInstance = False;
	ComponentLoadingSpinner_IsLoading = False;

	declare CMlQuad Quad_Loading = (FrameInstance.GetFirstChild("ComponentLoadingSpinner_quad-loading") as CMlQuad);
	declare CMlLabel Label_Loading = (FrameInstance.GetFirstChild("ComponentLoadingSpinner_label-loading") as CMlLabel);
	if (Quad_Loading == Null || Label_Loading == Null) return;

	ComponentLoadingSpinner_G_LoadingQuads.remove(Quad_Loading);
	ComponentLoadingSpinner_G_DelayedLoadings.removekey(Quad_Loading);
	Quad_Loading.Hide();
	Label_Loading.Hide();
}

Void ComponentLoadingSpinner_SetIsLoading(CMlControl _FrameInstance, Boolean _IsLoading) {
	if (_IsLoading) {
		ComponentLoadingSpinner_StartAnimation(_FrameInstance);
	} else {
		ComponentLoadingSpinner_StopAnimation(_FrameInstance);
	}
}

Boolean ComponentLoadingSpinner_IsLoading(CMlControl _FrameInstance) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");

	declare Boolean ComponentLoadingSpinner_IsLoading for _FrameInstance = False;
	return ComponentLoadingSpinner_IsLoading;
}

Void ComponentLoadingSpinner_SetColor(CMlControl _FrameInstance, Vec3 _Color) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	_FrameInstance.DataAttributeSet("color", ComponentLoadingSpinner_CL::RgbToHex6(_Color));

	declare CMlQuad Quad_Loading = ((_FrameInstance as CMlFrame).GetFirstChild("ComponentLoadingSpinner_quad-loading") as CMlQuad);
	Quad_Loading.ModulateColor = _Color;
}

Void ComponentLoadingSpinner_SetOpacity(CMlControl _FrameInstance, Real _Opacity) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare Real Opacity = ComponentLoadingSpinner_ML::Clamp(_Opacity, 0., 1.);
	_FrameInstance.DataAttributeSet("opacity", ""^Opacity);
	((_FrameInstance as CMlFrame).GetFirstChild("ComponentLoadingSpinner_quad-loading") as CMlQuad).Opacity = Opacity;
}

Void ComponentLoadingSpinner_Fade(CMlControl _FrameInstance, Real _Opacity, Integer _FadeDuration) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	declare CMlFrame Frame_Loading <=> (_FrameInstance as CMlFrame);
	declare CMlQuad Quad_Loading <=> (Frame_Loading.GetFirstChild("ComponentLoadingSpinner_quad-loading") as CMlQuad);
	declare CMlLabel Label_Loading <=> (Frame_Loading.GetFirstChild("ComponentLoadingSpinner_label-loading") as CMlLabel);

	AnimMgr.Flush(Quad_Loading);
	AnimMgr.Flush(Label_Loading);
	if (_FadeDuration > 0) {
		AnimMgr.Add(Quad_Loading, "<anim opacity=\""^_Opacity^"\" />", _FadeDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(Label_Loading, "<anim opacity=\""^_Opacity^"\" />", _FadeDuration, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		Quad_Loading.Opacity = _Opacity;
		Label_Loading.Opacity = _Opacity;
	}
}

Void ComponentLoadingSpinner_SetDelay(CMlControl _FrameInstance, Integer _Delay) {
	assert(_FrameInstance != Null, "Frame instance of loading spinner is Null");
	assert((_FrameInstance is CMlFrame), "Frame instance of loading spinner is not a CMlFrame");

	_FrameInstance.DataAttributeSet("delay", ""^_Delay);
}

***MainInit***
***
ComponentLoadingSpinner_G_LoadingQuads = [];
ComponentLoadingSpinner_G_DelayedLoadings = [];
***

***MainLoop***
***
foreach (LoadingQuad in ComponentLoadingSpinner_G_LoadingQuads) {
	if (LoadingQuad.Visible) {
		LoadingQuad.RelativeRotation = -ComponentLoadingSpinner_ML::Mod(Now*0.2, 0., 360.);
	}
}
if (ComponentLoadingSpinner_G_DelayedLoadings.count > 0) {
	declare TmpDelayedLoadings = ComponentLoadingSpinner_G_DelayedLoadings;
	foreach (Quad_Loading => LoadingStartTime in TmpDelayedLoadings) {
		if (Now >= LoadingStartTime) {
			if (!ComponentLoadingSpinner_G_LoadingQuads.exists(Quad_Loading)) {
				ComponentLoadingSpinner_Private_StartQuadAnimation(Quad_Loading);
			}
			ComponentLoadingSpinner_G_DelayedLoadings.removekey(Quad_Loading);
		}
	}
}
***

// */
// @Component end component-loadingspinner

// @Component start component-tmnext-button
// /*

declare CMlQuad[] ComponentTMNextButton_G_QuadBlinking;
declare Boolean ComponentTMNextButton_G_ResetBlink;
declare Vec3 ComponentTMNextButton_G_DefaultColorFocus;
declare ComponentTMNextButton_K_DelayedState[Ident] ComponentTMNextButton_G_DelayedStates;

Void ComponentTMNextButton_Private_SetOpacity(CMlControl _Control, Real _Opacity, Boolean _IsAnimated) {
	AnimMgr.Flush(_Control);
	if (_IsAnimated) {
		AnimMgr.Add(_Control, "<anim opacity=\""^_Opacity^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	} else {
		switchtype (_Control) {
			case CMlQuad: (_Control as CMlQuad).Opacity = _Opacity;
			case CMlLabel: (_Control as CMlLabel).Opacity = _Opacity;
			default: assert(False, "Invalid control class");
		}
	}
}

Void ComponentTMNextButton_Focus(CMlFrame _Frame_Button, Boolean _IsAnimated) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	if (!ComponentTMNextButton_Properties.IsButton || ComponentTMNextButton_Properties.IsLocked) return;

	declare Label_Value <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_label-value") as CMlLabel);
	declare Quad_Image <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-image") as CMlQuad);
	declare Quad_Gradient <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-gradient") as CMlQuad);
	declare Quad_Contour <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-contour") as CMlQuad);
	declare Quad_Icon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-icon") as CMlQuad);
	declare Quad_FocusIcon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-icon") as CMlQuad);
	declare Quad_FocusBackground <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-background") as CMlQuad);
	declare Spinner_Loading <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_spinner-loading") as CMlFrame);

	Quad_FocusIcon.Show();
	Quad_FocusBackground.Visible = ((ComponentTMNextButton_Properties.Background.FocusColor != ComponentTMNextButton_G_DefaultColorFocus || ComponentTMNextButton_Properties.Background.ImageFocus != "") && !ComponentTMNextButton_Properties.IsBgEmpty);
	Quad_Image.Visible = (!Quad_FocusBackground.Visible || ComponentTMNextButton_Properties.Background.ImageFocus != ComponentTMNextButton_Properties.Background.Image) && !ComponentTMNextButton_Properties.IsBgEmpty;
	Quad_Icon.Visible = !Quad_FocusIcon.Visible;

	if (ComponentTMNextButton_Properties.IsBlink) {
		if (Quad_FocusBackground.Visible) {
			ComponentTMNextButton_G_QuadBlinking.add(Quad_FocusBackground);
		}
		if (ComponentTMNextButton_Properties.Background.ContourImage != "") {
			ComponentTMNextButton_G_QuadBlinking.add(Quad_Contour);
		}
		ComponentTMNextButton_G_ResetBlink = True;
	} else {
		ComponentTMNextButton_G_QuadBlinking = [];
	}

	ComponentTMNextButton_Private_SetOpacity(Label_Value, 1., _IsAnimated);

	if (Quad_FocusBackground.Visible) {
		Label_Value.TextColor = ComponentMenuLibsTools_GetVisibleColorOnBackground(ComponentTMNextButton_Properties.Background.FocusColor, ComponentTMNextButton_Properties.Label.FocusColor);
		if (ComponentTMNextButton_Properties.Background.ImageFocusOpacity != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_FocusBackground, ComponentTMNextButton_Properties.Background.ImageFocusOpacity, _IsAnimated);
			Quad_Image.Opacity = ComponentTMNextButton_Properties.Background.ImageFocusOpacity;
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_FocusBackground, ComponentTMNextButton_Properties.Background.Opacity, _IsAnimated);
			Quad_Image.Opacity = ComponentTMNextButton_Properties.Background.Opacity;
		}
	} else {
		Label_Value.TextColor = ComponentMenuLibsTools_GetVisibleColorOnBackground(ComponentTMNextButton_Properties.Background.Color, ComponentTMNextButton_Properties.Label.FocusColor);
		if (ComponentTMNextButton_Properties.Background.ImageFocusOpacity != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Image, ComponentTMNextButton_Properties.Background.ImageFocusOpacity, _IsAnimated);
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_Image, ComponentTMNextButton_Properties.Background.Opacity, _IsAnimated);
		}
	}

	if (Quad_FocusIcon.Visible) {
		if (ComponentTMNextButton_Properties.Icon.ImageFocusOpacity != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_FocusIcon, ComponentTMNextButton_Properties.Icon.ImageFocusOpacity, _IsAnimated);
			Quad_Icon.Opacity = ComponentTMNextButton_Properties.Icon.ImageFocusOpacity;
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_FocusIcon, ComponentTMNextButton_Properties.Icon.Opacity, _IsAnimated);
			Quad_Icon.Opacity = ComponentTMNextButton_Properties.Icon.Opacity;
		}
	} else {
		if (ComponentTMNextButton_Properties.Icon.ImageFocusOpacity != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Icon, ComponentTMNextButton_Properties.Icon.ImageFocusOpacity, _IsAnimated);
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_Icon, ComponentTMNextButton_Properties.Icon.Opacity, _IsAnimated);
		}
	}
	if (ComponentTMNextButton_Properties.Icon.ImageFocusOpacity != -1.) {
		if (_IsAnimated) {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.ImageFocusOpacity, 250);
		} else {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.ImageFocusOpacity, 0);
		}
	} else {
		if (_IsAnimated) {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.Opacity, 250);
		} else {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.Opacity, 0);
		}
	}

	if (Quad_Gradient.Visible) {
		if (ComponentTMNextButton_Properties.Background.GradientOpacityFocus != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Gradient, ComponentTMNextButton_Properties.Background.GradientOpacityFocus, _IsAnimated);
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_Gradient, ComponentTMNextButton_Properties.Background.Opacity, _IsAnimated);
		}
	}

	if (Quad_Contour.Visible) {
		if (ComponentTMNextButton_Properties.Background.ContourOpacityFocus != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Contour, ComponentTMNextButton_Properties.Background.ContourOpacityFocus, _IsAnimated);
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_Contour, ComponentTMNextButton_Properties.Background.Opacity, _IsAnimated);
		}
	}

	ComponentTMNextButton_Properties.IsFocused = True;
}
Void ComponentTMNextButton_Focus(CMlFrame _Frame_Button) {
	ComponentTMNextButton_Focus(_Frame_Button, True);
}

Void ComponentTMNextButton_Unfocus(CMlFrame _Frame_Button, Boolean _IsAnimated) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	if (!ComponentTMNextButton_Properties.IsButton || ComponentTMNextButton_Properties.IsLocked) return;

	declare Label_Value <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_label-value") as CMlLabel);
	declare Quad_Image <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-image") as CMlQuad);
	declare Quad_Gradient <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-gradient") as CMlQuad);
	declare Quad_Contour <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-contour") as CMlQuad);
	declare Quad_Icon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-icon") as CMlQuad);
	declare Quad_FocusIcon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-icon") as CMlQuad);
	declare Quad_FocusBackground <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-background") as CMlQuad);
	declare Spinner_Loading <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_spinner-loading") as CMlFrame);

	Quad_Icon.Show();
	Quad_Image.Visible = !ComponentTMNextButton_Properties.IsBgEmpty;
	Quad_FocusBackground.Hide();
	Quad_FocusIcon.Hide();
	Label_Value.TextColor = ComponentTMNextButton_Properties.Label.Color;

	ComponentTMNextButton_G_QuadBlinking = [];

	if (ComponentTMNextButton_Properties.Icon.OpacityUnfocus != -1.) {
		ComponentTMNextButton_Private_SetOpacity(Quad_Icon, ComponentTMNextButton_Properties.Icon.OpacityUnfocus, _IsAnimated);
		ComponentTMNextButton_Private_SetOpacity(Quad_FocusIcon, ComponentTMNextButton_Properties.Icon.OpacityUnfocus, _IsAnimated);
		if (_IsAnimated) {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.OpacityUnfocus, 250);
		} else {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.OpacityUnfocus, 0);
		}
	} else if (ComponentTMNextButton_Properties.OpacityUnfocus != -1.) {
		ComponentTMNextButton_Private_SetOpacity(Quad_Icon, ComponentTMNextButton_Properties.OpacityUnfocus, _IsAnimated);
		ComponentTMNextButton_Private_SetOpacity(Quad_FocusIcon, ComponentTMNextButton_Properties.OpacityUnfocus, _IsAnimated);
		if (_IsAnimated) {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.OpacityUnfocus, 250);
		} else {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.OpacityUnfocus, 0);
		}
	} else {
		ComponentTMNextButton_Private_SetOpacity(Quad_Icon, ComponentTMNextButton_Properties.Icon.Opacity, _IsAnimated);
		ComponentTMNextButton_Private_SetOpacity(Quad_FocusIcon, ComponentTMNextButton_Properties.Icon.Opacity, _IsAnimated);
		if (_IsAnimated) {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.Opacity, 250);
		} else {
			ComponentLoadingSpinner_Fade(Spinner_Loading, ComponentTMNextButton_Properties.Icon.Opacity, 0);
		}
	}

	if (ComponentTMNextButton_Properties.Background.OpacityUnfocus != -1.) {
		ComponentTMNextButton_Private_SetOpacity(Quad_Image, ComponentTMNextButton_Properties.Background.OpacityUnfocus, _IsAnimated);
		ComponentTMNextButton_Private_SetOpacity(Quad_FocusBackground, ComponentTMNextButton_Properties.Background.OpacityUnfocus, _IsAnimated);
	} else if (ComponentTMNextButton_Properties.OpacityUnfocus != -1) {
		ComponentTMNextButton_Private_SetOpacity(Quad_Image, ComponentTMNextButton_Properties.OpacityUnfocus, _IsAnimated);
		ComponentTMNextButton_Private_SetOpacity(Quad_FocusBackground, ComponentTMNextButton_Properties.OpacityUnfocus, _IsAnimated);
	} else {
		ComponentTMNextButton_Private_SetOpacity(Quad_Image, ComponentTMNextButton_Properties.Background.Opacity, _IsAnimated);
		ComponentTMNextButton_Private_SetOpacity(Quad_FocusBackground, ComponentTMNextButton_Properties.Background.Opacity, _IsAnimated);
	}

	if (Quad_Gradient.Visible) {
		if (ComponentTMNextButton_Properties.Background.GradientOpacityUnfocus != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Gradient, ComponentTMNextButton_Properties.Background.GradientOpacityUnfocus, _IsAnimated);
		} else if (ComponentTMNextButton_Properties.Background.OpacityUnfocus != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Gradient, ComponentTMNextButton_Properties.Background.OpacityUnfocus, _IsAnimated);
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_Gradient, ComponentTMNextButton_Properties.OpacityUnfocus, _IsAnimated);
		}
	}

	if (Quad_Contour.Visible) {
		if (ComponentTMNextButton_Properties.Background.ContourOpacityUnfocus != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Contour, ComponentTMNextButton_Properties.Background.ContourOpacityUnfocus, _IsAnimated);
		} else if (ComponentTMNextButton_Properties.Background.OpacityUnfocus != -1.) {
			ComponentTMNextButton_Private_SetOpacity(Quad_Contour, ComponentTMNextButton_Properties.Background.OpacityUnfocus, _IsAnimated);
		} else {
			ComponentTMNextButton_Private_SetOpacity(Quad_Contour, ComponentTMNextButton_Properties.OpacityUnfocus, _IsAnimated);
		}
	}

	if (ComponentTMNextButton_Properties.Label.OpacityUnfocus == -1.) {
		ComponentTMNextButton_Private_SetOpacity(Label_Value, ComponentTMNextButton_Properties.OpacityUnfocus, _IsAnimated);
	} else {
		ComponentTMNextButton_Private_SetOpacity(Label_Value, ComponentTMNextButton_Properties.Label.OpacityUnfocus, _IsAnimated);
	}

	ComponentTMNextButton_Properties.IsFocused = False;
}
Void ComponentTMNextButton_Unfocus(CMlFrame _Frame_Button) {
	ComponentTMNextButton_Unfocus(_Frame_Button, True);
}

Void ComponentTMNextButton_Lock(CMlFrame _Frame_Button, Boolean _IsLocked) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	if (!ComponentTMNextButton_Properties.IsButton) return;

	declare CMlFrame Frame_Align <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_frame-align") as CMlFrame);
	declare CMlLabel Label_Value <=> (Frame_Align.GetFirstChild("ComponentTMNextButton_label-value") as CMlLabel);
	declare CMlQuad Quad_Icon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-icon") as CMlQuad);
	declare CMlQuad Quad_Image <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-image") as CMlQuad);
	declare CMlQuad Quad_Gradient <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-gradient") as CMlQuad);
	declare CMlQuad Quad_Contour <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-contour") as CMlQuad);
	declare CMlQuad Quad_FocusIcon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-icon") as CMlQuad);
	declare CMlQuad Quad_FocusBackground <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-background") as CMlQuad);

	ComponentTMNextButton_G_QuadBlinking = [];
	Quad_FocusBackground.Visible = False;
	Quad_FocusIcon.Visible = False;
	if (_IsLocked) {
		Quad_Icon.Opacity = .5;
		Quad_Image.Opacity = .5;
		Quad_Gradient.Opacity = .5;
		Quad_Contour.Opacity = .5;
		Label_Value.Opacity = .5;
	} else {
		if (ComponentTMNextButton_Properties.Icon.OpacityUnfocus == -1.) {
			Quad_Icon.Opacity = ComponentTMNextButton_Properties.OpacityUnfocus;
		} else {
			Quad_Icon.Opacity = ComponentTMNextButton_Properties.Icon.OpacityUnfocus;
		}
		if (ComponentTMNextButton_Properties.Background.OpacityUnfocus == -1.) {
			Quad_Image.Opacity = ComponentTMNextButton_Properties.OpacityUnfocus;
		} else {
			Quad_Image.Opacity = ComponentTMNextButton_Properties.Background.OpacityUnfocus;
		}
		if (ComponentTMNextButton_Properties.Background.GradientOpacityUnfocus != -1.) {
			Quad_Gradient.Opacity = ComponentTMNextButton_Properties.Background.GradientOpacityUnfocus;
		} else if (ComponentTMNextButton_Properties.Background.OpacityUnfocus != -1.) {
			Quad_Gradient.Opacity = ComponentTMNextButton_Properties.Background.OpacityUnfocus;
		} else {
			Quad_Gradient.Opacity = ComponentTMNextButton_Properties.OpacityUnfocus;
		}
		if (ComponentTMNextButton_Properties.Background.ContourOpacityUnfocus != -1.) {
			Quad_Contour.Opacity = ComponentTMNextButton_Properties.Background.ContourOpacityUnfocus;
		} else if (ComponentTMNextButton_Properties.Background.OpacityUnfocus != -1.) {
			Quad_Contour.Opacity = ComponentTMNextButton_Properties.Background.OpacityUnfocus;
		} else {
			Quad_Contour.Opacity = ComponentTMNextButton_Properties.OpacityUnfocus;
		}
		if (ComponentTMNextButton_Properties.Label.OpacityUnfocus == -1.) {
			Label_Value.Opacity = ComponentTMNextButton_Properties.OpacityUnfocus;
		} else {
			Label_Value.Opacity = ComponentTMNextButton_Properties.Label.OpacityUnfocus;
		}
	}

	ComponentTMNextButton_Properties.IsLocked = _IsLocked;
}

Boolean ComponentTMNextButton_IsButton(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.IsButton;
}

Boolean ComponentTMNextButton_IsButtonTrigger(CMlControl _Control_Trigger) {
	return (_Control_Trigger != Null && _Control_Trigger.ControlId == "ComponentTMNextButton_quad-background");
}

CMlFrame ComponentTMNextButton_GetButtonFromTrigger(CMlControl _Control_Trigger) {
	declare CMlFrame ComponentTMNextButton_ParentButton for _Control_Trigger = Null;
	return ComponentTMNextButton_ParentButton;
}

Void ComponentTMNextButton_UpdateStateDisplay(CMlFrame _Frame_Button, ComponentTMNextButton_K_Properties _Properties) {
	declare CMlFrame Frame_Content <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_frame-content") as CMlFrame);
	declare CMlFrame Spinner_Loading <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_spinner-loading") as CMlFrame);
	Frame_Content.Visible = (_Properties.State == ComponentTMNextButton_C_State_Normal);
	if (_Properties.State == ComponentTMNextButton_C_State_Loading) {
		if (!ComponentLoadingSpinner_IsLoading(Spinner_Loading)) {
			ComponentLoadingSpinner_StartAnimation(Spinner_Loading);
		}
	} else {
		ComponentLoadingSpinner_StopAnimation(Spinner_Loading);
	}
}

Void ComponentTMNextButton_ApplyProperties(CMlFrame _Frame_Button, ComponentTMNextButton_K_Properties _Properties) {
	declare CMlFrame Frame_Align <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_frame-align") as CMlFrame);
	declare CMlQuad Quad_Icon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-icon") as CMlQuad);
	declare CMlFrame Frame_HitboxClip <=> (_Frame_Button.GetFirstChild("frame-hitbox-clip") as CMlFrame);
	declare CMlQuad Quad_Hitbox <=> (Frame_HitboxClip.GetFirstChild("ComponentTMNextButton_quad-background") as CMlQuad);
	declare CMlQuad Quad_Image <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-image") as CMlQuad);
	declare CMlQuad Quad_Gradient <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-gradient") as CMlQuad);
	declare CMlQuad Quad_Contour <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-contour") as CMlQuad);
	declare CMlQuad Quad_FocusIcon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-icon") as CMlQuad);
	declare CMlQuad Quad_FocusBackground <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-background") as CMlQuad);
	declare CMlLabel Label_Value <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_label-value") as CMlLabel);
	declare CMlFrame Spinner_Loading <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_spinner-loading") as CMlFrame);

	Label_Value.Value = _Properties.Label.Value;
	Label_Value.TextSizeReal = _Properties.Label.TextSize;
	Label_Value.TextPrefix = _Properties.Label.TextPrefix;
	Label_Value.TextFont = _Properties.Label.Font;
	Label_Value.HorizontalAlign = ComponentMenuLibsTools_TextToHAlign(_Properties.Label.HAlign);
	Label_Value.VerticalAlign = ComponentMenuLibsTools_TextToVAlign(_Properties.Label.VAlign);
	Label_Value.MaxLine = _Properties.Label.MaxLine;
	Label_Value.AutoNewLine = _Properties.Label.AutoNewLine;
	if (_Properties.IsFocused) {
		if (Quad_FocusBackground.Visible) {
			Label_Value.TextColor = ComponentMenuLibsTools_GetVisibleColorOnBackground(_Properties.Background.FocusColor, _Properties.Label.FocusColor);
		} else {
			Label_Value.TextColor = ComponentMenuLibsTools_GetVisibleColorOnBackground(_Properties.Background.Color, _Properties.Label.FocusColor);
		}
	} else {
		Label_Value.TextColor = _Properties.Label.Color;
	}

	Quad_Gradient.Visible = _Properties.Background.GradientImage != "";
	if (_Properties.Background.GradientImage != "") {
		Quad_Gradient.ChangeImageUrl(_Properties.Background.GradientImage);
		Quad_Gradient.KeepRatio = _Properties.Background.KeepRatio;
		switch (_Properties.Background.ColorType) {
			case ComponentTMNextButton_C_ColorType_ModulateColor: Quad_Gradient.ModulateColor = _Properties.Background.GradientColor;
			case ComponentTMNextButton_C_ColorType_Colorize: Quad_Gradient.Colorize = _Properties.Background.GradientColor;
			case ComponentTMNextButton_C_ColorType_None: {
				if (_Properties.Background.GradientColor != <-1., -1., -1.>) {
					Quad_Gradient.Colorize = _Properties.Background.GradientColor;
				} else {
					Quad_Gradient.Colorize = <-1., -1., -1.>; //< Sets the quad in Colorize mode and resets ModulateColor as well
				}
			}
		}
		Quad_Gradient.SuperSample = (_Properties.SuperSample && Quad_Gradient.ImageUrl != "" && Quad_Gradient.Colorize != <-1., -1., -1.>);
		if (_Properties.AlphaMask != "") {
			Quad_Gradient.AlphaMaskUrl = _Properties.AlphaMask;
		}
		if (_Properties.IsFocused) {
			if (_Properties.Background.GradientOpacityFocus != -1.) {
				Quad_Gradient.Opacity = _Properties.Background.GradientOpacityFocus;
			} else {
				Quad_Gradient.Opacity = _Properties.Background.Opacity;
			}
		} else {
			if (_Properties.Background.GradientOpacityUnfocus != -1.) {
				Quad_Gradient.Opacity = _Properties.Background.GradientOpacityUnfocus;
			} else if (_Properties.Background.OpacityUnfocus != -1.) {
				Quad_Gradient.Opacity = _Properties.Background.OpacityUnfocus;
			} else {
				Quad_Gradient.Opacity = _Properties.OpacityUnfocus;
			}
		}
	} else {
		Quad_Gradient.SuperSample = False;
	}

	Quad_Contour.Visible = _Properties.Background.ContourImage != "";
	if (_Properties.Background.ContourImage != "") {
		Quad_Contour.ChangeImageUrl(_Properties.Background.ContourImage);
		Quad_Contour.KeepRatio = _Properties.Background.KeepRatio;
		switch (_Properties.Background.ColorType) {
			case ComponentTMNextButton_C_ColorType_ModulateColor: Quad_Contour.ModulateColor = _Properties.Background.ContourColor;
			case ComponentTMNextButton_C_ColorType_Colorize: Quad_Contour.Colorize = _Properties.Background.ContourColor;
			case ComponentTMNextButton_C_ColorType_None: {
				if (_Properties.Background.ContourColor != <-1., -1., -1.>) {
					Quad_Contour.Colorize = _Properties.Background.ContourColor;
				} else {
					Quad_Contour.Colorize = <-1., -1., -1.>; //< Sets the quad in Colorize mode and resets ModulateColor as well
				}
			}
		}
		Quad_Contour.SuperSample = (_Properties.SuperSample && Quad_Contour.ImageUrl != "" && Quad_Contour.Colorize != <-1., -1., -1.>);
		if (_Properties.AlphaMask != "") {
			Quad_Contour.AlphaMaskUrl = _Properties.AlphaMask;
		}
		if (_Properties.IsFocused) {
			if (_Properties.Background.ContourOpacityFocus != -1.) {
				Quad_Contour.Opacity = _Properties.Background.ContourOpacityFocus;
			} else {
				Quad_Contour.Opacity = _Properties.Background.Opacity;
			}
		} else {
			if (_Properties.Background.ContourOpacityUnfocus != -1.) {
				Quad_Contour.Opacity = _Properties.Background.ContourOpacityUnfocus;
			} else if (_Properties.Background.OpacityUnfocus != -1.) {
				Quad_Contour.Opacity = _Properties.Background.OpacityUnfocus;
			} else {
				Quad_Contour.Opacity = _Properties.OpacityUnfocus;
			}
		}
	} else {
		Quad_Contour.SuperSample = False;
	}

	Quad_Image.Visible = !_Properties.IsBgEmpty;
	if (!_Properties.IsBgEmpty) {
		Quad_Image.BgColor = _Properties.Background.Color;
		Quad_Image.ChangeImageUrl(_Properties.Background.Image);
		Quad_Image.KeepRatio = _Properties.Background.KeepRatio;
		switch (_Properties.Background.ColorType) {
			case ComponentTMNextButton_C_ColorType_ModulateColor: Quad_Image.ModulateColor = _Properties.Background.Color;
			case ComponentTMNextButton_C_ColorType_Colorize:	Quad_Image.Colorize = _Properties.Background.Color;
			case ComponentTMNextButton_C_ColorType_None: Quad_Image.Colorize = <-1., -1., -1.>; //< Sets the quad in Colorize mode and resets ModulateColor as well
		}
		Quad_Image.SuperSample = (_Properties.SuperSample && Quad_Image.ImageUrl != "" && Quad_Image.Colorize != <-1., -1., -1.>);

		if (_Properties.Background.Image != "") {
			Quad_Image.AlphaMaskUrl = _Properties.AlphaMask;
		}
		if (_Properties.IsFocused) {
			Quad_Image.Opacity = _Properties.Background.Opacity;
		} else {
			if (_Properties.Background.OpacityUnfocus == -1.) {
				Quad_Image.Opacity = _Properties.OpacityUnfocus;
			} else {
				Quad_Image.Opacity = _Properties.Background.OpacityUnfocus;
			}
		}
	} else {
		Quad_Image.SuperSample = False;
	}

	if ((_Properties.Background.FocusColor == ComponentTMNextButton_G_DefaultColorFocus || _Properties.Background.ImageFocus == "") && _Properties.IsBgEmpty) {
		Quad_FocusBackground.Visible = False;
		Quad_FocusBackground.SuperSample = False;
	} else {
		Quad_FocusBackground.BgColor = _Properties.Background.FocusColor;
		Quad_FocusBackground.ChangeImageUrl(_Properties.Background.ImageFocus);
		Quad_FocusBackground.KeepRatio = _Properties.Background.KeepRatio;

		switch (_Properties.Background.ColorType) {
			case ComponentTMNextButton_C_ColorType_ModulateColor: Quad_FocusBackground.ModulateColor = _Properties.Background.FocusColor;
			case ComponentTMNextButton_C_ColorType_Colorize: Quad_FocusBackground.Colorize = _Properties.Background.FocusColor;
			case ComponentTMNextButton_C_ColorType_None: Quad_FocusBackground.Colorize = <-1., -1., -1.>; //< Sets the quad in Colorize mode and resets ModulateColor as well
		}

		Quad_FocusBackground.SuperSample = (_Properties.SuperSample && Quad_FocusBackground.ImageUrl != "" && Quad_FocusBackground.Colorize != <-1., -1., -1.>);

		if (_Properties.Background.ImageFocus != "") {
			Quad_FocusBackground.AlphaMaskUrl = _Properties.AlphaMask;
		}
		if (_Properties.IsFocused) {
			if (_Properties.Background.ImageFocusOpacity == -1.) {
				Quad_FocusBackground.Opacity = _Properties.Background.Opacity;
			} else {
				Quad_FocusBackground.Opacity = _Properties.Background.ImageFocusOpacity;
			}
		} else {
			if (_Properties.Background.OpacityUnfocus == -1.) {
				Quad_FocusBackground.Opacity = _Properties.OpacityUnfocus;
			} else {
				Quad_FocusBackground.Opacity = _Properties.Background.OpacityUnfocus;
			}
		}
	}

	Quad_Icon.Parent.Visible = _Properties.Icon.Image != "";
	if (_Properties.Icon.Image != "") {
		Quad_Icon.BgColor = _Properties.Icon.Color;
		Quad_FocusIcon.BgColor = _Properties.Icon.FocusColor;
		Quad_Icon.ChangeImageUrl(_Properties.Icon.Image);
		Quad_FocusIcon.ChangeImageUrl(_Properties.Icon.ImageFocus);
		switch (_Properties.Icon.ColorType) {
			case ComponentTMNextButton_C_ColorType_ModulateColor: {
				Quad_Icon.ModulateColor = _Properties.Icon.Color;
				Quad_FocusIcon.ModulateColor = _Properties.Icon.FocusColor;
			}
			case ComponentTMNextButton_C_ColorType_Colorize: {
				Quad_Icon.Colorize = _Properties.Icon.Color;
				Quad_FocusIcon.Colorize = _Properties.Icon.FocusColor;
			}
			case ComponentTMNextButton_C_ColorType_None: {
				Quad_Icon.Colorize = <-1., -1., -1.>; //< Sets the quad in Colorize mode and resets ModulateColor as well
				Quad_FocusIcon.Colorize = <-1., -1., -1.>; //< Sets the quad in Colorize mode and resets ModulateColor as well
			}
		}
		if (_Properties.Icon.Image != "") {
			Quad_Icon.AlphaMaskUrl = _Properties.AlphaMask;
		}
		if (_Properties.Icon.ImageFocus != "") {
			Quad_FocusIcon.AlphaMaskUrl = _Properties.AlphaMask;
		}
		if (_Properties.IsFocused) {
			Quad_FocusIcon.Opacity = _Properties.Icon.Opacity;
		} else {
			if (_Properties.Icon.OpacityUnfocus == -1.) {
				Quad_Icon.Opacity = _Properties.OpacityUnfocus;
			} else {
				Quad_Icon.Opacity = _Properties.Icon.OpacityUnfocus;
			}
		}

	}

	// Size

	declare Vec2 SizeOfReference;
	if (_Properties.SizeHitbox == <-1., -1.>) {
		Quad_Hitbox.Size = _Properties.Background.Size;
		SizeOfReference = _Properties.Background.Size;
	} else {
		Quad_Hitbox.Size = _Properties.SizeHitbox;
		SizeOfReference = _Properties.SizeHitbox;
	}

	if (_Properties.TiltHitbox != 0.) {
		declare Real TiltRad = ComponentTMNextButton_ML::DegToRad(_Properties.TiltHitbox);
		declare Real TiltWidthAtBase = SizeOfReference.Y * ComponentTMNextButton_ML::Tan(TiltRad);
		declare Real CosTiltRad = ComponentTMNextButton_ML::Cos(TiltRad);
		declare Real SinTiltRad = ComponentTMNextButton_ML::Sin(TiltRad);
		Quad_Hitbox.Size.X = (SizeOfReference.X - TiltWidthAtBase) * CosTiltRad;
		if (CosTiltRad == 0.) {
			Quad_Hitbox.Size.Y = 0.;
		} else {
			Quad_Hitbox.Size.Y = (SizeOfReference.Y / CosTiltRad) + ComponentTMNextButton_ML::Abs((SizeOfReference.X - TiltWidthAtBase) * SinTiltRad);
		}
		if (SinTiltRad >= 0.) {
			Quad_Hitbox.VerticalAlign = CMlControl::AlignVertical::Bottom;
			Quad_Hitbox.RelativePosition_V3 = <0., -SizeOfReference.Y>;
		} else {
			Quad_Hitbox.VerticalAlign = CMlControl::AlignVertical::Top;
			Quad_Hitbox.RelativePosition_V3 = <0., 0.>;
		}
		Quad_Hitbox.RelativeRotation = _Properties.TiltHitbox;
		Frame_HitboxClip.Size = SizeOfReference;
	} else {
		Quad_Hitbox.VerticalAlign = CMlControl::AlignVertical::Top;
		Quad_Hitbox.RelativePosition_V3 = <SizeOfReference.X * .5 - Quad_Hitbox.Size.X/2., SizeOfReference.Y * .5 - Quad_Hitbox.Size.Y/2.>;
		Quad_Hitbox.RelativeRotation = 0.;
		Frame_HitboxClip.Size = <0., 0.>; //< This default value disable the clipping
	}

	Quad_Image.Size = _Properties.Background.Size;
	Quad_Gradient.Size = _Properties.Background.Size;
	Quad_Contour.Size = _Properties.Background.Size;
	Quad_FocusBackground.Size = _Properties.Background.Size;

	if (_Properties.Icon.Size == <-1., -1.>) {
		Quad_Icon.Size = SizeOfReference - <5., 5.>;
		Quad_FocusIcon.Size = SizeOfReference - <5., 5.>;
	} else {
		Quad_Icon.Size = _Properties.Icon.Size;
		Quad_FocusIcon.Size = _Properties.Icon.Size;
	}

	Spinner_Loading.RelativeScale = _Properties.Loading.Scale;

	if (_Properties.Label.Size == <-1., -1.>) {
		Label_Value.Size = SizeOfReference - <5., 1.>;
	} else {
		Label_Value.Size = _Properties.Label.Size;
	}

	Label_Value.ItalicSlope = _Properties.Label.ItalicSlope;

	Label_Value.RelativePosition_V3 = <SizeOfReference.X * _Properties.Label.PosX, SizeOfReference.Y * _Properties.Label.PosY>;
	Quad_Icon.RelativePosition_V3 = <SizeOfReference.X * _Properties.Icon.PosX - Quad_Icon.Size.X/2., SizeOfReference.Y * _Properties.Icon.PosY + Quad_Icon.Size.Y/2.>;
	Quad_FocusIcon.RelativePosition_V3 = <SizeOfReference.X * _Properties.Icon.PosX - Quad_Icon.Size.X/2., SizeOfReference.Y * _Properties.Icon.PosY + Quad_Icon.Size.Y/2.>;
	Quad_Image.RelativePosition_V3 = <SizeOfReference.X * .5 - Quad_Image.Size.X/2. + _Properties.Background.PosX, SizeOfReference.Y * -.5 + Quad_Image.Size.Y/2. + _Properties.Background.PosY>;
	Quad_Gradient.RelativePosition_V3 = <SizeOfReference.X * .5 - Quad_Gradient.Size.X/2. + _Properties.Background.PosX, SizeOfReference.Y * -.5 + Quad_Gradient.Size.Y/2. + _Properties.Background.PosY>;
	Quad_Contour.RelativePosition_V3 = <SizeOfReference.X * .5 - Quad_Contour.Size.X/2. + _Properties.Background.PosX, SizeOfReference.Y * -.5 + Quad_Contour.Size.Y/2. + _Properties.Background.PosY>;
	Quad_FocusBackground.RelativePosition_V3 = <SizeOfReference.X * .5 - Quad_FocusBackground.Size.X/2.+ _Properties.Background.PosX, SizeOfReference.Y * -.5 + Quad_FocusBackground.Size.Y/2. + _Properties.Background.PosY>;
	Quad_Icon.RelativeRotation = _Properties.Icon.Rotation;
	Quad_FocusIcon.RelativeRotation = _Properties.Icon.Rotation;
	Spinner_Loading.RelativePosition_V3 = <SizeOfReference.X * _Properties.Loading.PosX, SizeOfReference.Y * _Properties.Icon.PosY>;

	// Align
	ComponentMenuLibsTools_AlignFrame(Frame_Align, SizeOfReference, _Properties.HAlign, _Properties.VAlign);

	// Apply after every other properties are set on the label, especially its size
	if (_Properties.Label.Fit > 0.) {
		ComponentMenuLibsTools_FitLabelValue(Label_Value, _Properties.Label.Fit, _Properties.Label.FitStep);
	}

	if (_Properties.IsFocused) {
		ComponentTMNextButton_Focus(_Frame_Button, False);
	} else {
		ComponentTMNextButton_Unfocus(_Frame_Button, False);
	}

	ComponentTMNextButton_UpdateStateDisplay(_Frame_Button, _Properties);
}
Void ComponentTMNextButton_ApplyProperties(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}

Void ComponentTMNextButton_ShowAndUnlock(CMlFrame _Frame_Button) {
	ComponentNavigation_Lock(_Frame_Button, False);
	_Frame_Button.Show();
}
Void ComponentTMNextButton_HideAndLock(CMlFrame _Frame_Button) {
	ComponentNavigation_Lock(_Frame_Button, True);
	_Frame_Button.Hide();
}
Void ComponentTMNextButton_SetVisibilityAndNavigation(CMlFrame _Frame_Button, Boolean _IsVisible) {
	ComponentNavigation_Lock(_Frame_Button, !_IsVisible);
	_Frame_Button.Visible = _IsVisible;
}

Void ComponentTMNextButton_SetIconColorType(CMlFrame _Frame_Button, Integer _ColorType, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.ColorType = _ColorType;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconColorType(CMlFrame _Frame_Button, Integer _ColorType) {
	ComponentTMNextButton_SetIconColorType(_Frame_Button, _ColorType, True);
}
Void ComponentTMNextButton_SetBgIsEmpty(CMlFrame _Frame_Button, Boolean _IsBgEmpty, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.IsBgEmpty = _IsBgEmpty;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetBgIsEmpty(CMlFrame _Frame_Button, Boolean _IsBgEmpty) {
	ComponentTMNextButton_SetBgIsEmpty(_Frame_Button, _IsBgEmpty, True);
}
Void ComponentTMNextButton_SetIsBlink(CMlFrame _Frame_Button, Boolean _IsBlink, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.IsBlink = _IsBlink;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIsBlink(CMlFrame _Frame_Button, Boolean _IsBlink) {
	ComponentTMNextButton_SetIsBlink(_Frame_Button, _IsBlink, True);
}
Void ComponentTMNextButton_SetAlphaMask(CMlFrame _Frame_Button, Text _AlphaMask, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.AlphaMask = _AlphaMask;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetAlphaMask(CMlFrame _Frame_Button, Text _AlphaMask) {
	ComponentTMNextButton_SetAlphaMask(_Frame_Button, _AlphaMask, True);
}
Void ComponentTMNextButton_SetBgColorType(CMlFrame _Frame_Button, Integer _ColorType, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.ColorType = _ColorType;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetBgColorType(CMlFrame _Frame_Button, Integer _ColorType) {
	ComponentTMNextButton_SetBgColorType(_Frame_Button, _ColorType, True);
}
Void ComponentTMNextButton_SetValue(CMlFrame _Frame_Button, Text _Value, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.Value = _Value;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetValue(CMlFrame _Frame_Button, Text _Value) {
	ComponentTMNextButton_SetValue(_Frame_Button, _Value, True);
}
Void ComponentTMNextButton_SetSize(CMlFrame _Frame_Button, Vec2 _Size, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.Size = _Size;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetSize(CMlFrame _Frame_Button, Vec2 _Size) {
	ComponentTMNextButton_SetSize(_Frame_Button, _Size, True);
}
Void ComponentTMNextButton_SetSizeHitbox(CMlFrame _Frame_Button, Vec2 _SizeHitbox, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.SizeHitbox = _SizeHitbox;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetSizeHitbox(CMlFrame _Frame_Button, Vec2 _SizeHitbox) {
	ComponentTMNextButton_SetSizeHitbox(_Frame_Button, _SizeHitbox, True);
}
Void ComponentTMNextButton_SetTiltHitbox(CMlFrame _Frame_Button, Real _TiltHitbox, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.TiltHitbox = _TiltHitbox;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTiltHitbox(CMlFrame _Frame_Button, Real _TiltHitbox) {
	ComponentTMNextButton_SetTiltHitbox(_Frame_Button, _TiltHitbox, True);
}
Void ComponentTMNextButton_SetBackgroundOpacity(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.Opacity = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetBackgroundOpacity(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetBackgroundOpacity(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.OpacityUnfocus = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetOpacityUnfocus(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetBgColor(CMlFrame _Frame_Button, Vec3 _BgColor, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.Color = _BgColor;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetBgColor(CMlFrame _Frame_Button, Vec3 _BgColor) {
	ComponentTMNextButton_SetBgColor(_Frame_Button, _BgColor, True);
}
Void ComponentTMNextButton_SetFocusColor(CMlFrame _Frame_Button, Vec3 _FocusColor, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.FocusColor = _FocusColor;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetFocusColor(CMlFrame _Frame_Button, Vec3 _FocusColor) {
	ComponentTMNextButton_SetFocusColor(_Frame_Button, _FocusColor, True);
}
Void ComponentTMNextButton_SetTextColor(CMlFrame _Frame_Button, Vec3 _TextColor, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.Color = _TextColor;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextColor(CMlFrame _Frame_Button, Vec3 _TextColor) {
	ComponentTMNextButton_SetTextColor(_Frame_Button, _TextColor, True);
}
Void ComponentTMNextButton_SetTextFocusColor(CMlFrame _Frame_Button, Vec3 _TextColor, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.FocusColor = _TextColor;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextFocusColor(CMlFrame _Frame_Button, Vec3 _TextColor) {
	ComponentTMNextButton_SetTextFocusColor(_Frame_Button, _TextColor, True);
}
Void ComponentTMNextButton_SetTextOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.OpacityUnfocus = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetTextOpacityUnfocus(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetTextSize(CMlFrame _Frame_Button, Real _TextSize, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.TextSize = _TextSize;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextSize(CMlFrame _Frame_Button, Real _TextSize) {
	ComponentTMNextButton_SetTextSize(_Frame_Button, _TextSize, True);
}
Void ComponentTMNextButton_SetTextPrefix(CMlFrame _Frame_Button, Text _TextPrefix, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.TextPrefix = _TextPrefix;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextPrefix(CMlFrame _Frame_Button, Text _TextPrefix) {
	ComponentTMNextButton_SetTextPrefix(_Frame_Button, _TextPrefix, True);
}
Void ComponentTMNextButton_SetTextFont(CMlFrame _Frame_Button, Text _TextFont, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.Font = _TextFont;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextFont(CMlFrame _Frame_Button, Text _TextFont) {
	ComponentTMNextButton_SetTextFont(_Frame_Button, _TextFont, True);
}
Void ComponentTMNextButton_SetTextItalicSlope(CMlFrame _Frame_Button, Real _ItalicSlope, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.ItalicSlope = _ItalicSlope;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextItalicSlope(CMlFrame _Frame_Button, Real _ItalicSlope) {
	ComponentTMNextButton_SetTextItalicSlope(_Frame_Button, _ItalicSlope, True);
}
Void ComponentTMNextButton_SetLabelSize(CMlFrame _Frame_Button, Vec2 _LabelSize, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.Size = _LabelSize;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetLabelSize(CMlFrame _Frame_Button, Vec2 _LabelSize) {
	ComponentTMNextButton_SetLabelSize(_Frame_Button, _LabelSize, True);
}
Void ComponentTMNextButton_SetImage(CMlFrame _Frame_Button, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.Image = _ImageUrl;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetImage(CMlFrame _Frame_Button, Text _ImageUrl) {
	ComponentTMNextButton_SetImage(_Frame_Button, _ImageUrl, True);
}
Void ComponentTMNextButton_SetImageFocus(CMlFrame _Frame_Button, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.ImageFocus = _ImageUrl;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetImageFocus(CMlFrame _Frame_Button, Text _ImageUrl) {
	ComponentTMNextButton_SetImageFocus(_Frame_Button, _ImageUrl, True);
}
Void ComponentTMNextButton_SetImageFocusOpacity(CMlFrame _Frame_Button, Real _ImageFocusOpacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.ImageFocusOpacity = _ImageFocusOpacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetImageFocusOpacity(CMlFrame _Frame_Button, Real _ImageFocusOpacity) {
	ComponentTMNextButton_SetImageFocusOpacity(_Frame_Button, _ImageFocusOpacity, True);
}
Void ComponentTMNextButton_SetImageOffset(CMlFrame _Frame_Button, Vec2 _Offset, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.PosX = _Offset.X;
	ComponentTMNextButton_Properties.Background.PosY = _Offset.Y;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetImageOffset(CMlFrame _Frame_Button, Vec2 _Offset) {
	ComponentTMNextButton_SetImageOffset(_Frame_Button, _Offset, True);
}
Void ComponentTMNextButton_SetImageXOffset(CMlFrame _Frame_Button, Real _XOffset, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.PosX = _XOffset;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetImageXOffset(CMlFrame _Frame_Button, Real _XOffset) {
	ComponentTMNextButton_SetImageXOffset(_Frame_Button, _XOffset, True);
}
Void ComponentTMNextButton_SetImageYOffset(CMlFrame _Frame_Button, Real _YOffset, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.PosY = _YOffset;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetImageYOffset(CMlFrame _Frame_Button, Real _YOffset) {
	ComponentTMNextButton_SetImageYOffset(_Frame_Button, _YOffset, True);
}
Void ComponentTMNextButton_SetIcon(CMlFrame _Frame_Button, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.Image = _ImageUrl;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIcon(CMlFrame _Frame_Button, Text _ImageUrl) {
	ComponentTMNextButton_SetIcon(_Frame_Button, _ImageUrl, True);
}
Void ComponentTMNextButton_SetIconFocus(CMlFrame _Frame_Button, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.ImageFocus = _ImageUrl;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconFocus(CMlFrame _Frame_Button, Text _ImageUrl) {
	ComponentTMNextButton_SetIconFocus(_Frame_Button, _ImageUrl, True);
}
Void ComponentTMNextButton_SetIconColor(CMlFrame _Frame_Button, Vec3 _Color, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.Color = _Color;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconColor(CMlFrame _Frame_Button, Vec3 _Color) {
	ComponentTMNextButton_SetIconColor(_Frame_Button, _Color, True);
}
Void ComponentTMNextButton_SetIconFocusColor(CMlFrame _Frame_Button, Vec3 _Color, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.FocusColor = _Color;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconFocusColor(CMlFrame _Frame_Button, Vec3 _Color) {
	ComponentTMNextButton_SetIconFocusColor(_Frame_Button, _Color, True);
}
Void ComponentTMNextButton_SetIconOpacityFocused(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.Opacity = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconOpacityFocused(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetIconOpacityFocused(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetIconOpacityUnfocused(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.OpacityUnfocus = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconOpacityUnfocused(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetIconOpacityUnfocused(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetIconSize(CMlFrame _Frame_Button, Vec2 _Size, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.Size = _Size;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconSize(CMlFrame _Frame_Button, Vec2 _Size) {
	ComponentTMNextButton_SetIconSize(_Frame_Button, _Size, True);
}
Void ComponentTMNextButton_SetIconXPos(CMlFrame _Frame_Button, Real _IconXPos, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.PosX = _IconXPos;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconXPos(CMlFrame _Frame_Button, Real _IconXPos) {
	ComponentTMNextButton_SetIconXPos(_Frame_Button, _IconXPos, True);
}
Void ComponentTMNextButton_SetIconYPos(CMlFrame _Frame_Button, Real _IconYPos, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.PosY = _IconYPos;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconYPos(CMlFrame _Frame_Button, Real _IconYPos) {
	ComponentTMNextButton_SetIconYPos(_Frame_Button, _IconYPos, True);
}
Void ComponentTMNextButton_SetIconRot(CMlFrame _Frame_Button, Real _Rotation, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Icon.Rotation = _Rotation;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetIconRot(CMlFrame _Frame_Button, Real _Rotation) {
	ComponentTMNextButton_SetIconRot(_Frame_Button, _Rotation, True);
}
Void ComponentTMNextButton_SetTextXPos(CMlFrame _Frame_Button, Real _TextXPos, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.PosX = _TextXPos;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextXPos(CMlFrame _Frame_Button, Real _TextXPos) {
	ComponentTMNextButton_SetTextXPos(_Frame_Button, _TextXPos, True);
}
Void ComponentTMNextButton_SetTextYPos(CMlFrame _Frame_Button, Real _TextYPos, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.PosY = _TextYPos;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextYPos(CMlFrame _Frame_Button, Real _TextYPos) {
	ComponentTMNextButton_SetTextYPos(_Frame_Button, _TextYPos, True);
}
Void ComponentTMNextButton_SetTextHAlign(CMlFrame _Frame_Button, Text _HAlign, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.HAlign = _HAlign;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextHAlign(CMlFrame _Frame_Button, Text _HAlign) {
	ComponentTMNextButton_SetTextHAlign(_Frame_Button, _HAlign, True);
}
Void ComponentTMNextButton_SetTextVAlign(CMlFrame _Frame_Button, Text _VAlign, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.VAlign = _VAlign;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetTextVAlign(CMlFrame _Frame_Button, Text _VAlign) {
	ComponentTMNextButton_SetTextVAlign(_Frame_Button, _VAlign, True);
}
Void ComponentTMNextButton_SetHAlign(CMlFrame _Frame_Button, Text _HAlign, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.HAlign = _HAlign;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetHAlign(CMlFrame _Frame_Button, Text _HAlign) {
	ComponentTMNextButton_SetHAlign(_Frame_Button, _HAlign, True);
}
Void ComponentTMNextButton_SetVAlign(CMlFrame _Frame_Button, Text _VAlign, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.VAlign = _VAlign;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetVAlign(CMlFrame _Frame_Button, Text _VAlign) {
	ComponentTMNextButton_SetVAlign(_Frame_Button, _VAlign, True);
}
Void ComponentTMNextButton_SetMaxLine(CMlFrame _Frame_Button, Integer _MaxLine, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.MaxLine = _MaxLine;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetMaxLine(CMlFrame _Frame_Button, Integer _MaxLine) {
	ComponentTMNextButton_SetMaxLine(_Frame_Button, _MaxLine, True);
}
Void ComponentTMNextButton_SetAutoNewLine(CMlFrame _Frame_Button, Boolean _AutoNewLine, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.AutoNewLine = _AutoNewLine;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetAutoNewLine(CMlFrame _Frame_Button, Boolean _AutoNewLine) {
	ComponentTMNextButton_SetAutoNewLine(_Frame_Button, _AutoNewLine, True);
}
Void ComponentTMNextButton_SetFitLabel(CMlFrame _Frame_Button, Real _MinTextSize, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.Fit = _MinTextSize;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetFitLabel(CMlFrame _Frame_Button, Real _MinTextSize) {
	ComponentTMNextButton_SetFitLabel(_Frame_Button, _MinTextSize, True);
}
Void ComponentTMNextButton_SetFitLabelStep(CMlFrame _Frame_Button, Real _StepSize, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Label.FitStep = _StepSize;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetFitLabelStep(CMlFrame _Frame_Button, Real _StepSize) {
	ComponentTMNextButton_SetFitLabelStep(_Frame_Button, _StepSize, True);
}
Void ComponentTMNextButton_SetBackgroundKeepRatio(CMlFrame _Frame_Button, CMlQuad::EKeepRatioMode _KeepRatio, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.KeepRatio = _KeepRatio;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetBackgroundKeepRatio(CMlFrame _Frame_Button, CMlQuad::EKeepRatioMode _KeepRatio) {
	ComponentTMNextButton_SetBackgroundKeepRatio(_Frame_Button, _KeepRatio, True);
}
Void ComponentTMNextButton_SetGradientImage(CMlFrame _Frame_Button, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.GradientImage = _ImageUrl;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetGradientImage(CMlFrame _Frame_Button, Text _ImageUrl) {
	ComponentTMNextButton_SetGradientImage(_Frame_Button, _ImageUrl, True);
}
Void ComponentTMNextButton_SetGradientOpacityFocus(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.GradientOpacityFocus = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetGradientOpacityFocus(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetGradientOpacityFocus(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetGradientOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.GradientOpacityUnfocus = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetGradientOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetGradientOpacityUnfocus(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetGradientColor(CMlFrame _Frame_Button, Vec3 _Color, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.GradientColor = _Color;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetGradientColor(CMlFrame _Frame_Button, Vec3 _Color) {
	ComponentTMNextButton_SetGradientColor(_Frame_Button, _Color, True);
}
Void ComponentTMNextButton_SetContourImage(CMlFrame _Frame_Button, Text _ImageUrl, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.ContourImage = _ImageUrl;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetContourImage(CMlFrame _Frame_Button, Text _ImageUrl) {
	ComponentTMNextButton_SetContourImage(_Frame_Button, _ImageUrl, True);
}
Void ComponentTMNextButton_SetContourOpacityFocus(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.ContourOpacityFocus = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetContourOpacityFocus(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetContourOpacityFocus(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetContourOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.ContourOpacityUnfocus = _Opacity;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetContourOpacityUnfocus(CMlFrame _Frame_Button, Real _Opacity) {
	ComponentTMNextButton_SetContourOpacityUnfocus(_Frame_Button, _Opacity, True);
}
Void ComponentTMNextButton_SetContourColor(CMlFrame _Frame_Button, Vec3 _Color, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Background.ContourColor = _Color;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetContourColor(CMlFrame _Frame_Button, Vec3 _Color) {
	ComponentTMNextButton_SetContourColor(_Frame_Button, _Color, True);
}
Void ComponentTMNextButton_SetState(CMlFrame _Frame_Button, Integer _State, Integer _Delay) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	if (_Delay <= 0) {
		ComponentTMNextButton_G_DelayedStates.removekey(_Frame_Button.Id);
		ComponentTMNextButton_Properties.State = _State;
		ComponentTMNextButton_UpdateStateDisplay(_Frame_Button, ComponentTMNextButton_Properties);
	} else {
		ComponentTMNextButton_G_DelayedStates[_Frame_Button.Id] = ComponentTMNextButton_K_DelayedState {
			ActivationTime = Now + _Delay,
			State = _State,
			Frame_Button = _Frame_Button
		};
	}
}
Void ComponentTMNextButton_SetState(CMlFrame _Frame_Button, Integer _State) {
	ComponentTMNextButton_SetState(_Frame_Button, _State, 0);
}
Void ComponentTMNextButton_SetLoadingScale(CMlFrame _Frame_Button, Real _Scale, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Loading.Scale = _Scale;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetLoadingScale(CMlFrame _Frame_Button, Real _Scale) {
	ComponentTMNextButton_SetLoadingScale(_Frame_Button, _Scale, True);
}
Void ComponentTMNextButton_SetLoadingPos(CMlFrame _Frame_Button, Vec2 _Pos, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.Loading.PosX = _Pos.X;
	ComponentTMNextButton_Properties.Loading.PosY = _Pos.Y;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetLoadingPos(CMlFrame _Frame_Button, Vec2 _Pos) {
	ComponentTMNextButton_SetLoadingPos(_Frame_Button, _Pos, True);
}
Void ComponentTMNextButton_SetSuperSample(CMlFrame _Frame_Button, Boolean _SuperSample, Boolean _ApplyProperties) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties.SuperSample = _SuperSample;
	if (_ApplyProperties) ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
}
Void ComponentTMNextButton_SetSuperSample(CMlFrame _Frame_Button, Boolean _SuperSample) {
	ComponentTMNextButton_SetSuperSample(_Frame_Button, _SuperSample, True);
}

Integer ComponentTMNextButton_GetIconColorType(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.ColorType;
}
Boolean ComponentTMNextButton_GetBgIsEmpty(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.IsBgEmpty;
}
Boolean ComponentTMNextButton_GetIsBlink(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.IsBlink;
}
Text ComponentTMNextButton_GetAlphaMask(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.AlphaMask;
}
Integer ComponentTMNextButton_GetBgColorType(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.ColorType;
}
Text ComponentTMNextButton_GetValue(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.Value;
}
Vec2 ComponentTMNextButton_GetSize(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.Size;
}
Vec2 ComponentTMNextButton_GetSizeHitbox(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.SizeHitbox;
}
Real ComponentTMNextButton_GetTiltHitbox(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.TiltHitbox;
}
Real ComponentTMNextButton_GetBackgroundOpacity(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.Opacity;
}
Real ComponentTMNextButton_GetOpacityUnfocus(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.OpacityUnfocus;
}
Vec3 ComponentTMNextButton_GetBgColor(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.Color;
}
Vec3 ComponentTMNextButton_GetFocusColor(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.FocusColor;
}
Vec3 ComponentTMNextButton_GetTextColor(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.Color;
}
Vec3 ComponentTMNextButton_GetTextFocusColor(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.FocusColor;
}
Real ComponentTMNextButton_GetTextSize(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.TextSize;
}
Text ComponentTMNextButton_GetTextPrefix(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.TextPrefix;
}
Real ComponentTMNextButton_GetTextItalicSlope(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.ItalicSlope;
}
Text ComponentTMNextButton_GetTextFont(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.Font;
}
CMlLabel ComponentTMNextButton_GetLabel(CMlFrame _Frame_Button) {
	return (_Frame_Button.GetFirstChild("ComponentTMNextButton_label-value") as CMlLabel);
}
Vec2 ComponentTMNextButton_GetLabelSize(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.Size;
}
Text ComponentTMNextButton_GetImage(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.Image;
}
Text ComponentTMNextButton_GetImageFocus(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.ImageFocus;
}
Real ComponentTMNextButton_GetImageFocusOpacity(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.ImageFocusOpacity;
}
Vec2 ComponentTMNextButton_GetImageOffset(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return <ComponentTMNextButton_Properties.Background.PosX, ComponentTMNextButton_Properties.Background.PosY>;
}
Real ComponentTMNextButton_GetImageXOffset(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.PosX;
}
Real ComponentTMNextButton_GetImageYOffset(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.PosY;
}
CMlFrame ComponentTMNextButton_GetIconFrame(CMlFrame _Frame_Button) {
	return (_Frame_Button.GetFirstChild("ComponentTMNextButton_frame-icon") as CMlFrame);
}
Text ComponentTMNextButton_GetIcon(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.Image;
}
Text ComponentTMNextButton_GetIconFocus(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.ImageFocus;
}
Vec3 ComponentTMNextButton_GetIconColor(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.Color;
}
Vec3 ComponentTMNextButton_GetIconFocusColor(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.FocusColor;
}
Vec2 ComponentTMNextButton_GetIconSize(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.Size;
}
Real ComponentTMNextButton_GetIconXPos(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.PosX;
}
Real ComponentTMNextButton_GetIconYPos(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.PosY;
}
Real ComponentTMNextButton_GetIconRot(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Icon.Rotation;
}
Text ComponentTMNextButton_GetTextHAlign(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.HAlign;
}
Text ComponentTMNextButton_GetTextVAlign(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.VAlign;
}
Real ComponentTMNextButton_GetTextXPos(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.PosX;
}
Real ComponentTMNextButton_GetTextYPos(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.PosY;
}
Text ComponentTMNextButton_GetHAlign(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.HAlign;
}
Text ComponentTMNextButton_GetVAlign(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.VAlign;
}
Integer ComponentTMNextButton_GetMaxLine(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.MaxLine;
}
Boolean ComponentTMNextButton_GetAutoNewLine(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.AutoNewLine;
}
Real ComponentTMNextButton_GetFitLabel(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.Fit;
}
Real ComponentTMNextButton_GetFitLabelStep(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Label.FitStep;
}
CMlQuad::EKeepRatioMode ComponentTMNextButton_GetBackgroundKeepRatio(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.KeepRatio;
}
Text ComponentTMNextButton_GetGradientImage(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.GradientImage;
}
Real ComponentTMNextButton_GetGradientOpacityFocus(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.GradientOpacityFocus;
}
Real ComponentTMNextButton_GetGradientOpacityUnfocus(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.GradientOpacityUnfocus;
}
Vec3 ComponentTMNextButton_GetGradientColor(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.GradientColor;
}
Text ComponentTMNextButton_GetContourImage(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.ContourImage;
}
Real ComponentTMNextButton_GetContourOpacityFocus(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.ContourOpacityFocus;
}
Real ComponentTMNextButton_GetContourOpacityUnfocus(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.ContourOpacityUnfocus;
}
Vec3 ComponentTMNextButton_GetContourColor(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Background.ContourColor;
}
Integer ComponentTMNextButton_GetState(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.State;
}
Real ComponentTMNextButton_GetLoadingScale(CMlControl _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.Loading.Scale;
}
Vec2 ComponentTMNextButton_GetLoadingPos(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return <ComponentTMNextButton_Properties.Loading.PosX, ComponentTMNextButton_Properties.Loading.PosY>;
}
Boolean ComponentTMNextButton_GetSuperSample(CMlFrame _Frame_Button) {
	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	return ComponentTMNextButton_Properties.SuperSample;
}

Void ComponentTMNextButton_InitButton(CMlFrame _Frame_Button) {
	declare CMlQuad Quad_Icon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-icon") as CMlQuad);
	declare CMlQuad Quad_Image <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-image") as CMlQuad);
	declare CMlQuad Quad_FocusIcon <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-icon") as CMlQuad);
	declare CMlQuad Quad_FocusBackground <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-focus-background") as CMlQuad);
	declare CMlLabel Label_Value <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_label-value") as CMlLabel);
	declare CMlQuad Quad_Hitbox <=> (_Frame_Button.GetFirstChild("ComponentTMNextButton_quad-background") as CMlQuad);

	declare ComponentTMNextButton_K_Properties ComponentTMNextButton_Properties for _Frame_Button;
	ComponentTMNextButton_Properties = ComponentTMNextButton_K_Properties {
		IsButton = True,
		IsLocked = False,
		IsBgEmpty = False,
		IsBlink = False,
		SizeHitbox = <-1., -1.>,
		TiltHitbox = 0.,
		AlphaMask = "",
		OpacityUnfocus = 1.,
		Label = ComponentTMNextButton_K_TextProperties {
			Size = <-1., -1.>,
			TextSize = Label_Value.TextSizeReal,
			TextPrefix = "$t$i",
			Value = "",
			Font = Label_Value.TextFont,
			PosX = 0.5,
			PosY = -0.5,
			Color = Label_Value.TextColor,
			FocusColor = ComponentMenuLibsTools_GetVisibleColorOnBackground(ComponentMenuLibsTools_GetVisibleColorOnBackground(Quad_Image.BgColor, Quad_Image.BgColor), Label_Value.TextColor),
			ItalicSlope = 0.,
			HAlign = "center",
			VAlign = "center",
			MaxLine = -1,
			AutoNewLine = False,
			Fit = -1.,
			FitStep = 0.25,
			OpacityUnfocus = -1.
		},
		Icon = ComponentTMNextButton_K_ImageProperties {
			ColorType = ComponentTMNextButton_C_ColorType_Colorize,
			Size = Quad_Icon.Size,
			Image = Quad_Icon.ImageUrl,
			ImageFocus = Quad_FocusIcon.ImageUrl,
			PosX = 0.5,
			PosY = -0.5,
			Color = Quad_Icon.BgColor,
			FocusColor = ComponentMenuLibsTools_GetVisibleColorOnBackground(Quad_Icon.BgColor, Quad_Icon.BgColor),
			Rotation = 0.,
			OpacityUnfocus = -1.,
			Opacity = 1.,
			ImageFocusOpacity = -1.,
			KeepRatio = CMlQuad::EKeepRatioMode::Inactive,
			GradientImage = "",
			GradientOpacityFocus = -1.,
			GradientOpacityUnfocus = -1.,
			GradientColor = <-1., -1., -1.>,
			ContourImage = "",
			ContourOpacityFocus = -1.,
			ContourOpacityUnfocus = -1.,
			ContourColor = <-1., -1., -1.>
		},
		Background = ComponentTMNextButton_K_ImageProperties {
			ColorType = ComponentTMNextButton_C_ColorType_Colorize,
			Size = Quad_Image.Size,
			Image = Quad_Image.ImageUrl,
			ImageFocus = Quad_FocusBackground.ImageUrl,
			PosX = 0.,
			PosY = 0.,
			Color = Quad_Image.BgColor,
			FocusColor = ComponentMenuLibsTools_GetVisibleColorOnBackground(Quad_Image.BgColor, Quad_Image.BgColor),
			Rotation = 0.,
			OpacityUnfocus = -1.,
			Opacity = 1.,
			ImageFocusOpacity = -1.,
			KeepRatio = CMlQuad::EKeepRatioMode::Inactive,
			GradientImage = "",
			GradientOpacityFocus = -1.,
			GradientOpacityUnfocus = -1.,
			GradientColor = <-1., -1., -1.>,
			ContourImage = "",
			ContourOpacityFocus = -1.,
			ContourOpacityUnfocus = -1.,
			ContourColor = <-1., -1., -1.>
		},
		HAlign = ComponentMenuLibsTools_C_HAlign_Left,
		VAlign = ComponentMenuLibsTools_C_VAlign_Top,
		State = ComponentTMNextButton_C_State_Normal,
		Loading = ComponentTMNextButton_K_ImageProperties {
			Scale = 1.,
			PosX = 0.5,
			PosY = -0.5
		},
		SuperSample = False
	};

	if (_Frame_Button.DataAttributeExists("iconcolortype")) {
		ComponentTMNextButton_Properties.Icon.ColorType = ComponentTMNextButton_TL::ToInteger(_Frame_Button.DataAttributeGet("iconcolortype"));
	}
	if (_Frame_Button.DataAttributeExists("bgempty")) {
		ComponentTMNextButton_Properties.IsBgEmpty = ComponentMenuLibsTools_GetBooleanAttribute(_Frame_Button, "bgempty");
	}
	if (_Frame_Button.DataAttributeExists("isblink")) {
		ComponentTMNextButton_Properties.IsBlink = ComponentMenuLibsTools_GetBooleanAttribute(_Frame_Button, "isblink");
	}
	if (_Frame_Button.DataAttributeExists("alphamask")) {
		ComponentTMNextButton_Properties.AlphaMask = _Frame_Button.DataAttributeGet("alphamask");
	}
	if (_Frame_Button.DataAttributeExists("backgroundcolortype")) {
		ComponentTMNextButton_Properties.Background.ColorType = ComponentTMNextButton_TL::ToInteger(_Frame_Button.DataAttributeGet("backgroundcolortype"));
	}
	if (_Frame_Button.DataAttributeExists("text")) {
		ComponentTMNextButton_Properties.Label.Value = _Frame_Button.DataAttributeGet("text");
	}
	if (_Frame_Button.DataAttributeExists("size")) {
		ComponentTMNextButton_Properties.Background.Size = ComponentMenuLibsTools_TextToVec2(_Frame_Button.DataAttributeGet("size"));
	}
	if (_Frame_Button.DataAttributeExists("sizehitbox")) {
		ComponentTMNextButton_Properties.SizeHitbox = ComponentMenuLibsTools_TextToVec2(_Frame_Button.DataAttributeGet("sizehitbox"));
	}
	if (_Frame_Button.DataAttributeExists("tilthitbox")) {
		ComponentTMNextButton_Properties.TiltHitbox = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("tilthitbox"));
	}
	if (_Frame_Button.DataAttributeExists("opacity")) {
		ComponentTMNextButton_Properties.Background.Opacity = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("opacity"));
	}
	if (_Frame_Button.DataAttributeExists("opacityunfocus")) {
		ComponentTMNextButton_Properties.OpacityUnfocus = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("opacityunfocus"));
	}
	if (_Frame_Button.DataAttributeExists("bgcolor")) {
		ComponentTMNextButton_Properties.Background.Color = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("bgcolor"));
	}
	if (_Frame_Button.DataAttributeExists("focuscolor")) {
		ComponentTMNextButton_Properties.Background.FocusColor = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("focuscolor"));
	}
	if (_Frame_Button.DataAttributeExists("textcolor")) {
		ComponentTMNextButton_Properties.Label.Color = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("textcolor"));
	}
	if (_Frame_Button.DataAttributeExists("textfocuscolor")) {
		ComponentTMNextButton_Properties.Label.FocusColor = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("textfocuscolor"));
	}
	if (_Frame_Button.DataAttributeExists("textsize")) {
		ComponentTMNextButton_Properties.Label.TextSize = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("textsize"));
	}
	if (_Frame_Button.DataAttributeExists("textprefix")) {
		ComponentTMNextButton_Properties.Label.TextPrefix = _Frame_Button.DataAttributeGet("textprefix");
	}
	if (_Frame_Button.DataAttributeExists("textfont")) {
		ComponentTMNextButton_Properties.Label.Font = _Frame_Button.DataAttributeGet("textfont");
	}
	if (_Frame_Button.DataAttributeExists("textitalicslope")) {
		ComponentTMNextButton_Properties.Label.ItalicSlope = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("textitalicslope"));
	}
	if (_Frame_Button.DataAttributeExists("textopacityunfocus")) {
		ComponentTMNextButton_Properties.Label.OpacityUnfocus = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("textopacityunfocus"));
	}
	if (_Frame_Button.DataAttributeExists("labelsize")) {
		ComponentTMNextButton_Properties.Label.Size = ComponentMenuLibsTools_TextToVec2(_Frame_Button.DataAttributeGet("labelsize"));
	}
	if (_Frame_Button.DataAttributeExists("image")) {
		ComponentTMNextButton_Properties.Background.Image = _Frame_Button.DataAttributeGet("image");
	}
	if (_Frame_Button.DataAttributeExists("imagefocus")) {
		ComponentTMNextButton_Properties.Background.ImageFocus = _Frame_Button.DataAttributeGet("imagefocus");
	}
	if (_Frame_Button.DataAttributeExists("imagefocusopacity")) {
		ComponentTMNextButton_Properties.Background.ImageFocusOpacity = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("imagefocusopacity"));
	}
	if (_Frame_Button.DataAttributeExists("imageoffset")) {
		declare Pos = ComponentMenuLibsTools_TextToVec2(_Frame_Button.DataAttributeGet("imageoffset"));
		ComponentTMNextButton_Properties.Background.PosX = Pos.X;
		ComponentTMNextButton_Properties.Background.PosY = Pos.Y;
	}
	if (_Frame_Button.DataAttributeExists("icon")) {
		ComponentTMNextButton_Properties.Icon.Image = _Frame_Button.DataAttributeGet("icon");
	}
	if (_Frame_Button.DataAttributeExists("iconfocus")) {
		ComponentTMNextButton_Properties.Icon.ImageFocus = _Frame_Button.DataAttributeGet("iconfocus");
	}
	if (_Frame_Button.DataAttributeExists("iconcolor")) {
		ComponentTMNextButton_Properties.Icon.Color = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("iconcolor"));
	}
	if (_Frame_Button.DataAttributeExists("iconfocuscolor")) {
		ComponentTMNextButton_Properties.Icon.FocusColor = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("iconfocuscolor"));
	}
	if (_Frame_Button.DataAttributeExists("iconsize")) {
		ComponentTMNextButton_Properties.Icon.Size = ComponentMenuLibsTools_TextToVec2(_Frame_Button.DataAttributeGet("iconsize"));
	}
	if (_Frame_Button.DataAttributeExists("iconxpos")) {
		ComponentTMNextButton_Properties.Icon.PosX = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("iconxpos"));
	}
	if (_Frame_Button.DataAttributeExists("iconypos")) {
		ComponentTMNextButton_Properties.Icon.PosY = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("iconypos"));
	}
	if (_Frame_Button.DataAttributeExists("iconrot")) {
		ComponentTMNextButton_Properties.Icon.Rotation = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("iconrot"));
	}
	if (_Frame_Button.DataAttributeExists("iconopacityunfocus")) {
		ComponentTMNextButton_Properties.Icon.OpacityUnfocus = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("iconopacityunfocus"));
	}
	if (_Frame_Button.DataAttributeExists("textxpos")) {
		ComponentTMNextButton_Properties.Label.PosX = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("textxpos"));
	}
	if (_Frame_Button.DataAttributeExists("textypos")) {
		ComponentTMNextButton_Properties.Label.PosY = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("textypos"));
	}
	if (_Frame_Button.DataAttributeExists("texthalign")) {
		ComponentTMNextButton_Properties.Label.HAlign = _Frame_Button.DataAttributeGet("texthalign");
	}
	if (_Frame_Button.DataAttributeExists("textvalign")) {
		ComponentTMNextButton_Properties.Label.VAlign = _Frame_Button.DataAttributeGet("textvalign");
	}
	if (_Frame_Button.DataAttributeExists("halign")) {
		ComponentTMNextButton_Properties.HAlign = _Frame_Button.DataAttributeGet("halign");
	}
	if (_Frame_Button.DataAttributeExists("valign")) {
		ComponentTMNextButton_Properties.VAlign = _Frame_Button.DataAttributeGet("valign");
	}
	if (_Frame_Button.DataAttributeExists("maxline")) {
		ComponentTMNextButton_Properties.Label.MaxLine = ComponentTMNextButton_TL::ToInteger(_Frame_Button.DataAttributeGet("maxline"));
	}
	if (_Frame_Button.DataAttributeExists("autonewline")) {
		ComponentTMNextButton_Properties.Label.AutoNewLine = ComponentMenuLibsTools_GetBooleanAttribute(_Frame_Button, "autonewline");
	}
	if (_Frame_Button.DataAttributeExists("fitlabel")) {
		ComponentTMNextButton_Properties.Label.Fit = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("fitlabel"));
	}
	if (_Frame_Button.DataAttributeExists("fitlabelstep")) {
		ComponentTMNextButton_Properties.Label.FitStep = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("fitlabelstep"));
	}
	if (_Frame_Button.DataAttributeExists("bgkeepratio")) {
		declare Text KeepRatio = ComponentTMNextButton_TL::ToLowerCase(_Frame_Button.DataAttributeGet("bgkeepratio"));
		switch (KeepRatio) {
			case "clip": ComponentTMNextButton_Properties.Background.KeepRatio = CMlQuad::EKeepRatioMode::Clip;
			case "fit": ComponentTMNextButton_Properties.Background.KeepRatio = CMlQuad::EKeepRatioMode::Fit;
			default: ComponentTMNextButton_Properties.Background.KeepRatio = CMlQuad::EKeepRatioMode::Inactive;
		}
	}
	if (_Frame_Button.DataAttributeExists("gradientimage")) {
		ComponentTMNextButton_Properties.Background.GradientImage = _Frame_Button.DataAttributeGet("gradientimage");
	}
	if (_Frame_Button.DataAttributeExists("gradientopacityfocus")) {
		ComponentTMNextButton_Properties.Background.GradientOpacityFocus = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("gradientopacityfocus"));
	}
	if (_Frame_Button.DataAttributeExists("gradientopacityunfocus")) {
		ComponentTMNextButton_Properties.Background.GradientOpacityUnfocus = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("gradientopacityunfocus"));
	}
	if (_Frame_Button.DataAttributeExists("gradientimagecolor")) {
		ComponentTMNextButton_Properties.Background.GradientColor = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("gradientimagecolor"));
	}
	if (_Frame_Button.DataAttributeExists("contourimage")) {
		ComponentTMNextButton_Properties.Background.ContourImage = _Frame_Button.DataAttributeGet("contourimage");
	}
	if (_Frame_Button.DataAttributeExists("contouropacityfocus")) {
		ComponentTMNextButton_Properties.Background.ContourOpacityFocus = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("contouropacityfocus"));
	}
	if (_Frame_Button.DataAttributeExists("contouropacityunfocus")) {
		ComponentTMNextButton_Properties.Background.ContourOpacityUnfocus = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("contouropacityunfocus"));
	}
	if (_Frame_Button.DataAttributeExists("contourimagecolor")) {
		ComponentTMNextButton_Properties.Background.ContourColor = ComponentTMNextButton_CL::HexToRgb(_Frame_Button.DataAttributeGet("contourimagecolor"));
	}
	if (_Frame_Button.DataAttributeExists("state")) {
		ComponentTMNextButton_Properties.State = ComponentTMNextButton_TL::ToInteger(_Frame_Button.DataAttributeGet("State"));
	}
	if (_Frame_Button.DataAttributeExists("loadingscale")) {
		ComponentTMNextButton_Properties.Loading.Scale = ComponentTMNextButton_TL::ToReal(_Frame_Button.DataAttributeGet("loadingscale"));
	}
	if (_Frame_Button.DataAttributeExists("loadingpos")) {
		declare Vec2 Pos = ComponentMenuLibsTools_TextToVec2(_Frame_Button.DataAttributeGet("loadingpos"));
		ComponentTMNextButton_Properties.Loading.PosX = Pos.X;
		ComponentTMNextButton_Properties.Loading.PosY = Pos.Y;
	}
	if (_Frame_Button.DataAttributeExists("supersample")) {
		ComponentTMNextButton_Properties.SuperSample = ComponentMenuLibsTools_GetBooleanAttribute(_Frame_Button, "supersample");
	}

	declare CMlFrame ComponentTMNextButton_ParentButton for Quad_Hitbox = Null;
	ComponentTMNextButton_ParentButton = _Frame_Button;

	ComponentTMNextButton_ApplyProperties(_Frame_Button, ComponentTMNextButton_Properties);
	ComponentTMNextButton_Unfocus(_Frame_Button, False);
}

***MainInit***
***
declare Integer ComponentTMNextButton_BlinkEndTime;
ComponentTMNextButton_G_DelayedStates = [];
Page.GetClassChildren("ComponentTMNextButton_frame-button-container", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlFrame Frame_ButtonContainer = (Control as CMlFrame);
	ComponentTMNextButton_InitButton(Frame_ButtonContainer.Parent);
}
ComponentTMNextButton_G_DefaultColorFocus = ComponentMenuLibsTools_GetVisibleColorOnBackground(ComponentTMNextButton_CL::Hex6ToRgb("005948"), ComponentTMNextButton_CL::Hex6ToRgb("005948"));
***

***MainLoop***
***
if (ComponentTMNextButton_G_QuadBlinking.count > 0 && (Now >= ComponentTMNextButton_BlinkEndTime || ComponentTMNextButton_G_ResetBlink)) {
	foreach (Quad in ComponentTMNextButton_G_QuadBlinking) {
		AnimMgr.Flush(Quad);
		AnimMgr.Add(Quad, "<anim opacity=\"0.3\" />", 2*ComponentTMNextButton_C_AnimTime_Blink/5, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.AddChain(Quad, "<anim opacity=\"0.85\" />", 3*ComponentTMNextButton_C_AnimTime_Blink/5, CAnimManager::EAnimManagerEasing::QuadOut);
	}
	ComponentTMNextButton_BlinkEndTime = Now + ComponentTMNextButton_C_AnimTime_Blink;
	ComponentTMNextButton_G_ResetBlink = False;
}
if (ComponentTMNextButton_G_DelayedStates.count > 0) {
	declare ComponentTMNextButton_K_DelayedState[Ident] DelayedStates = ComponentTMNextButton_G_DelayedStates;
	foreach (ButtonId => DelayedState in DelayedStates) {
		if (DelayedState.ActivationTime > 0 && Now >= DelayedState.ActivationTime) {
			ComponentTMNextButton_G_DelayedStates.removekey(ButtonId);
			ComponentTMNextButton_SetState(DelayedState.Frame_Button, DelayedState.State);
		}
	}
}
***

// */
// @Component end component-tmnext-button

// @Component start component-commonlibs-audio-manager
// /*

/** Play sound according to its name
 *
 *	@param														The name of the sound
 */
Void ComponentCommonLibsAudioManager_PlaySound(Text _SoundName, Real _PanRadiusLfeX) {
	SendCustomEvent("Event_PlaySound", [_SoundName, ""^_PanRadiusLfeX]);
}
Void ComponentCommonLibsAudioManager_PlaySound(Text _SoundName) {
	ComponentCommonLibsAudioManager_PlaySound(_SoundName, 0.);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Play sound according to its name with a specified play time
 *
 *	@param _SoundName										The name of the sound
 *	@param _PlayTime										The playing time of the sound
 */
Void ComponentCommonLibsAudioManager_PlaySoundWithDelay(Text _SoundName, Integer _PlayTime) {
	SendCustomEvent("Event_PlaySoundWithDelay", [_SoundName, ""^_PlayTime]);
}

/** Stop sound according to its name
 *
 *	@param														The name of the sound
 */
Void ComponentCommonLibsAudioManager_StopSound(Text _SoundName) {
	SendCustomEvent("Event_StopSound", [_SoundName]);
}
Void ComponentCommonLibsAudioManager_StopSound(Text _SoundName, Boolean _RestartSound) {
	declare Text RestartSound = "False";
	if (_RestartSound) RestartSound = "True";
	SendCustomEvent("Event_StopSound", [_SoundName, RestartSound]);
}

/** Stop all sounds
 */
Void ComponentCommonLibsAudioManager_StopAllSounds() {
	SendCustomEvent("Event_StopAllSounds", []);
}

/** Change sound balance for scene, UI and music
 */
Void ComponentCommonLibsAudioManager_SetNewSoundBalance(Integer _NewState, Integer _FadeTime) {
	SendCustomEvent("Event_SetNewSoundBalance", [""^_NewState, ""^ _FadeTime]);
}

/// Update sound fade duration
Void ComponentCommonLibsAudioManager_SetFadeDuration(Text _SoundName, Real _FadeDuration) {
	SendCustomEvent("Event_SetFadeDuration", [_SoundName, ""^_FadeDuration]);
}

// */
// @Component end component-commonlibs-audio-manager

// @Component start menu-libs-scroll
// /*

declare MenuLibsScroll_K_Event[] MenuLibsScroll_DelayedPendingEvents;
declare MenuLibsScroll_K_Event[] MenuLibsScroll_PendingEvents;
declare Boolean MenuLibsScroll_G_UseLocalEvents;
declare CMlFrame[] MenuLibsScroll_G_Frames_Scroll;

Void MenuLibsScroll_Private_SetScrollBarSize(CMlFrame _Frame_ScrollBarQuads, Vec2 _Size) {
	declare CMlQuad Quad_Top <=> (_Frame_ScrollBarQuads.GetFirstChild("MenuLibsScroll_quad-top") as CMlQuad);
	declare CMlQuad Quad_Center <=> (_Frame_ScrollBarQuads.GetFirstChild("MenuLibsScroll_quad-center") as CMlQuad);
	declare CMlQuad Quad_Bottom <=> (_Frame_ScrollBarQuads.GetFirstChild("MenuLibsScroll_quad-bottom") as CMlQuad);
	Quad_Top.Size = <_Size.X, _Size.X * 0.5>;
	Quad_Bottom.Size = <_Size.X, _Size.X * 0.5>;
	Quad_Center.Size = <_Size.X, MenuLibsScroll_ML::Max(0., _Size.Y - Quad_Top.Size.Y - Quad_Bottom.Size.Y)>;
	_Frame_ScrollBarQuads.RelativePosition_V3.X = (_Size.X * 0.5) + 1.;
	Quad_Top.RelativePosition_V3.Y = -Quad_Top.Size.Y;
	Quad_Center.RelativePosition_V3.Y = Quad_Top.RelativePosition_V3.Y;
	Quad_Bottom.RelativePosition_V3.Y = Quad_Center.RelativePosition_V3.Y - Quad_Center.Size.Y;
	declare MenuLibsScroll_K_ScrollBarState MenuLibsScroll_ScrollBarState for _Frame_ScrollBarQuads;
	MenuLibsScroll_ScrollBarState.Height = _Size.Y;
}

Void MenuLibsScroll_Private_DisplayScrollBar(CMlFrame _Frame_ScrollBar, Boolean _Visible) {
	declare CMlFrame Frame_ScrollBarDuringScroll <=> (_Frame_ScrollBar.GetFirstChild("MenuLibsScroll_frame-scrollbar-during-scroll") as CMlFrame);
	declare CMlFrame Frame_ScrollBarFg <=> (Frame_ScrollBarDuringScroll.GetFirstChild("MenuLibsScroll_frame-scrollbar-fg") as CMlFrame);
	declare CMlFrame Frame_ScrollBarBg <=> (Frame_ScrollBarDuringScroll.GetFirstChild("MenuLibsScroll_frame-scrollbar-bg") as CMlFrame);

	declare Real OpacityBg = 0.;
	declare Real OpacityFg = 0.;
	declare Boolean PlayAnimation = True;
	if (_Visible) {
		OpacityFg = 0.8;
		OpacityBg = 0.3;
		PlayAnimation = !Frame_ScrollBarDuringScroll.Visible;
		Frame_ScrollBarDuringScroll.Visible = True;
	} else {
		AnimMgr.Add(Frame_ScrollBarDuringScroll, "<a hidden=\"1\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
	}

	if (PlayAnimation) {
		foreach (Control in Frame_ScrollBarFg.Controls) {
			AnimMgr.Add(Control, "<a opacity=\""^OpacityFg^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
		foreach (Control in Frame_ScrollBarBg.Controls) {
			AnimMgr.Add(Control, "<a opacity=\""^OpacityBg^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
}

MenuLibsScroll_K_ScrollPosition MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_K_State _State) {
	declare Integer Row = MenuLibsScroll_ML::Max(0, MenuLibsScroll_ML::FloorInteger((_State.ScrollOffset.Y - _State.Config.HeaderHeight) / (_State.Config.ElementSize.Y + _State.Config.MarginSize.Y)));
	declare Integer StartKey = Row * _State.Config.ElementsPerLine;
	declare Integer EndKey = StartKey + _State.Elements.count - 1;
	return MenuLibsScroll_K_ScrollPosition {
		Row = Row,
		StartKey = StartKey,
		EndKey = EndKey
	};
}
MenuLibsScroll_K_ScrollPosition MenuLibsScroll_Private_GetScrollPosition(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State);
}

Void MenuLibsScroll_Private_SetFocusedElementKey(CMlFrame _Frame_Scroll, Integer _StartElementKey, Integer _FocusedElementKey, Boolean _IsMouse, Boolean _SendFocusEvent, Boolean _PlayFocusAnimation) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;

	// Prevent focus on locked element
	declare Integer FocusedElementKey = _FocusedElementKey;
	declare Boolean NewFocusedElementIsLocked = (MenuLibsScroll_State.LockedElements.count > 0 && MenuLibsScroll_State.LockedElements.exists(FocusedElementKey));
	declare Boolean FoundElementKey = !NewFocusedElementIsLocked;
	declare CMlScriptEvent::EMenuNavAction ReachLimitNavAction = CMlScriptEvent::EMenuNavAction::Down;

	// Search for an alternative element to focus only when using the keyboard or gamepad
	// When using the mouse, the focus should stay on the last unlocked element focused
	if (NewFocusedElementIsLocked && !_IsMouse) {
		declare Integer Direction = MenuLibsScroll_C_Direction_Null;
		declare Boolean IsOnSameLine = False;
		declare Integer LineStartKey = MenuLibsScroll_State.FocusedElementKey;
		if (MenuLibsScroll_State.Config.ElementsPerLine > 1) {
			LineStartKey = MenuLibsScroll_State.FocusedElementKey - (MenuLibsScroll_State.FocusedElementKey % MenuLibsScroll_State.Config.ElementsPerLine);
			IsOnSameLine = (FocusedElementKey >= LineStartKey && FocusedElementKey < LineStartKey + MenuLibsScroll_State.Config.ElementsPerLine);
		}
		if (FocusedElementKey > MenuLibsScroll_State.FocusedElementKey) {
			if (IsOnSameLine) {
				Direction = MenuLibsScroll_C_Direction_Right;
				ReachLimitNavAction = CMlScriptEvent::EMenuNavAction::Right;
			} else {
				Direction = MenuLibsScroll_C_Direction_Down;
				ReachLimitNavAction = CMlScriptEvent::EMenuNavAction::Down;
			}
		} else if (FocusedElementKey < MenuLibsScroll_State.FocusedElementKey) {
			if (IsOnSameLine) {
				Direction = MenuLibsScroll_C_Direction_Left;
				ReachLimitNavAction = CMlScriptEvent::EMenuNavAction::Left;
			} else {
				Direction = MenuLibsScroll_C_Direction_Up;
				ReachLimitNavAction = CMlScriptEvent::EMenuNavAction::Up;
			}
		}

		// When moving up or down, we don't want to skip to the next unlocked element vertically
		// It could make some elements inaccessible
		// eg : 00 01 xx 03 04
		//			xx xx 07 xx xx
		//			xx xx 12 xx xx
		//      15 16 xx 18 19
		// Elements 7 and 12 cannot be accessed from the other elements if we skip vertically
		// Instead if the element above or below is locked we try to access other elements on the same line
		// eg : pressing down while focusing 01 should focus 07 and not 16
		FocusedElementKey = MenuLibsScroll_State.FocusedElementKey;
		if (Direction == MenuLibsScroll_C_Direction_Up) {
			if (MenuLibsScroll_State.Config.ElementsPerLine > 1) {
				for (LineElementKey, 0, FocusedElementKey - MenuLibsScroll_State.Config.ElementsPerLine, -MenuLibsScroll_State.Config.ElementsPerLine) {
					declare LocalLineStartKey = LineElementKey - (LineElementKey % MenuLibsScroll_State.Config.ElementsPerLine);
					for (ColumnShift, 0, MenuLibsScroll_State.Config.ElementsPerLine - 1) {
						if (
							LineElementKey + ColumnShift > LocalLineStartKey + MenuLibsScroll_State.Config.ElementsPerLine - 1 &&
							LineElementKey - ColumnShift < LocalLineStartKey
						) {
							break;
						} else if (
							LineElementKey + ColumnShift <= LocalLineStartKey + MenuLibsScroll_State.Config.ElementsPerLine - 1 &&
							!MenuLibsScroll_State.LockedElements.exists(LineElementKey + ColumnShift)
						) {
							FocusedElementKey = LineElementKey + ColumnShift;
							FoundElementKey = True;
						} else if (
							LineElementKey - ColumnShift >= LocalLineStartKey &&
							!MenuLibsScroll_State.LockedElements.exists(LineElementKey - ColumnShift)
						) {
							FocusedElementKey = LineElementKey - ColumnShift;
							FoundElementKey = True;
						}
						if (FoundElementKey) break;
					}
					if (FoundElementKey) break;
				}
			} else {
				for (ElementKey, 0, FocusedElementKey - MenuLibsScroll_State.Config.ElementsPerLine, -MenuLibsScroll_State.Config.ElementsPerLine) {
					if (!MenuLibsScroll_State.LockedElements.exists(ElementKey)) {
						FocusedElementKey = ElementKey;
						FoundElementKey = True;
						break;
					}
				}
			}
		} else if (Direction == MenuLibsScroll_C_Direction_Down) {
			if (MenuLibsScroll_State.Config.ElementsPerLine > 1) {
				for (LineElementKey, FocusedElementKey + MenuLibsScroll_State.Config.ElementsPerLine, MenuLibsScroll_State.ElementsTotal - 1, MenuLibsScroll_State.Config.ElementsPerLine) {
					declare LocalLineStartKey = LineElementKey - (LineElementKey % MenuLibsScroll_State.Config.ElementsPerLine);
					for (ColumnShift, 0, MenuLibsScroll_State.Config.ElementsPerLine - 1) {
						if (
							LineElementKey - ColumnShift < LocalLineStartKey &&
							LineElementKey + ColumnShift > LocalLineStartKey + MenuLibsScroll_State.Config.ElementsPerLine - 1
						) {
							break;
						} else if (
							LineElementKey - ColumnShift >= LocalLineStartKey &&
							!MenuLibsScroll_State.LockedElements.exists(LineElementKey - ColumnShift)
						) {
							FocusedElementKey = LineElementKey - ColumnShift;
							FoundElementKey = True;
						} else if (
							LineElementKey + ColumnShift <= LocalLineStartKey + MenuLibsScroll_State.Config.ElementsPerLine - 1 &&
							!MenuLibsScroll_State.LockedElements.exists(LineElementKey + ColumnShift)
						) {
							FocusedElementKey = LineElementKey + ColumnShift;
							FoundElementKey = True;
						}
						if (FoundElementKey) break;
					}
					if (FoundElementKey) break;
				}
			} else {
				for (ElementKey, FocusedElementKey + MenuLibsScroll_State.Config.ElementsPerLine, MenuLibsScroll_State.ElementsTotal - 1, MenuLibsScroll_State.Config.ElementsPerLine) {
					if (!MenuLibsScroll_State.LockedElements.exists(ElementKey)) {
						FocusedElementKey = ElementKey;
						FoundElementKey = True;
						break;
					}
				}
			}
		} else if (Direction == MenuLibsScroll_C_Direction_Left) {
			for (ElementKey, LineStartKey, FocusedElementKey - 2, -1) {
				if (!MenuLibsScroll_State.LockedElements.exists(ElementKey)) {
					FocusedElementKey = ElementKey;
					FoundElementKey = True;
					break;
				}
			}
		} else if (Direction == MenuLibsScroll_C_Direction_Right) {
			for (ElementKey, FocusedElementKey + 2, LineStartKey + MenuLibsScroll_State.Config.ElementsPerLine - 1) {
				if (!MenuLibsScroll_State.LockedElements.exists(ElementKey)) {
					FocusedElementKey = ElementKey;
					FoundElementKey = True;
					break;
				}
			}
		} else {
			// Try to focus an element after
			for (ElementKey, FocusedElementKey + 1, MenuLibsScroll_State.ElementsTotal - 1) {
				if (!MenuLibsScroll_State.LockedElements.exists(ElementKey)) {
					FocusedElementKey = ElementKey;
					FoundElementKey = True;
					break;
				}
			}
			// Try to focus an element before
			if (!FoundElementKey) {
				for (ElementKey, 0, FocusedElementKey - 1, -1) {
					if (!MenuLibsScroll_State.LockedElements.exists(ElementKey)) {
						FocusedElementKey = ElementKey;
						FoundElementKey = True;
						break;
					}
				}
			}
		}
	}

	declare MenuLibsScroll_K_Event FocusEvent = MenuLibsScroll_K_Event {
		Type = MenuLibsScroll_C_EventType_Focus,
		Scroll = _Frame_Scroll,
		From = MenuLibsScroll_State.FocusedElement,
		FromKey = MenuLibsScroll_State.FocusedElementKey,
		To = Null,
		ToKey = FocusedElementKey,
		IsMouse = _IsMouse,
		PlayFocusAnimation = _PlayFocusAnimation
	};
	declare Integer ElementKey = FocusedElementKey - _StartElementKey;
	if (MenuLibsScroll_State.Elements.existskey(ElementKey)) {
		FocusEvent.To = MenuLibsScroll_State.Elements[ElementKey];
	}

	// If the new focused element is not locked or if we found an alternative one
	if (!NewFocusedElementIsLocked || FoundElementKey) {
		MenuLibsScroll_State.FocusedElement = FocusEvent.To;
		MenuLibsScroll_State.FocusedElementKey = FocusEvent.ToKey;
		if (_SendFocusEvent) {
			MenuLibsScroll_DelayedPendingEvents.add(FocusEvent);
		}
	}
	// If the new focused element is locked and we did not found an alternative one and we are not using the mouse
	else if (!_IsMouse) {
		MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
			Type = MenuLibsScroll_C_EventType_ReachLimit,
			Scroll = _Frame_Scroll,
			From = FocusEvent.From,
			FromKey = FocusEvent.FromKey,
			NavAction = ReachLimitNavAction
		});
	}
}
Void MenuLibsScroll_Private_SetFocusedElementKey(CMlFrame _Frame_Scroll, Integer _StartElementKey, Integer _FocusedElementKey, Boolean _IsMouse, Boolean _SendFocusEvent) {
	MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, _StartElementKey, _FocusedElementKey, _IsMouse, _SendFocusEvent, True);
}
Void MenuLibsScroll_Private_SetFocusedElementKey(CMlFrame _Frame_Scroll, Integer _StartElementKey, Integer _FocusedElementKey, Boolean _IsMouse) {
	MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, _StartElementKey, _FocusedElementKey, _IsMouse, True);
}
Void MenuLibsScroll_Private_SetFocusedElementKey(CMlFrame _Frame_Scroll, Integer _StartElementKey, Integer _FocusedElementKey) {
	MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, _StartElementKey, _FocusedElementKey, False, True);
}
Void MenuLibsScroll_SetFocusedElementKey(CMlFrame _Frame_Scroll, Integer _ElementKey, Boolean _IsMouse, Boolean _SendFocusEvent) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, _ElementKey, _IsMouse, _SendFocusEvent);
}

Void MenuLibsScroll_Private_ApplySkewToControl(MenuLibsScroll_K_State _State, Real _Offset, CMlControl _Control) {
	declare Real OffsetFromWindowTop = (-_Control.RelativePosition_V3.Y - _State.Config.HeaderHeight - _Offset);
	if (_State.Config.SkewVAlign == MenuLibsScroll_C_SkewVAlign_Center) {
		OffsetFromWindowTop -= ((_State.Config.WindowSize.Y - _State.Config.ElementSize.Y) * 0.5);
	} else if (_State.Config.SkewVAlign == MenuLibsScroll_C_SkewVAlign_Bottom) {
		OffsetFromWindowTop -= (_State.Config.WindowSize.Y - _State.Config.ElementSize.Y);
	}
	declare Real MenuLibsScroll_BasePosX for _Control;
	_Control.RelativePosition_V3.X = MenuLibsScroll_BasePosX + (OffsetFromWindowTop * MenuLibsScroll_ML::Tan(MenuLibsScroll_ML::DegToRad(_State.Config.Skew)));
}

Void MenuLibsScroll_Private_ApplySkew(MenuLibsScroll_K_State _State) {
	if (_State.Config.Skew > -0.1 && _State.Config.Skew < 0.1) return;

	declare Real Offset = 0.;
	if (_State.Config.SkewHeader) {
		Offset = _State.ScrollOffset.Y;
	} else if (_State.ScrollOffset.Y > _State.Config.HeaderHeight) {
		Offset = _State.ScrollOffset.Y - _State.Config.HeaderHeight;
	}

	foreach (Key => Frame_Element in _State.Elements) {
		MenuLibsScroll_Private_ApplySkewToControl(_State, Offset, Frame_Element);
	}

	foreach (Key => StickControl in _State.StickControls) {
		MenuLibsScroll_Private_ApplySkewToControl(_State, Offset, StickControl);
	}

	if (_State.Config.SkewHeader) {
		MenuLibsScroll_Private_ApplySkewToControl(_State, _State.ScrollOffset.Y, _State.Header);
	}

	if (_State.Config.SkewFooter) {
		MenuLibsScroll_Private_ApplySkewToControl(_State, _State.ScrollOffset.Y, _State.Footer);
	}
}

Void MenuLibsScroll_Private_UpdateElementsPosition(MenuLibsScroll_K_State _State, MenuLibsScroll_K_ScrollPosition _ScrollPosition) {
	foreach (Key => Frame_Element in _State.Elements) {
		declare Integer Row = _ScrollPosition.Row + (Key / _State.Config.ElementsPerLine);
		declare Integer Column = Key % _State.Config.ElementsPerLine;
		Frame_Element.RelativePosition_V3.Y = -_State.Config.HeaderHeight - (Row * (_State.Config.ElementSize.Y + _State.Config.MarginSize.Y));
		Frame_Element.RelativePosition_V3.X = _State.Config.ScrollPadding + (Column * (_State.Config.ElementSize.X + _State.Config.MarginSize.X));

		declare Real MenuLibsScroll_BasePosX for Frame_Element;
		MenuLibsScroll_BasePosX = Frame_Element.RelativePosition_V3.X;
	}

	MenuLibsScroll_Private_ApplySkew(_State);
}

Boolean MenuLibsScroll_CanScroll(CMlFrame _Frame_Scroll) {
	return (_Frame_Scroll.ScrollMax.Y > MenuLibsScroll_ML::Pow(10., -3.)); //< Avoid precision error
}

Void MenuLibsScroll_Private_Scroll(CMlFrame _Frame_Scroll, Real _ScrollDelta, Boolean _ForceUpdate, Boolean _IsAnim, Boolean _SendFocusEvent) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;

	if (!_IsAnim && MenuLibsScroll_State.Animation.StartTime >= 0) {
		MenuLibsScroll_State.Animation = MenuLibsScroll_K_ScrollAnimation {
			StartTime = -1,
			ScrollStart = 0.,
			ScrollDelta = 0.,
			Duration = 0
		};
	}

	declare MenuLibsScroll_K_ScrollPosition OldScrollPosition = MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State);
	if (_ScrollDelta != 0.) {
		_Frame_Scroll.Scroll(<0., _ScrollDelta>);

		if (
			MenuLibsScroll_State.Config.ScrollBarVisibility == MenuLibsScroll_C_ScrollBarVisibility_DuringScroll &&
			MenuLibsScroll_State.ScrollBar != Null &&
			MenuLibsScroll_State.ScrollBar.Visible
		) {
			MenuLibsScroll_State.ScrollBarHideTime = Now + MenuLibsScroll_C_ScrollBarVisibilityDuration;
			MenuLibsScroll_Private_DisplayScrollBar(MenuLibsScroll_State.ScrollBar, True);
		}
	}
	MenuLibsScroll_State.ScrollOffset = _Frame_Scroll.ScrollOffset;
	declare MenuLibsScroll_K_ScrollPosition NewScrollPosition = MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State);

	if (_ForceUpdate || OldScrollPosition.StartKey != NewScrollPosition.StartKey) {
		// Update pager throttle
		if (
			MenuLibsScroll_State.Config.PagerPageSize > 0 && (
				MenuLibsScroll_State.Pager.ThrottleEndTime >= 0 ||
				NewScrollPosition.StartKey <= MenuLibsScroll_State.Pager.Limits.X ||
				NewScrollPosition.StartKey >= MenuLibsScroll_State.Pager.Limits.Y
			)
		) {
			if (
				MenuLibsScroll_State.Pager.ThrottleEndTime >= 0 ||
				(MenuLibsScroll_State.Pager.CooldownEndTime >= 0 && Now < MenuLibsScroll_State.Pager.CooldownEndTime)
			) {
				MenuLibsScroll_State.Pager.ThrottleEndTime = Now + MenuLibsScroll_C_PagerThrottleDuration;
			} else {
				MenuLibsScroll_State.Pager.ThrottleEndTime = Now;
			}
		}

		declare MenuLibsScroll_K_Event Event = MenuLibsScroll_K_Event {
			Type = MenuLibsScroll_C_EventType_Update,
			Scroll = _Frame_Scroll,
			ElementsVisible = [],
			ElementsHidden = [],
			ScrollPosition = NewScrollPosition,
			Page = -1,
			DelayedElementsUpdate = !_ForceUpdate
		};
		if (MenuLibsScroll_State.Config.ElementsPerPage > 0) {
			Event.Page = (Event.ScrollPosition.StartKey / MenuLibsScroll_State.Config.ElementsPerPage) + 1;
		}
		foreach (Key => Frame_Element in MenuLibsScroll_State.Elements) {
			declare Integer ElementKey = NewScrollPosition.StartKey + Key;
			if (ElementKey >= 0) {
				if (ElementKey <= MenuLibsScroll_State.ElementsTotal - 1) {
					Event.ElementsVisible[ElementKey] = Frame_Element;
				} else {
					Event.ElementsHidden[ElementKey] = Frame_Element;
				}
			}
		}
		MenuLibsScroll_DelayedPendingEvents.add(Event);

		if (!Event.DelayedElementsUpdate) {
			// Update elements position now and cancel any pending update
			// to avoid moving the elements back to a previous position next frame
			MenuLibsScroll_Private_UpdateElementsPosition(MenuLibsScroll_State, Event.ScrollPosition);
			foreach (Key => Event in MenuLibsScroll_DelayedPendingEvents) {
				if (Event.Type == MenuLibsScroll_C_EventType_Update && Event.DelayedElementsUpdate) {
					MenuLibsScroll_DelayedPendingEvents[Key].DelayedElementsUpdate = False;
				}
			}
		}
		MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, NewScrollPosition.StartKey, MenuLibsScroll_State.FocusedElementKey, False, _SendFocusEvent, False);
	}

	MenuLibsScroll_Private_ApplySkew(MenuLibsScroll_State);

	if (NewScrollPosition.EndKey >= MenuLibsScroll_State.ElementsTotal - 1) {
		if (!MenuLibsScroll_State.IsDisplayingEnd) {
			MenuLibsScroll_State.IsDisplayingEnd = True;
			MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
				Type = MenuLibsScroll_C_EventType_DisplayEnd,
				Scroll = _Frame_Scroll
			});
		}
	} else {
		MenuLibsScroll_State.IsDisplayingEnd = False;
	}
	if (NewScrollPosition.StartKey <= 0) {
		if (!MenuLibsScroll_State.IsDisplayingStart) {
			MenuLibsScroll_State.IsDisplayingStart = True;
			MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
				Type = MenuLibsScroll_C_EventType_DisplayStart,
				Scroll = _Frame_Scroll
			});
		}
	} else {
		MenuLibsScroll_State.IsDisplayingStart = False;
	}

	if (MenuLibsScroll_State.EventGenerator != Null) {
		MenuLibsScroll_State.EventGenerator.RelativePosition_V3.Y = -MenuLibsScroll_State.ScrollOffset.Y;
	}

	if (MenuLibsScroll_State.ScrollIndicator != Null) {
		if (MenuLibsScroll_CanScroll(_Frame_Scroll) && MenuLibsScroll_State.ScrollOffset.Y < _Frame_Scroll.ScrollMax.Y - 0.1) {
			MenuLibsScroll_State.ScrollIndicator.Visible = True;
		} else {
			MenuLibsScroll_State.ScrollIndicator.Visible = False;
		}
	}

	if (MenuLibsScroll_State.ScrollBar != Null && MenuLibsScroll_State.ScrollBar.Visible) {
		declare Frame_ScrollBarFg <=> (MenuLibsScroll_State.ScrollBar.GetFirstChild("MenuLibsScroll_frame-scrollbar-fg") as CMlFrame);
		declare MenuLibsScroll_K_ScrollBarState MenuLibsScroll_ScrollBarState for Frame_ScrollBarFg;
		Frame_ScrollBarFg.RelativePosition_V3.Y = (_Frame_Scroll.Size.Y - MenuLibsScroll_ScrollBarState.Height) * -(MenuLibsScroll_State.ScrollOffset.Y / _Frame_Scroll.ScrollMax.Y);
	}

	if (MenuLibsScroll_State.ClampedControls.count > 0) {
		declare MenuLibsScroll_K_ClampedControl[] TmpClampedControls = MenuLibsScroll_State.ClampedControls;
		foreach (Key => ClampedControl in TmpClampedControls) {
			declare Boolean ClampUpdate = False;
			if (ClampedControl.Type == 2 || ClampedControl.Type == 0) {
				if (ClampedControl.Control.AbsolutePosition_V3.Y + ClampedControl.Origin > ClampedControl.Limit.X + ClampedControl.Control.RelativePosition_V3.Y) {
					ClampedControl.Control.RelativePosition_V3.Y += ClampedControl.Limit.X - ClampedControl.Control.AbsolutePosition_V3.Y;
					if (!ClampedControl.ClampedTop) {
						MenuLibsScroll_State.ClampedControls[Key].ClampedTop = True;
						ClampUpdate = True;
					}
				} else if (ClampedControl.ClampedTop) {
					ClampedControl.Control.RelativePosition_V3.Y = ClampedControl.Origin;
					MenuLibsScroll_State.ClampedControls[Key].ClampedTop = False;
					ClampUpdate = True;
				}
			}
			if (ClampedControl.Type == 2 || ClampedControl.Type == 1) {
				if (ClampedControl.Control.AbsolutePosition_V3.Y + ClampedControl.Origin < ClampedControl.Limit.Y + ClampedControl.Control.RelativePosition_V3.Y) {
					ClampedControl.Control.RelativePosition_V3.Y += ClampedControl.Limit.Y - ClampedControl.Control.AbsolutePosition_V3.Y;
					if (!ClampedControl.ClampedBottom) {
						MenuLibsScroll_State.ClampedControls[Key].ClampedBottom = True;
						ClampUpdate = True;
					}
				} else if (ClampedControl.ClampedBottom) {
					ClampedControl.Control.RelativePosition_V3.Y = ClampedControl.Origin;
					MenuLibsScroll_State.ClampedControls[Key].ClampedBottom = False;
					ClampUpdate = True;
				}
			}
			if (MenuLibsScroll_State.Config.SkewHeader) {
				MenuLibsScroll_Private_ApplySkewToControl(MenuLibsScroll_State, ClampedControl.Origin, ClampedControl.Control);
			}
			if (ClampUpdate) {
				MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
					Type = MenuLibsScroll_C_EventType_ClampUpdate,
					Scroll = _Frame_Scroll,
					ClampedControl = MenuLibsScroll_State.ClampedControls[Key]
				});
			}
		}
	}

	// Update the loading spinner position in the middle of the area containing currently visible elements
	// It won't be in the header or footer or outside the scroll bounds
	declare Real LoadingSpinnerTopLimit = MenuLibsScroll_ML::Min(_Frame_Scroll.AbsolutePosition_V3.Y - MenuLibsScroll_State.Config.HeaderHeight + _Frame_Scroll.ScrollOffset.Y, _Frame_Scroll.AbsolutePosition_V3.Y);
	declare Real LoadingSpinnerBottomLimit = _Frame_Scroll.AbsolutePosition_V3.Y - _Frame_Scroll.Size.Y;
	MenuLibsScroll_State.Frame_LoadingSpinner.RelativePosition_V3.Y = (LoadingSpinnerTopLimit + LoadingSpinnerBottomLimit) * 0.5; //< Center the loading spinner
	MenuLibsScroll_Private_ApplySkewToControl(MenuLibsScroll_State, - MenuLibsScroll_State.Config.HeaderHeight, MenuLibsScroll_State.Frame_LoadingSpinner);
}

Void MenuLibsScroll_Scroll(CMlFrame _Frame_Scroll, Real _ScrollDelta) {
	MenuLibsScroll_Private_Scroll(_Frame_Scroll, _ScrollDelta, False, False, True);
}

Void MenuLibsScroll_ScrollDelta(CMlFrame _Frame_Scroll, Real _ScrollDelta, Integer _AnimDuration) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (_AnimDuration > 0 && MenuLibsScroll_State.Config.AnimEnabled) {
		MenuLibsScroll_State.Animation = MenuLibsScroll_K_ScrollAnimation {
			StartTime = Now,
			ScrollStart = MenuLibsScroll_State.ScrollOffset.Y,
			ScrollDelta = _ScrollDelta,
			Duration = _AnimDuration
		};
	} else {
		MenuLibsScroll_Private_Scroll(_Frame_Scroll, _ScrollDelta / _Frame_Scroll.ScrollGrid.Y, False, False, True);
	}
}

Void MenuLibsScroll_ScrollToPosition(CMlFrame _Frame_Scroll, Real _ScrollTarget, Boolean _AllowAnimation) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (_AllowAnimation && MenuLibsScroll_State.Config.AnimEnabled) {
		MenuLibsScroll_State.Animation = MenuLibsScroll_K_ScrollAnimation {
			StartTime = Now,
			ScrollStart = MenuLibsScroll_State.ScrollOffset.Y,
			ScrollDelta = _ScrollTarget - MenuLibsScroll_State.ScrollOffset.Y,
			Duration = 250
		};
	} else {
		MenuLibsScroll_Private_Scroll(_Frame_Scroll, (_ScrollTarget - MenuLibsScroll_State.ScrollOffset.Y) / _Frame_Scroll.ScrollGrid.Y, False, False, True);
	}
}
Void MenuLibsScroll_ScrollToPosition(CMlFrame _Frame_Scroll, Real _ScrollTarget) {
	MenuLibsScroll_ScrollToPosition(_Frame_Scroll, _ScrollTarget, True);
}

Void MenuLibsScroll_ScrollToHeader(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (MenuLibsScroll_State.ScrollOffset.Y > _Frame_Scroll.ScrollMin.Y) {
		MenuLibsScroll_ScrollToPosition(_Frame_Scroll, _Frame_Scroll.ScrollMin.Y);
	}
}

Void MenuLibsScroll_ScrollToFooter(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (MenuLibsScroll_State.ScrollOffset.Y < _Frame_Scroll.ScrollMax.Y) {
		MenuLibsScroll_ScrollToPosition(_Frame_Scroll, _Frame_Scroll.ScrollMax.Y);
	}
}

Void MenuLibsScroll_ScrollToElement(CMlFrame _Frame_Scroll, Integer _ElementKey, Boolean _FocusElement) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (MenuLibsScroll_State.ElementsTotal <= 0) {
		MenuLibsScroll_ScrollToHeader(_Frame_Scroll);
	} else {
		declare Integer ElementKey = MenuLibsScroll_ML::Clamp(_ElementKey, 0, MenuLibsScroll_State.ElementsTotal - 1);

		if (_FocusElement) {
			MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, _ElementKey);
			ElementKey = MenuLibsScroll_State.FocusedElementKey;
		}

		declare Integer LineNb = ElementKey / MenuLibsScroll_State.Config.ElementsPerLine;
		declare Real StartY = MenuLibsScroll_State.Config.HeaderHeight + (LineNb * (MenuLibsScroll_State.Config.ElementSize.Y + MenuLibsScroll_State.Config.MarginSize.Y));
		declare Real EndY = StartY + MenuLibsScroll_State.Config.ElementSize.Y;

		// Try to display one line above and below the current focus
		if (MenuLibsScroll_State.Config.PreScrollEnabled && MenuLibsScroll_State.CanPreScroll) {
			if (MenuLibsScroll_State.Header != Null || ElementKey - MenuLibsScroll_State.Config.ElementsPerLine >= 0) {
				StartY -= MenuLibsScroll_State.Config.ElementSize.Y + MenuLibsScroll_State.Config.MarginSize.Y;
			}
			if (MenuLibsScroll_State.Footer != Null || ElementKey - (ElementKey % MenuLibsScroll_State.Config.ElementsPerLine) + MenuLibsScroll_State.Config.ElementsPerLine <= MenuLibsScroll_State.ElementsTotal - 1 ) {
				EndY += MenuLibsScroll_State.Config.ElementSize.Y + MenuLibsScroll_State.Config.MarginSize.Y;
			}
		}

		// Use NearestInteger to avoid precision error (100. > 100. can be true and false)
		if (MenuLibsScroll_ML::NearestInteger(MenuLibsScroll_State.ScrollOffset.Y) > MenuLibsScroll_ML::NearestInteger(StartY)) {
			MenuLibsScroll_ScrollToPosition(_Frame_Scroll, StartY);
		} else if (MenuLibsScroll_ML::NearestInteger(MenuLibsScroll_State.ScrollOffset.Y + MenuLibsScroll_State.Config.WindowSize.Y) < MenuLibsScroll_ML::NearestInteger(EndY)) {
			MenuLibsScroll_ScrollToPosition(_Frame_Scroll, EndY - MenuLibsScroll_State.Config.WindowSize.Y);
		}
	}
}
Void MenuLibsScroll_ScrollToElement(CMlFrame _Frame_Scroll, Integer _ElementKey) {
	MenuLibsScroll_ScrollToElement(_Frame_Scroll, _ElementKey, False);
}

Void MenuLibsScroll_Private_ApplyInput(CMlFrame _Frame_Scroll, CMlScriptEvent::EMenuNavAction _NavAction) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (!MenuLibsScroll_State.IsFocused) return;

	MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
		Type = MenuLibsScroll_C_EventType_NavAction,
		Scroll = _Frame_Scroll,
		To = MenuLibsScroll_State.FocusedElement,
		ToKey = MenuLibsScroll_State.FocusedElementKey,
		NavAction = _NavAction
	});
	switch (_NavAction) {
		case CMlScriptEvent::EMenuNavAction::Left: {
			if (MenuLibsScroll_State.FocusedElementKey % MenuLibsScroll_State.Config.ElementsPerLine != 0) {
				MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, MenuLibsScroll_State.FocusedElementKey - 1);
				MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
			} else {
				MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
					Type = MenuLibsScroll_C_EventType_ReachLimit,
					Scroll = _Frame_Scroll,
					From = MenuLibsScroll_State.FocusedElement,
					FromKey = MenuLibsScroll_State.FocusedElementKey,
					NavAction = _NavAction
				});
			}
		}
		case CMlScriptEvent::EMenuNavAction::Right: {
			if (
				MenuLibsScroll_State.FocusedElementKey % MenuLibsScroll_State.Config.ElementsPerLine != MenuLibsScroll_State.Config.ElementsPerLine - 1 &&
				MenuLibsScroll_State.FocusedElementKey < MenuLibsScroll_State.ElementsTotal - 1
			) {
				MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, MenuLibsScroll_State.FocusedElementKey + 1);
				MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
			} else {
				MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
					Type = MenuLibsScroll_C_EventType_ReachLimit,
					Scroll = _Frame_Scroll,
					From = MenuLibsScroll_State.FocusedElement,
					FromKey = MenuLibsScroll_State.FocusedElementKey,
					NavAction = _NavAction
				});
			}
		}
		case CMlScriptEvent::EMenuNavAction::Up: {
			if (MenuLibsScroll_State.FocusedElementKey > MenuLibsScroll_State.Config.ElementsPerLine - 1) {
				MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, MenuLibsScroll_State.FocusedElementKey - MenuLibsScroll_State.Config.ElementsPerLine);
				MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
			} else {
				if (MenuLibsScroll_State.Header != Null) {
					MenuLibsScroll_ScrollToHeader(_Frame_Scroll);
				}
				MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
					Type = MenuLibsScroll_C_EventType_ReachLimit,
					Scroll = _Frame_Scroll,
					From = MenuLibsScroll_State.FocusedElement,
					FromKey = MenuLibsScroll_State.FocusedElementKey,
					NavAction = _NavAction
				});
			}
		}
		case CMlScriptEvent::EMenuNavAction::Down: {
			if (MenuLibsScroll_State.FocusedElementKey + MenuLibsScroll_State.Config.ElementsPerLine < MenuLibsScroll_State.ElementsTotal) {
				MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, MenuLibsScroll_State.FocusedElementKey + MenuLibsScroll_State.Config.ElementsPerLine);
				MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
			} else if (
				MenuLibsScroll_State.FocusedElementKey < MenuLibsScroll_State.ElementsTotal - 1 &&
				MenuLibsScroll_State.FocusedElementKey / MenuLibsScroll_State.Config.ElementsPerLine != (MenuLibsScroll_State.ElementsTotal - 1) / MenuLibsScroll_State.Config.ElementsPerLine
			) {
				MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, MenuLibsScroll_State.ElementsTotal - 1);
				MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
			} else {
				if (MenuLibsScroll_State.Footer != Null){
					MenuLibsScroll_ScrollToFooter(_Frame_Scroll);
				}
				MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
					Type = MenuLibsScroll_C_EventType_ReachLimit,
					Scroll = _Frame_Scroll,
					From = MenuLibsScroll_State.FocusedElement,
					FromKey = MenuLibsScroll_State.FocusedElementKey,
					NavAction = _NavAction
				});
			}
		}
		case CMlScriptEvent::EMenuNavAction::Select: {
			MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
				Type = MenuLibsScroll_C_EventType_Select,
				Scroll = _Frame_Scroll,
				To = MenuLibsScroll_State.FocusedElement,
				ToKey = MenuLibsScroll_State.FocusedElementKey
			});
		}
		case CMlScriptEvent::EMenuNavAction::Cancel: {
			MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
				Type = MenuLibsScroll_C_EventType_Cancel,
				Scroll = _Frame_Scroll,
				To = MenuLibsScroll_State.FocusedElement,
				ToKey = MenuLibsScroll_State.FocusedElementKey
			});
		}
	}
}

Boolean MenuLibsScroll_IsScroll(CMlControl _Control_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Control_Scroll;
	return MenuLibsScroll_State.IsInitialized;
}

Boolean MenuLibsScroll_IsControlClamped(CMlControl _Frame_Scroll, CMlControl _Control) {
	if (_Control == Null || !MenuLibsScroll_IsScroll(_Frame_Scroll)) return False;
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;

	foreach (ClampedControl in MenuLibsScroll_State.ClampedControls) {
		if (ClampedControl.Control.Id == _Control.Id) {
			return (ClampedControl.ClampedTop || ClampedControl.ClampedBottom);
		}
	}

	return False;
}

Void MenuLibsScroll_Focus(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_State.IsFocused = True;

	declare Integer ElementKeyMax = MenuLibsScroll_State.ElementsTotal - 1;
	if (MenuLibsScroll_State.FocusedElementKey < 0) {
		MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, 0, 0);
		MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
	} else if (MenuLibsScroll_State.FocusedElementKey > ElementKeyMax && ElementKeyMax >= 0) {
		MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, ElementKeyMax - (ElementKeyMax % MenuLibsScroll_State.Config.ElementsPerLine), ElementKeyMax);
		MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
	} else {
		MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, MenuLibsScroll_State.FocusedElementKey);
	}
}

Void MenuLibsScroll_Unfocus(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_State.IsFocused = False;

	// Send a focus event but do not update State.FocusedElement
	// This way we can go back to the previously
	// focused element the next time the scroll is focused
	MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
		Type = MenuLibsScroll_C_EventType_Focus,
		Scroll = _Frame_Scroll,
		From = MenuLibsScroll_State.FocusedElement,
		FromKey = MenuLibsScroll_State.FocusedElementKey,
		To = Null,
		ToKey = -1,
		PlayFocusAnimation = True
	});
}

CMlFrame MenuLibsScroll_GetFocusedElement(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return MenuLibsScroll_State.FocusedElement;
}

Integer MenuLibsScroll_GetFocusedElementKey(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return MenuLibsScroll_State.FocusedElementKey;
}

Boolean MenuLibsScroll_IsFocused(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return MenuLibsScroll_State.IsFocused;
}

/**	Use the local menu navigation events
 *	instead of the events shared by the
 *	ShareMenuNavigation component
 */
Void MenuLibsScroll_UseLocalEvents(Boolean _Enable) {
	MenuLibsScroll_G_UseLocalEvents = _Enable;
}

Void MenuLibsScroll_LockNavigation(CMlFrame _Frame_Scroll, Boolean _Locked) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	// Update lock position only if the scroll was not already locked
	if (_Locked && MenuLibsScroll_State.ScrollLocked != _Locked) {
		MenuLibsScroll_State.ScrollLockPosition = MenuLibsScroll_State.ScrollOffset;
	}
	MenuLibsScroll_State.ScrollLocked = _Locked;
}

Void MenuLibsScroll_LockNavigation(Boolean _Locked) {
	foreach (Frame_Scroll in MenuLibsScroll_G_Frames_Scroll) {
		MenuLibsScroll_LockNavigation(Frame_Scroll, _Locked);
	}
}

Boolean MenuLibsScroll_NavigationIsLocked(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return MenuLibsScroll_State.ScrollLocked;
}

Void MenuLibsScroll_Private_UpdateScrollBarState(CMlFrame _Frame_ScrollBarFg, Integer _Action) {
	declare Boolean MenuLibsScroll_Clicked for _Frame_ScrollBarFg;
	declare Boolean MenuLibsScroll_Overed for _Frame_ScrollBarFg;

	switch (_Action) {
		case MenuLibsScroll_C_Action_Click: {
			MenuLibsScroll_Clicked = True;
		}
		case MenuLibsScroll_C_Action_Unclick: {
			MenuLibsScroll_Clicked = False;
		}
		case MenuLibsScroll_C_Action_Over: {
			MenuLibsScroll_Overed = True;
		}
		case MenuLibsScroll_C_Action_Out: {
			MenuLibsScroll_Overed = False;
		}
	}

	foreach (Control in _Frame_ScrollBarFg.Controls) {
		declare CMlQuad Quad_ScrollBarFg = (Control as CMlQuad);
		if (MenuLibsScroll_Clicked) {
			Quad_ScrollBarFg.Colorize = MenuLibsScroll_CL::Hex6ToRgb("555555");
		} else if (MenuLibsScroll_Overed) {
			Quad_ScrollBarFg.Colorize = MenuLibsScroll_CL::Hex6ToRgb("777777");
		} else {
			Quad_ScrollBarFg.Colorize = MenuLibsScroll_CL::Hex6ToRgb("ffffff");
		}
	}
}

// Prevent the user from focusing some elements in the scroll
Void MenuLibsScroll_LockElements(CMlFrame _Frame_Scroll, Integer[] _ElementKeys) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (!MenuLibsScroll_State.IsInitialized) return;

	foreach (ElementKey in _ElementKeys) {
		if (!MenuLibsScroll_State.LockedElements.exists(ElementKey)) {
			MenuLibsScroll_State.LockedElements.add(ElementKey);
		}
	}

	if (MenuLibsScroll_State.LockedElements.exists(MenuLibsScroll_State.FocusedElementKey)) {
		MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State).StartKey, MenuLibsScroll_State.FocusedElementKey);
	}
}
Void MenuLibsScroll_LockElement(CMlFrame _Frame_Scroll, Integer _ElementKey) {
	MenuLibsScroll_LockElements(_Frame_Scroll, [_ElementKey]);
}

Void MenuLibsScroll_UnlockElements(CMlFrame _Frame_Scroll, Integer[] _ElementKeys) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (!MenuLibsScroll_State.IsInitialized) return;

	foreach (ElementKey in _ElementKeys) {
		MenuLibsScroll_State.LockedElements.remove(ElementKey);
	}
}
Void MenuLibsScroll_UnlockElement(CMlFrame _Frame_Scroll, Integer _ElementKey) {
	MenuLibsScroll_UnlockElements(_Frame_Scroll, [_ElementKey]);
}

Void MenuLibsScroll_UnlockAllElements(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (!MenuLibsScroll_State.IsInitialized) return;
	MenuLibsScroll_State.LockedElements = [];
}

Integer[] MenuLibsScroll_GetLockedElements(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (!MenuLibsScroll_State.IsInitialized) return [];
	return MenuLibsScroll_State.LockedElements;
}

Boolean MenuLibsScroll_ElementIsLocked(CMlFrame _Frame_Scroll, Integer _ElementKey) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return (MenuLibsScroll_State.IsInitialized && MenuLibsScroll_State.LockedElements.exists(_ElementKey));
}

Integer MenuLibsScroll_GetElementsTotal(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return MenuLibsScroll_State.ElementsTotal;
}

Void MenuLibsScroll_SetElementsTotal(CMlFrame _Frame_Scroll, Integer _ElementsTotal, Boolean _SendFocusEvent) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (!MenuLibsScroll_State.IsInitialized) return;

	MenuLibsScroll_State.ElementsTotal = _ElementsTotal;
	MenuLibsScroll_State.IsDisplayingStart = False;
	MenuLibsScroll_State.IsDisplayingEnd = False;

	declare Integer LinesNb = MenuLibsScroll_State.ElementsTotal / MenuLibsScroll_State.Config.ElementsPerLine;
	if (MenuLibsScroll_State.ElementsTotal % MenuLibsScroll_State.Config.ElementsPerLine > 0) LinesNb += 1;
	_Frame_Scroll.ScrollMax = <0., MenuLibsScroll_ML::Max(0., MenuLibsScroll_State.Config.HeaderHeight + (LinesNb * (MenuLibsScroll_State.Config.ElementSize.Y + MenuLibsScroll_State.Config.MarginSize.Y)) - MenuLibsScroll_State.Config.MarginSize.Y + MenuLibsScroll_State.Config.FooterHeight - _Frame_Scroll.Size.Y)>;

	if (MenuLibsScroll_State.Footer != Null) {
		MenuLibsScroll_State.Footer.RelativePosition_V3.Y = -MenuLibsScroll_State.Config.HeaderHeight - (LinesNb * (MenuLibsScroll_State.Config.ElementSize.Y + MenuLibsScroll_State.Config.MarginSize.Y)) + MenuLibsScroll_State.Config.MarginSize.Y;
	}

	if (MenuLibsScroll_State.ScrollBar != Null) {
		MenuLibsScroll_State.ScrollBar.Visible = MenuLibsScroll_CanScroll(_Frame_Scroll);
		MenuLibsScroll_Private_SetScrollBarSize((MenuLibsScroll_State.ScrollBar.GetFirstChild("MenuLibsScroll_frame-scrollbar-fg") as CMlFrame), <
			MenuLibsScroll_State.ScrollBarWidth,
			MenuLibsScroll_ML::Max(MenuLibsScroll_ML::Min(10., _Frame_Scroll.Size.Y), (_Frame_Scroll.Size.Y / (_Frame_Scroll.Size.Y + _Frame_Scroll.ScrollMax.Y)) * _Frame_Scroll.Size.Y)
		>);
	}

	declare Integer ElementKeyMax = MenuLibsScroll_State.ElementsTotal - 1;
	if (MenuLibsScroll_State.FocusedElementKey > ElementKeyMax) {
		MenuLibsScroll_Private_SetFocusedElementKey(_Frame_Scroll, ElementKeyMax - (ElementKeyMax % MenuLibsScroll_State.Config.ElementsPerLine), ElementKeyMax, False, _SendFocusEvent);
		MenuLibsScroll_ScrollToElement(_Frame_Scroll, MenuLibsScroll_State.FocusedElementKey);
	}

	// If an animation is ongoing check that it is
	// still inside the new bounds
	if (MenuLibsScroll_State.Animation.StartTime >= 0) {
		declare Real ScrollTarget = MenuLibsScroll_State.Animation.ScrollStart + MenuLibsScroll_State.Animation.ScrollDelta;
		if (ScrollTarget >= 0. && ScrollTarget <= _Frame_Scroll.ScrollMax.Y) {
			MenuLibsScroll_Private_Scroll(_Frame_Scroll, 0., True, True, _SendFocusEvent);
		} else {
			// Scroll to new bound
			ScrollTarget = MenuLibsScroll_ML::Clamp(ScrollTarget, 0., _Frame_Scroll.ScrollMax.Y);
			MenuLibsScroll_Private_Scroll(_Frame_Scroll, (ScrollTarget - MenuLibsScroll_State.ScrollOffset.Y) / _Frame_Scroll.ScrollGrid.Y, True, False, _SendFocusEvent);
		}
	} else {
		MenuLibsScroll_Private_Scroll(_Frame_Scroll, 0., True, False, _SendFocusEvent);
	}
}
Void MenuLibsScroll_SetElementsTotal(CMlFrame _Frame_Scroll, Integer _ElementsTotal) {
	MenuLibsScroll_SetElementsTotal(_Frame_Scroll, _ElementsTotal, True);
}

Void MenuLibsScroll_TriggerPagerUpdate(CMlFrame _Frame_Scroll, Text[] _EventCustomData) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	if (!MenuLibsScroll_State.IsInitialized) return;
	MenuLibsScroll_State.Pager.ThrottleEndTime = Now;
	MenuLibsScroll_State.EventCustomData.add(_EventCustomData);
}
Void MenuLibsScroll_TriggerPagerUpdate(CMlFrame _Frame_Scroll) {
	MenuLibsScroll_TriggerPagerUpdate(_Frame_Scroll, []);
}

Void MenuLibsScroll_ClearAllCustomData(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_State.EventCustomData = [];

}

CMlFrame[Integer] MenuLibsScroll_GetElementsVisible(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	declare MenuLibsScroll_K_ScrollPosition ScrollPosition = MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State);
	declare CMlFrame[Integer] ElementsVisible;

	foreach (Key => Frame_Element in MenuLibsScroll_State.Elements) {
		declare Integer ElementKey = ScrollPosition.StartKey + Key;
		if (ElementKey >= 0 && ElementKey <= MenuLibsScroll_State.ElementsTotal - 1) {
			ElementsVisible[ElementKey] = Frame_Element;
		}
	}

	return ElementsVisible;
}

CMlFrame MenuLibsScroll_GetElementVisible(CMlFrame _Frame_Scroll, Integer _ElementKey) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	declare MenuLibsScroll_K_ScrollPosition ScrollPosition = MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_State);
	if (
		_ElementKey >= ScrollPosition.StartKey &&
		_ElementKey <= MenuLibsScroll_State.ElementsTotal - 1 &&
		MenuLibsScroll_State.Elements.existskey(_ElementKey - ScrollPosition.StartKey)
	) {
		return MenuLibsScroll_State.Elements[_ElementKey - ScrollPosition.StartKey];
	}
	return Null;
}

Integer MenuLibsScroll_GetElementsPerLine(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return MenuLibsScroll_State.Config.ElementsPerLine;
}

Void MenuLibsScroll_SetHeaderHeight(CMlFrame _Frame_Scroll, Real _Height) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_State.Config.HeaderHeight = _Height;
	MenuLibsScroll_SetElementsTotal(_Frame_Scroll, MenuLibsScroll_State.ElementsTotal, False);
}

Void MenuLibsScroll_SetFooterHeight(CMlFrame _Frame_Scroll, Real _Height) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_State.Config.FooterHeight = _Height;
	MenuLibsScroll_SetElementsTotal(_Frame_Scroll, MenuLibsScroll_State.ElementsTotal, False);
}

Void MenuLibsScroll_SetScrollIndicatorOffset(CMlFrame _Frame_Scroll, Vec2 _Offset) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_State.Config.ScrollIndicatorXOffset = _Offset.X;
	MenuLibsScroll_State.Config.ScrollIndicatorYOffset = _Offset.Y;
	if (MenuLibsScroll_State.ScrollIndicator != Null) {
		MenuLibsScroll_State.ScrollIndicator.RelativePosition_V3 = MenuLibsScroll_State.ScrollIndicatorBaseOffset + <_Frame_Scroll.Size.X * 0.5 + MenuLibsScroll_State.Config.ScrollIndicatorXOffset, -_Frame_Scroll.Size.Y + MenuLibsScroll_State.Config.ScrollIndicatorYOffset>;
	}
}

Void MenuLibsScroll_Display(CMlFrame _Frame_Scroll, Boolean _Display) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	_Frame_Scroll.Visible = _Display;
	if (MenuLibsScroll_State.ScrollBar != Null) {
		MenuLibsScroll_State.ScrollBar.Visible = _Frame_Scroll.Visible;
	}
	if (MenuLibsScroll_State.ScrollIndicator != Null) {
		MenuLibsScroll_State.ScrollIndicator.Visible = _Frame_Scroll.Visible;
	}
	if (_Display) {
		MenuLibsScroll_SetElementsTotal(_Frame_Scroll, MenuLibsScroll_State.ElementsTotal, False);
	}
}
Void MenuLibsScroll_Show(CMlFrame _Frame_Scroll) {
	MenuLibsScroll_Display(_Frame_Scroll, True);
}
Void MenuLibsScroll_Hide(CMlFrame _Frame_Scroll) {
	MenuLibsScroll_Display(_Frame_Scroll, False);
}

// Display a loading spinner instead of scroll elements
Boolean MenuLibsScroll_IsLoadingElements(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	return ComponentLoadingSpinner_IsLoading(MenuLibsScroll_State.Frame_LoadingSpinner);
}

// Display a loading spinner instead of scroll elements
Void MenuLibsScroll_LoadElements(CMlFrame _Frame_Scroll, Text _LoadingText, Boolean _IsLoading) {
	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;

	ComponentLoadingSpinner_SetLabel(MenuLibsScroll_State.Frame_LoadingSpinner, _LoadingText);
	ComponentLoadingSpinner_SetIsLoading(MenuLibsScroll_State.Frame_LoadingSpinner, _IsLoading);
	MenuLibsScroll_LockNavigation(_Frame_Scroll, _IsLoading);
	foreach (Element in MenuLibsScroll_GetElementsVisible(_Frame_Scroll)) {
		Element.Visible = !_IsLoading;
	}
	if (MenuLibsScroll_State.ScrollIndicator != Null) {
		MenuLibsScroll_State.ScrollIndicator.Visible = !_IsLoading;
	}
}
Void MenuLibsScroll_LoadElements(CMlFrame _Frame_Scroll, Boolean _IsLoading) {
	MenuLibsScroll_LoadElements(_Frame_Scroll, "", _IsLoading);
}

Void MenuLibsScroll_Private_Init(CMlFrame _Frame_Scroll) {
	declare MenuLibsScroll_K_Config Config = MenuLibsScroll_K_Config {
		DefaultElementsTotal = 0,
		ElementsPerLine = 0,
		ElementsPerPage = -1,
		ElementSize = <0., 0.>,
		MarginSize = <0., 0.>,
		WindowSize = <0., 0.>,
		HeaderHeight = 0.,
		FooterHeight = 0.,
		ScrollIndicator = True,
		ScrollIndicatorYOffset = 0.,
		ScrollIndicatorXOffset = 0.,
		AnimEnabled = True,
		PreScrollEnabled = True,
		ScrollGrid = <8., 8.>,
		ScrollBarVisibility = MenuLibsScroll_C_ScrollBarVisibility_DuringScroll,
		ScrollPadding = 0.,
		Skew = 0.,
		SkewHeader = False,
		SkewFooter = False,
		SkewVAlign = MenuLibsScroll_C_SkewVAlign_Top,
		ScrollIndicatorColorize = <-1., -1., -1.>,
		PagerPageSize = 0,
		PagerTriggerSize = 0,
		PagerMarginSize = 0
	};
	if (_Frame_Scroll.DataAttributeExists("config")) {
		Config.fromjson(_Frame_Scroll.DataAttributeGet("config"));
	}
	if (_Frame_Scroll.DataAttributeExists("elements-total")) {
		Config.DefaultElementsTotal = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("elements-total"));
	}
	if (_Frame_Scroll.DataAttributeExists("elements-per-line")) {
		Config.ElementsPerLine = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("elements-per-line"));
	}
	if (_Frame_Scroll.DataAttributeExists("elements-per-page")) {
		Config.ElementsPerPage = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("elements-per-page"));
	}
	if (_Frame_Scroll.DataAttributeExists("element-size")) {
		Config.ElementSize = ComponentMenuLibsTools_TextToVec2(_Frame_Scroll.DataAttributeGet("element-size"));
	}
	if (_Frame_Scroll.DataAttributeExists("margin-size")) {
		Config.MarginSize = ComponentMenuLibsTools_TextToVec2(_Frame_Scroll.DataAttributeGet("margin-size"));
	}
	if (_Frame_Scroll.DataAttributeExists("window-size")) {
		Config.WindowSize = ComponentMenuLibsTools_TextToVec2(_Frame_Scroll.DataAttributeGet("window-size"));
	}
	if (_Frame_Scroll.DataAttributeExists("header-height")) {
		Config.HeaderHeight = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("header-height"));
	}
	if (_Frame_Scroll.DataAttributeExists("footer-height")) {
		Config.FooterHeight = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("footer-height"));
	}
	if (_Frame_Scroll.DataAttributeExists("scroll-indicator")) {
		Config.ScrollIndicator = ComponentMenuLibsTools_TextToBoolean(_Frame_Scroll.DataAttributeGet("scroll-indicator"));
	}
	if (_Frame_Scroll.DataAttributeExists("scroll-indicator-y-offset")) {
		Config.ScrollIndicatorYOffset = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("scroll-indicator-y-offset"));
	}
	if (_Frame_Scroll.DataAttributeExists("scroll-indicator-x-offset")) {
		Config.ScrollIndicatorXOffset = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("scroll-indicator-x-offset"));
	}
	if (_Frame_Scroll.DataAttributeExists("enable-anim")) {
		Config.AnimEnabled = ComponentMenuLibsTools_TextToBoolean(_Frame_Scroll.DataAttributeGet("enable-anim"));
	}
	if (_Frame_Scroll.DataAttributeExists("enable-prescroll")) {
		Config.PreScrollEnabled = ComponentMenuLibsTools_TextToBoolean(_Frame_Scroll.DataAttributeGet("enable-prescroll"));
	}
	if (_Frame_Scroll.DataAttributeExists("scroll-grid-size")) {
		Config.ScrollGrid = ComponentMenuLibsTools_TextToVec2(_Frame_Scroll.DataAttributeGet("scroll-grid-size"));
	}
	if (_Frame_Scroll.DataAttributeExists("scrollbar-visibility")) {
		Config.ScrollBarVisibility = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("scrollbar-visibility"));
	}
	if (_Frame_Scroll.DataAttributeExists("scrollpadding")) {
		Config.ScrollPadding = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("scrollpadding"));
	}
	if (_Frame_Scroll.DataAttributeExists("skew")) {
		Config.Skew = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("skew"));
	}
	if (_Frame_Scroll.DataAttributeExists("skew-header")) {
		Config.SkewHeader = ComponentMenuLibsTools_TextToBoolean(_Frame_Scroll.DataAttributeGet("skew-header"));
	}
	if (_Frame_Scroll.DataAttributeExists("skew-footer")) {
		Config.SkewFooter = ComponentMenuLibsTools_TextToBoolean(_Frame_Scroll.DataAttributeGet("skew-footer"));
	}
	if (_Frame_Scroll.DataAttributeExists("skew-valign")) {
		Config.SkewVAlign = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("skew-valign"));
	}
	if (_Frame_Scroll.DataAttributeExists("scroll-indicator-image")) {
		Config.ScrollIndicatorImage = _Frame_Scroll.DataAttributeGet("scroll-indicator-image");
	}
	if (_Frame_Scroll.DataAttributeExists("scroll-indicator-colorize")) {
		Config.ScrollIndicatorColorize = MenuLibsScroll_CL::HexToRgb(_Frame_Scroll.DataAttributeGet("scroll-indicator-colorize"));
	}
	if (_Frame_Scroll.DataAttributeExists("scroll-indicator-size")) {
		Config.ScrollIndicatorSize = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("scroll-indicator-size"));
	}
	if (_Frame_Scroll.DataAttributeExists("scrollbar-xoffset")) {
		Config.ScrollBarXOffset = MenuLibsScroll_TL::ToReal(_Frame_Scroll.DataAttributeGet("scrollbar-xoffset"));
	}
	if (_Frame_Scroll.DataAttributeExists("pager-page-size")) {
		Config.PagerPageSize = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("pager-page-size"));
	}
	if (_Frame_Scroll.DataAttributeExists("pager-trigger-size")) {
		Config.PagerTriggerSize = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("pager-trigger-size"));
	}
	if (_Frame_Scroll.DataAttributeExists("pager-margin-size")) {
		Config.PagerMarginSize = MenuLibsScroll_TL::ToInteger(_Frame_Scroll.DataAttributeGet("pager-margin-size"));
	}

	assert(Config.DefaultElementsTotal >= 0, "Incorrect 'elements-total' value: "^Config.DefaultElementsTotal);
	assert(Config.ElementsPerLine > 0, "Incorrect 'elements-per-line' value: "^Config.ElementsPerLine);
	assert(Config.ElementSize.X > 0. && Config.ElementSize.Y > 0., "Incorrect 'element-size' value: "^Config.ElementSize);
	assert(Config.MarginSize.X >= 0. && Config.MarginSize.Y >= 0., "Incorrect 'margin-size' value: "^Config.MarginSize);
	assert(Config.WindowSize.X > 0. && Config.WindowSize.Y > 0., "Incorrect 'window-size' value: "^Config.WindowSize);
	assert(Config.HeaderHeight >= 0., "Incorrect 'header-height' value: "^Config.HeaderHeight);
	assert(Config.FooterHeight >= 0., "Incorrect 'footer-height' value: "^Config.FooterHeight);
	assert(Config.ScrollGrid.X >= 0. && Config.ScrollGrid.Y >= 0., "Incorrect 'scroll-grid-size' value: "^Config.ScrollGrid);

	declare MenuLibsScroll_K_State MenuLibsScroll_State for _Frame_Scroll;
	MenuLibsScroll_State = MenuLibsScroll_K_State {
		Config = Config,
		Animation = MenuLibsScroll_K_ScrollAnimation {
			StartTime = -1,
			ScrollStart = 0.,
			ScrollDelta = 0.,
			Duration = 0
		},
		ElementsTotal = Config.DefaultElementsTotal,
		Elements = [],
		Header = Null,
		Footer = Null,
		IsFocused = False,
		FocusedElementKey = -1,
		FocusedElement = Null,
		ScrollIndicator = Null,
		CanPreScroll = False,
		IsDisplayingStart = False,
		IsDisplayingEnd = False,
		ScrollOffset = <0., 0.>,
		IsInitialized = True,
		ScrollBarWidth = 2.,
		ScrollBarHideTime = -1,
		ScrollLocked = False,
		ScrollLockPosition = <0., 0.>,
		LockedElements = [],
		Frame_LoadingSpinner = Null
	};

	_Frame_Scroll.ScrollActive = True;
	_Frame_Scroll.ScrollOffset = <0., 0.>;
	_Frame_Scroll.ScrollGrid = MenuLibsScroll_State.Config.ScrollGrid;
	_Frame_Scroll.ScrollMin = <0., 0.>;
	_Frame_Scroll.Size = MenuLibsScroll_State.Config.WindowSize;
	_Frame_Scroll.Size.X += MenuLibsScroll_State.Config.ScrollPadding * 2.;
	_Frame_Scroll.RelativePosition_V3.X -= MenuLibsScroll_State.Config.ScrollPadding;

	// Get scroll locked state
	if (_Frame_Scroll.DataAttributeExists("scroll-locked")) {
		MenuLibsScroll_State.ScrollLocked = ComponentMenuLibsTools_TextToBoolean(_Frame_Scroll.DataAttributeGet("scroll-locked"));
	}

	// Get scroll elements
	declare Integer VisibleLinesNb = MenuLibsScroll_ML::CeilingInteger(MenuLibsScroll_State.Config.WindowSize.Y / (MenuLibsScroll_State.Config.ElementSize.Y + MenuLibsScroll_State.Config.MarginSize.Y)) + 1;
	MenuLibsScroll_State.CanPreScroll = VisibleLinesNb > 3;
	declare Integer RequiredElementsNb = MenuLibsScroll_State.Config.ElementsPerLine * VisibleLinesNb;
	Page.GetClassChildren("menu-libs-scroll-element", _Frame_Scroll, False);
	declare CMlFrame[] Frames_Element;
	foreach (Control in Page.GetClassChildren_Result) {
		assert((Control is CMlFrame), "The 'Scroll::C_Class_Element' controls must be CMlFrame");
		declare CMlFrame Frame_Element = (Control as CMlFrame); //< Point to the frame instead of the array key
		Frames_Element.add(Frame_Element);
	}
	assert(Frames_Element.count == RequiredElementsNb, "You must add "^RequiredElementsNb^" frames with a class of 'Scroll::C_Class_Element' as direct child of the scroll frame '"^_Frame_Scroll.ControlId^"'. Found "^Frames_Element.count);
	MenuLibsScroll_State.Elements = Frames_Element;

	// Get scroll header
	Page.GetClassChildren("menu-libs-scroll-header", _Frame_Scroll, False);
	declare CMlFrame Frame_Header;
	foreach (Control in Page.GetClassChildren_Result) {
		assert((Control is CMlFrame), "The 'Scroll::C_Class_Header' control must be CMlFrame");
		Frame_Header = (Control as CMlFrame); //< Point to the frame instead of the array key
	}
	MenuLibsScroll_State.Header = Frame_Header;
	if (MenuLibsScroll_State.Header != Null) {
		declare Real MenuLibsScroll_BasePosX for MenuLibsScroll_State.Header;
		MenuLibsScroll_State.Header.RelativePosition_V3.X += MenuLibsScroll_State.Config.ScrollPadding;
		MenuLibsScroll_BasePosX = MenuLibsScroll_State.Header.RelativePosition_V3.X;
	}

	// Get scroll footer
	Page.GetClassChildren("menu-libs-scroll-footer", _Frame_Scroll, False);
	declare CMlFrame Frame_Footer;
	foreach (Control in Page.GetClassChildren_Result) {
		assert((Control is CMlFrame), "The 'Scroll::C_Class_Footer' control must be CMlFrame");
		Frame_Footer = (Control as CMlFrame); //< Point to the frame instead of the array key
	}
	MenuLibsScroll_State.Footer = Frame_Footer;
	if (MenuLibsScroll_State.Footer != Null) {
		declare Real MenuLibsScroll_BasePosX for MenuLibsScroll_State.Footer;
		MenuLibsScroll_State.Footer.RelativePosition_V3.X += MenuLibsScroll_State.Config.ScrollPadding;
		MenuLibsScroll_BasePosX = MenuLibsScroll_State.Footer.RelativePosition_V3.X;
	}

	// Find elements activation zones
	foreach (RelativeKey => Element in MenuLibsScroll_State.Elements) {
		Page.GetClassChildren("menu-libs-scroll-activation-zone", Element, True);
		foreach (Control in Page.GetClassChildren_Result) {
			declare MenuLibsScroll_K_ActivationZone MenuLibsScroll_ActivationZone for Control;
			MenuLibsScroll_ActivationZone = MenuLibsScroll_K_ActivationZone {
				Scroll = _Frame_Scroll,
				ElementRelativeKey = RelativeKey,
				Element = Element
			};
		}
	}

	// Find event generator
	Page.GetClassChildren("menu-libs-scroll-event", _Frame_Scroll, False);
	declare CMlQuad Quad_EventGenerator;
	foreach (Control in Page.GetClassChildren_Result) {
		assert((Control is CMlQuad), "The 'Scroll::C_Class_ScrollEvent' control must be CMlQuad");
		Quad_EventGenerator = (Control as CMlQuad); //< Point to the frame instead of the array key
	}
	if (Quad_EventGenerator != Null) {
		Quad_EventGenerator.RelativePosition_V3 = <0., 0.>;
		Quad_EventGenerator.Size = _Frame_Scroll.Size;
		Quad_EventGenerator.Opacity = 0.;
	}
	MenuLibsScroll_State.EventGenerator = Quad_EventGenerator;

	// Find the scroll frameinstance associated to this scroll window
	declare CMlLabel Label_ScrollIndicator;
	declare CMlQuad Quad_ScrollIndicator;
	declare CMlFrame Frame_ScrollBar;
	if (
		MenuLibsScroll_State.Config.ScrollIndicator ||
		MenuLibsScroll_State.Config.ScrollBarVisibility == MenuLibsScroll_C_ScrollBarVisibility_Always ||
		MenuLibsScroll_State.Config.ScrollBarVisibility == MenuLibsScroll_C_ScrollBarVisibility_DuringScroll
	) {
		Page.GetClassChildren("MenuLibsScroll_scroll-widgets", Page.MainFrame, True);
		foreach (Control in Page.GetClassChildren_Result) {
			if (Control.Parent.DataAttributeExists("scroll-parent")) {
				if (Control.Parent.DataAttributeGet("scroll-parent") == _Frame_Scroll.ControlId) {
					declare Frame_ScrollWidgets = (Control as CMlFrame);
					MenuLibsScroll_State.Frame_LoadingSpinner <=> (Frame_ScrollWidgets.GetFirstChild("MenuLibsScroll_frame-loading-spinner") as CMlFrame);
					Label_ScrollIndicator <=> (Frame_ScrollWidgets.GetFirstChild("MenuLibsScroll_label-scroll-indicator") as CMlLabel);
					Quad_ScrollIndicator <=> (Frame_ScrollWidgets.GetFirstChild("MenuLibsScroll_quad-scroll-indicator") as CMlQuad);
					Frame_ScrollBar <=> (Frame_ScrollWidgets.GetFirstChild("MenuLibsScroll_frame-scrollbar") as CMlFrame);
					declare CMlFrame MenuLibsScroll_Scroll as ScrollForLabel for Label_ScrollIndicator;
					declare CMlFrame MenuLibsScroll_Scroll as ScrollForQuad for Quad_ScrollIndicator;
					ScrollForLabel = _Frame_Scroll;
					ScrollForQuad = _Frame_Scroll;
					break;
				}
			}
		}
	}

	// Initialize scroll indicator
	if (MenuLibsScroll_State.Config.ScrollIndicator) {
		assert(Label_ScrollIndicator != Null, "You must add a 'Scroll::C_Name' frameinstance next to the scroll window frame to enable the scroll indicator");
		assert(Quad_ScrollIndicator != Null, "You must add a 'Scroll::C_Name' frameinstance next to the scroll window frame to enable the scroll indicator");
		declare Vec2 LabelBaseOffset = _Frame_Scroll.AbsolutePosition_V3 - Label_ScrollIndicator.AbsolutePosition_V3;
		declare Vec2 QuadBaseOffset = _Frame_Scroll.AbsolutePosition_V3 - Quad_ScrollIndicator.AbsolutePosition_V3;
		Label_ScrollIndicator.RelativePosition_V3 = LabelBaseOffset + <_Frame_Scroll.Size.X * 0.5 + Config.ScrollIndicatorXOffset, -_Frame_Scroll.Size.Y + Config.ScrollIndicatorYOffset>;
		Quad_ScrollIndicator.RelativePosition_V3 = QuadBaseOffset + <_Frame_Scroll.Size.X * 0.5 + Config.ScrollIndicatorXOffset, -_Frame_Scroll.Size.Y + Config.ScrollIndicatorYOffset>;
		if (MenuLibsScroll_State.Config.ScrollIndicatorSize > 0.) {
			Label_ScrollIndicator.TextSizeReal = MenuLibsScroll_State.Config.ScrollIndicatorSize;
			Quad_ScrollIndicator.Size = <MenuLibsScroll_State.Config.ScrollIndicatorSize, MenuLibsScroll_State.Config.ScrollIndicatorSize>;
		}

		if (MenuLibsScroll_State.Config.ScrollIndicatorImage != "") {
			Quad_ScrollIndicator.ChangeImageUrl(MenuLibsScroll_State.Config.ScrollIndicatorImage);
			MenuLibsScroll_State.ScrollIndicator = Quad_ScrollIndicator;
			MenuLibsScroll_State.ScrollIndicatorBaseOffset = QuadBaseOffset;
			Quad_ScrollIndicator.Colorize = MenuLibsScroll_State.Config.ScrollIndicatorColorize;
		} else {
			MenuLibsScroll_State.ScrollIndicator = Label_ScrollIndicator;
			MenuLibsScroll_State.ScrollIndicatorBaseOffset = LabelBaseOffset;
			if (MenuLibsScroll_State.Config.ScrollIndicatorColorize != <-1., -1., -1.>) {
				Label_ScrollIndicator.TextColor = MenuLibsScroll_State.Config.ScrollIndicatorColorize;
			}
		}
	}

	// Initialize scrollbar
	if (
		MenuLibsScroll_State.Config.ScrollBarVisibility == MenuLibsScroll_C_ScrollBarVisibility_Always ||
		MenuLibsScroll_State.Config.ScrollBarVisibility == MenuLibsScroll_C_ScrollBarVisibility_DuringScroll
	) {
		assert(Frame_ScrollBar != Null, "You must add a 'Scroll::C_Name' frameinstance next to the scroll window frame to enable the scrollbar");
		declare CMlFrame Frame_ScrollBarBg <=> (Frame_ScrollBar.GetFirstChild("MenuLibsScroll_frame-scrollbar-bg") as CMlFrame);
		declare CMlFrame Frame_ScrollBarFg <=> (Frame_ScrollBar.GetFirstChild("MenuLibsScroll_frame-scrollbar-fg") as CMlFrame);
		MenuLibsScroll_State.ScrollBar = Frame_ScrollBar;
		declare Vec2 Size = <MenuLibsScroll_State.ScrollBarWidth, _Frame_Scroll.Size.Y>;
		declare Vec2 ScrollSize = <_Frame_Scroll.Size.X, 0.>;
		if (MenuLibsScroll_State.Config.Skew < 0.) ScrollSize.X -= MenuLibsScroll_State.Config.ScrollPadding;
		ScrollSize.X += MenuLibsScroll_State.Config.ScrollBarXOffset;
		Frame_ScrollBar.RelativePosition_V3 = (_Frame_Scroll.AbsolutePosition_V3 - Frame_ScrollBar.AbsolutePosition_V3) + Frame_ScrollBar.RelativePosition_V3 + ScrollSize;
		MenuLibsScroll_Private_SetScrollBarSize(Frame_ScrollBarBg, Size);
		MenuLibsScroll_Private_SetScrollBarSize(Frame_ScrollBarFg, Size);
		declare MenuLibsScroll_K_ScrollBarState MenuLibsScroll_ScrollBarState for Frame_ScrollBarFg;
		MenuLibsScroll_ScrollBarState.Scroll = _Frame_Scroll;
		MenuLibsScroll_Private_DisplayScrollBar(MenuLibsScroll_State.ScrollBar, (MenuLibsScroll_State.Config.ScrollBarVisibility != MenuLibsScroll_C_ScrollBarVisibility_DuringScroll));
	}

	// Initialize clamped controls
	Page.GetClassChildren("menu-libs-scroll-clamped-control", _Frame_Scroll, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlControl ClampedControl = Control;  //< Point to the frame instead of the array key
		declare Integer Type = 2;
		if (ClampedControl.DataAttributeExists("clamped-control-type")) {
			Type = MenuLibsScroll_TL::ToInteger(ClampedControl.DataAttributeGet("clamped-control-type"));
		}
		declare Integer VAlign = 0;
		if (ClampedControl.DataAttributeExists("clamped-control-valign")) {
			VAlign = MenuLibsScroll_TL::ToInteger(ClampedControl.DataAttributeGet("clamped-control-valign"));
		}
		declare Real Height = 0.;
		if (ClampedControl.DataAttributeExists("clamped-control-height")) {
			Height = MenuLibsScroll_TL::ToReal(ClampedControl.DataAttributeGet("clamped-control-height"));
		}

		declare Real OffsetTop = 0.;
		if (VAlign == 1) {
			OffsetTop = Height * 0.5;
		} else if (VAlign == 2) {
			OffsetTop = Height;
		}
		declare Real OffsetBottom = 0.;
		if (VAlign == 1) {
			OffsetBottom = Height * 0.5;
		} else if (VAlign == 0) {
			OffsetBottom = Height;
		}

		declare Real LimitTop = _Frame_Scroll.AbsolutePosition_V3.Y - OffsetTop;
		declare Real LimitBottom = _Frame_Scroll.AbsolutePosition_V3.Y - _Frame_Scroll.Size.Y + OffsetBottom;

		MenuLibsScroll_State.ClampedControls.add(MenuLibsScroll_K_ClampedControl {
			Control = ClampedControl,
			Type = Type,
			Limit = <LimitTop, LimitBottom>,
			Origin = ClampedControl.RelativePosition_V3.Y,
			ClampedTop = False,
			ClampedBottom = False
		});
	}

	// Initialize stick controls
	Page.GetClassChildren("menu-libs-scroll-stick-control", _Frame_Scroll, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlControl StickControl = Control;  //< Point to the frame instead of the array key
		declare Real MenuLibsScroll_BasePosX for StickControl;
		MenuLibsScroll_BasePosX = StickControl.RelativePosition_V3.X;
		MenuLibsScroll_State.StickControls.add(StickControl);
	}

	// Initialize pager
	MenuLibsScroll_State.Pager = MenuLibsScroll_K_Pager {
		ThrottleEndTime = -1,
		CooldownEndTime = -1,
		Limits = <0, 0>
	};
	if (MenuLibsScroll_State.Config.PagerPageSize > 0) {
		if (MenuLibsScroll_State.Config.PagerTriggerSize <= 0) {
			MenuLibsScroll_State.Config.PagerTriggerSize = MenuLibsScroll_State.Config.PagerPageSize;
		}
		if (MenuLibsScroll_State.Config.PagerMarginSize <= 0) {
			MenuLibsScroll_State.Config.PagerMarginSize = MenuLibsScroll_ML::Max(1, MenuLibsScroll_State.Config.PagerPageSize / 2);
		}
	}

	MenuLibsScroll_SetElementsTotal(_Frame_Scroll, MenuLibsScroll_State.ElementsTotal);
}

***MainInit***
***
Page.GetClassChildren("menu-libs-scroll-window", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlFrame Frame_Scroll = (Control as CMlFrame); //< Point to the frame instead of the array key
	MenuLibsScroll_G_Frames_Scroll.add(Frame_Scroll);
}
foreach (Frame_Scroll in MenuLibsScroll_G_Frames_Scroll) {
	MenuLibsScroll_Private_Init(Frame_Scroll);
}

declare CMlFrame MenuLibsScroll_Frame_ActiveScrollBar;
***

***MainStart***
***
MenuLibsScroll_Frame_ActiveScrollBar = Null;
***

***MainLoop***
***
MenuLibsScroll_PendingEvents = MenuLibsScroll_DelayedPendingEvents;
MenuLibsScroll_DelayedPendingEvents = [];

foreach (Event in MenuLibsScroll_PendingEvents) {
	if (Event.Type == MenuLibsScroll_C_EventType_Update && Event.DelayedElementsUpdate) {
		// Delay the elements placement until the component
		// user receive the event
		// This way we avoid a small flickering between
		// the two operations (elements placement => 1 frame => user receive event and update elements)
		// if the placement was done directly in the Private_Scroll function
		declare MenuLibsScroll_K_State MenuLibsScroll_State for Event.Scroll;
		MenuLibsScroll_Private_UpdateElementsPosition(MenuLibsScroll_State, Event.ScrollPosition);
	}
}

if (PageIsVisible) {
	foreach (Event in PendingEvents) {
		switch (Event.Type) {
			case CMlScriptEvent::Type::MouseClick: {
				if (Event.Control.HasClass("menu-libs-scroll-activation-zone")) {
					declare MenuLibsScroll_K_ActivationZone MenuLibsScroll_ActivationZone for Event.Control;
					if (!MenuLibsScroll_NavigationIsLocked(MenuLibsScroll_ActivationZone.Scroll)) {
						declare MenuLibsScroll_K_ScrollPosition ScrollPosition = MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_ActivationZone.Scroll);
						MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
							Type = MenuLibsScroll_C_EventType_Select,
							Scroll = MenuLibsScroll_ActivationZone.Scroll,
							To = MenuLibsScroll_ActivationZone.Element,
							ToKey = ScrollPosition.StartKey + MenuLibsScroll_ActivationZone.ElementRelativeKey,
							IsMouse = True
						});
					}
				} else if (Event.Control != Null && Event.Control.HasClass("MenuLibsScroll_scrollbar-fg")) {
					declare CMlFrame Frame_ScrollBar = Event.Control.Parent;
					MenuLibsScroll_Frame_ActiveScrollBar = Frame_ScrollBar;
					declare MenuLibsScroll_K_ScrollBarState MenuLibsScroll_ScrollBarState for MenuLibsScroll_Frame_ActiveScrollBar;
					if (!MenuLibsScroll_NavigationIsLocked(MenuLibsScroll_ScrollBarState.Scroll)) {
						MenuLibsScroll_Private_UpdateScrollBarState(Frame_ScrollBar, MenuLibsScroll_C_Action_Click);
						MenuLibsScroll_ScrollBarState.AbsoluteTop = MenuLibsScroll_ScrollBarState.Scroll.AbsolutePosition_V3.Y;
						MenuLibsScroll_ScrollBarState.AbsoluteBottom = MenuLibsScroll_ScrollBarState.AbsoluteTop - MenuLibsScroll_ScrollBarState.Scroll.Size.Y + MenuLibsScroll_ScrollBarState.Height;
						MenuLibsScroll_ScrollBarState.ClickShift = MouseY - MenuLibsScroll_Frame_ActiveScrollBar.AbsolutePosition_V3.Y;
					}
				} else if (
					Event.Control != Null && (
						Event.Control.ControlId == "MenuLibsScroll_label-scroll-indicator" ||
						Event.Control.ControlId == "MenuLibsScroll_quad-scroll-indicator"
					)
				) {
					declare CMlFrame MenuLibsScroll_Scroll for Event.Control;
					if (MenuLibsScroll_Scroll != Null && !MenuLibsScroll_NavigationIsLocked(MenuLibsScroll_Scroll)) {
						declare MenuLibsScroll_K_State MenuLibsScroll_State for MenuLibsScroll_Scroll;
						if (MenuLibsScroll_State.FocusedElementKey + MenuLibsScroll_State.Config.ElementsPerLine < MenuLibsScroll_State.ElementsTotal) {
							MenuLibsScroll_ScrollToElement(MenuLibsScroll_Scroll, MenuLibsScroll_State.FocusedElementKey + MenuLibsScroll_State.Config.ElementsPerLine, True);
						} else if (
							MenuLibsScroll_State.FocusedElementKey < MenuLibsScroll_State.ElementsTotal - 1 &&
							(MenuLibsScroll_State.FocusedElementKey / MenuLibsScroll_State.Config.ElementsPerLine) != ((MenuLibsScroll_State.ElementsTotal - 1) / MenuLibsScroll_State.Config.ElementsPerLine)
						) {
							MenuLibsScroll_ScrollToElement(MenuLibsScroll_Scroll, MenuLibsScroll_State.ElementsTotal - 1, True);
						}
					}
				}
			}
			case CMlScriptEvent::Type::MouseOver: {
				if (Event.Control.HasClass("menu-libs-scroll-activation-zone")) {
					if (!ComponentNavigation_MouseIsSleeping()) {
						declare MenuLibsScroll_K_ActivationZone MenuLibsScroll_ActivationZone for Event.Control;
						if (!MenuLibsScroll_NavigationIsLocked(MenuLibsScroll_ActivationZone.Scroll)) {
							declare MenuLibsScroll_K_ScrollPosition ScrollPosition = MenuLibsScroll_Private_GetScrollPosition(MenuLibsScroll_ActivationZone.Scroll);
							MenuLibsScroll_Private_SetFocusedElementKey(MenuLibsScroll_ActivationZone.Scroll, ScrollPosition.StartKey, ScrollPosition.StartKey + MenuLibsScroll_ActivationZone.ElementRelativeKey, True);
						}
					}
				} else if (Event.Control != Null && Event.Control.HasClass("MenuLibsScroll_scrollbar-fg")) {
					if (!ComponentNavigation_MouseIsSleeping()) {
						declare CMlFrame Frame_ScrollBar = Event.Control.Parent;
						declare MenuLibsScroll_K_ScrollBarState MenuLibsScroll_ScrollBarState for Frame_ScrollBar;
						if (!MenuLibsScroll_NavigationIsLocked(MenuLibsScroll_ScrollBarState.Scroll)) {
							MenuLibsScroll_Private_UpdateScrollBarState(Frame_ScrollBar, MenuLibsScroll_C_Action_Over);
						}
					}
				}
			}
			case CMlScriptEvent::Type::MouseOut: {
				if (Event.Control != Null && Event.Control.HasClass("MenuLibsScroll_scrollbar-fg")) {
					declare CMlFrame Frame_ScrollBar = Event.Control.Parent;
					declare MenuLibsScroll_K_ScrollBarState MenuLibsScroll_ScrollBarState for Frame_ScrollBar;
					if (!MenuLibsScroll_NavigationIsLocked(MenuLibsScroll_ScrollBarState.Scroll)) {
						MenuLibsScroll_Private_UpdateScrollBarState(Frame_ScrollBar, MenuLibsScroll_C_Action_Out);
					}
				}
			}
		}
	}

	if (MenuLibsScroll_G_UseLocalEvents) {
		foreach (Event in PendingEvents) {
			if (Event.Type == CMlScriptEvent::Type::MenuNavigation) {
				foreach (Frame_Scroll in MenuLibsScroll_G_Frames_Scroll) {
					if (!MenuLibsScroll_NavigationIsLocked(Frame_Scroll)) {
						MenuLibsScroll_Private_ApplyInput(Frame_Scroll, Event.MenuNavAction);
					}
				}
			}
		}
	} else if (ComponentNavigation_GetGlobalSoloGroups().count <= 0) {
		foreach (Event in ShareMenuNavigation_PendingEvents) {
			foreach (Frame_Scroll in MenuLibsScroll_G_Frames_Scroll) {
				if (!MenuLibsScroll_NavigationIsLocked(Frame_Scroll)) {
					MenuLibsScroll_Private_ApplyInput(Frame_Scroll, Event.MenuNavAction);
				}
			}
		}
	}

	if (MenuLibsScroll_Frame_ActiveScrollBar != Null) {
		declare MenuLibsScroll_K_ScrollBarState MenuLibsScroll_ScrollBarState for MenuLibsScroll_Frame_ActiveScrollBar;
		if (MouseLeftButton && !MenuLibsScroll_NavigationIsLocked(MenuLibsScroll_ScrollBarState.Scroll)) {
			declare Real AbsolutePosY = MenuLibsScroll_ML::Clamp(
				MouseY - MenuLibsScroll_ScrollBarState.ClickShift,
				MenuLibsScroll_ScrollBarState.AbsoluteBottom,
				MenuLibsScroll_ScrollBarState.AbsoluteTop
			);
			declare Real ScrollRatio = (MenuLibsScroll_ScrollBarState.AbsoluteTop - AbsolutePosY) / (MenuLibsScroll_ScrollBarState.AbsoluteTop - MenuLibsScroll_ScrollBarState.AbsoluteBottom);
			MenuLibsScroll_ScrollToPosition(MenuLibsScroll_ScrollBarState.Scroll, MenuLibsScroll_ScrollBarState.Scroll.ScrollMax.Y * ScrollRatio, False);
		} else {
			MenuLibsScroll_Private_UpdateScrollBarState(MenuLibsScroll_Frame_ActiveScrollBar, MenuLibsScroll_C_Action_Unclick);
			MenuLibsScroll_Frame_ActiveScrollBar = Null;
		}
	}

	foreach (Frame_Scroll in MenuLibsScroll_G_Frames_Scroll) {
		declare MenuLibsScroll_K_State MenuLibsScroll_State for Frame_Scroll;
		if (MenuLibsScroll_NavigationIsLocked(Frame_Scroll) && Frame_Scroll.ScrollOffset != MenuLibsScroll_State.ScrollLockPosition) {
			Frame_Scroll.ScrollOffset = <
				MenuLibsScroll_ML::Clamp(MenuLibsScroll_State.ScrollLockPosition.X, Frame_Scroll.ScrollMin.X, Frame_Scroll.ScrollMax.X),
				MenuLibsScroll_ML::Clamp(MenuLibsScroll_State.ScrollLockPosition.Y, Frame_Scroll.ScrollMin.Y, Frame_Scroll.ScrollMax.Y)
			>;
			MenuLibsScroll_State.ScrollLockPosition = Frame_Scroll.ScrollOffset;
		}
		if (MenuLibsScroll_State.ScrollIndicator != Null && MenuLibsScroll_State.ScrollIndicator.Visible) {
			switchtype(MenuLibsScroll_State.ScrollIndicator) {
				case CMlQuad: (MenuLibsScroll_State.ScrollIndicator as CMlQuad).Opacity = (MenuLibsScroll_ML::Cos(Now * 0.005) * 0.5) + 0.5;
				case CMlLabel: (MenuLibsScroll_State.ScrollIndicator as CMlLabel).Opacity = (MenuLibsScroll_ML::Cos(Now * 0.005) * 0.5) + 0.5;
			}
		}
		if (
			MenuLibsScroll_State.Config.ScrollBarVisibility == MenuLibsScroll_C_ScrollBarVisibility_DuringScroll &&
			MenuLibsScroll_State.ScrollBar != Null &&
			MenuLibsScroll_State.ScrollBar.Visible &&
			MenuLibsScroll_State.ScrollBarHideTime >= 0 &&
			Now >= MenuLibsScroll_State.ScrollBarHideTime
		) {
			MenuLibsScroll_Private_DisplayScrollBar(MenuLibsScroll_State.ScrollBar, False);
			MenuLibsScroll_State.ScrollBarHideTime = -1;
		}
		if (MenuLibsScroll_State.Animation.StartTime >= 0) {
			if (Now >= MenuLibsScroll_State.Animation.StartTime + MenuLibsScroll_State.Animation.Duration) {
				MenuLibsScroll_State.Animation.StartTime = -1;
				declare Real FinalOffsetY = MenuLibsScroll_State.Animation.ScrollStart + MenuLibsScroll_State.Animation.ScrollDelta;
				MenuLibsScroll_Private_Scroll(Frame_Scroll, (FinalOffsetY - MenuLibsScroll_State.ScrollOffset.Y) / Frame_Scroll.ScrollGrid.Y, False, True, True);
			} else {
				declare Real NewOffsetY = MenuLibsScroll_AL::EaseOutQuad(
					Now - MenuLibsScroll_State.Animation.StartTime,
					MenuLibsScroll_State.Animation.ScrollStart,
					MenuLibsScroll_State.Animation.ScrollDelta,
					MenuLibsScroll_State.Animation.Duration
				);
				MenuLibsScroll_Private_Scroll(Frame_Scroll, (NewOffsetY - MenuLibsScroll_State.ScrollOffset.Y) / Frame_Scroll.ScrollGrid.Y, False, True, True);
			}
		}
		if (MenuLibsScroll_State.ScrollOffset != Frame_Scroll.ScrollOffset) {
			MenuLibsScroll_ScrollToPosition(Frame_Scroll, Frame_Scroll.ScrollOffset.Y, False);
		}
		if (MenuLibsScroll_State.Pager.ThrottleEndTime >= 0 && Now >= MenuLibsScroll_State.Pager.ThrottleEndTime) {
			MenuLibsScroll_State.Pager.ThrottleEndTime = -1;
			MenuLibsScroll_State.Pager.CooldownEndTime = Now + MenuLibsScroll_C_PagerThrottleDuration;
			declare MenuLibsScroll_K_ScrollPosition ScrollPosition = MenuLibsScroll_Private_GetScrollPosition(Frame_Scroll);
			MenuLibsScroll_State.Pager.Limits = <
				ScrollPosition.StartKey - MenuLibsScroll_State.Config.PagerTriggerSize,
				ScrollPosition.StartKey + MenuLibsScroll_State.Config.PagerTriggerSize
			>;
			MenuLibsScroll_DelayedPendingEvents.add(MenuLibsScroll_K_Event {
				Type = MenuLibsScroll_C_EventType_PagerUpdate,
				Scroll = Frame_Scroll,
				PagerOffset = MenuLibsScroll_ML::Max(0, ScrollPosition.StartKey - MenuLibsScroll_State.Config.PagerTriggerSize - MenuLibsScroll_State.Config.PagerMarginSize),
				PagerCount = MenuLibsScroll_ML::Max(1, MenuLibsScroll_State.Config.PagerPageSize + (2 * MenuLibsScroll_State.Config.PagerTriggerSize) + (2 * MenuLibsScroll_State.Config.PagerMarginSize)),
				CustomData = MenuLibsScroll_State.EventCustomData
			});
			MenuLibsScroll_ClearAllCustomData(Frame_Scroll);
		}
	}
}
***

// */
// @Component end menu-libs-scroll

// @Component start component-menulibs-menusounds
// /*

declare CMlScriptEvent::EMenuNavAction[] ComponentMenuLibsMenuSounds_G_DisabledForInputs;
declare CMlScriptEvent::Type[] ComponentMenuLibsMenuSounds_G_DisabledForMouses;

Void ComponentMenuLibsMenuSounds_SetCustomFocusSound(CMlControl _Control, Text _SoundName) {
	if (_Control != Null) {
		declare Text ComponentMenuLibsMenuSounds_FocusSound for _Control = ComponentMenuLibsMenuSounds_C_Sound_Focus;
		ComponentMenuLibsMenuSounds_FocusSound = _SoundName;
	}
}

Void ComponentMenuLibsMenuSounds_SetCustomSelectSound(CMlControl _Control, Text _SoundName) {
	if (_Control != Null) {
		declare Text ComponentMenuLibsMenuSounds_SelectSound for _Control = ComponentMenuLibsMenuSounds_C_Sound_Select;
		ComponentMenuLibsMenuSounds_SelectSound = _SoundName;
	}
}

Void ComponentMenuLibsMenuSounds_SetCustomCancelSound(CMlControl _Control, Text _SoundName) {
	if (_Control != Null) {
		declare Text ComponentMenuLibsMenuSounds_CancelSound for _Control = ComponentMenuLibsMenuSounds_C_Sound_Cancel;
		ComponentMenuLibsMenuSounds_CancelSound = _SoundName;
	}
}

Void ComponentMenuLibsMenuSounds_SetPlaySoundOnlyForMouse(CMlControl _Control, Boolean _PlaySoundOnlyForMouse) {
	if (_Control != Null) {
		declare Boolean ComponentMenuLibsMenuSounds_PlaySoundOnlyForMouse for _Control = False;
		ComponentMenuLibsMenuSounds_PlaySoundOnlyForMouse = _PlaySoundOnlyForMouse;
	}
}

Text ComponentMenuLibsMenuSounds_GetCustomFocusSound(CMlControl _Control) {
	declare Text Result = "";
	if (_Control != Null) {
		declare Text ComponentMenuLibsMenuSounds_FocusSound for _Control = ComponentMenuLibsMenuSounds_C_Sound_Focus;
		Result = ComponentMenuLibsMenuSounds_FocusSound;
	}
	return Result;
}

Text ComponentMenuLibsMenuSounds_GetCustomSelectSound(CMlControl _Control) {
	declare Text Result = "";
	if (_Control != Null) {
		declare Text ComponentMenuLibsMenuSounds_SelectSound for _Control = ComponentMenuLibsMenuSounds_C_Sound_Select;
		Result = ComponentMenuLibsMenuSounds_SelectSound;
	}
	return Result;
}

Text ComponentMenuLibsMenuSounds_GetCustomCancelSound(CMlControl _Control) {
	declare Text Result = "";
	if (_Control != Null) {
		declare Text ComponentMenuLibsMenuSounds_CancelSound for _Control = ComponentMenuLibsMenuSounds_C_Sound_Cancel;
		Result = ComponentMenuLibsMenuSounds_CancelSound;
	}
	return Result;
}

Boolean ComponentMenuLibsMenuSounds_GetPlaySoundOnlyForMouse(CMlControl _Control) {
	if (_Control == Null) return False;
	declare Boolean ComponentMenuLibsMenuSounds_PlaySoundOnlyForMouse for _Control = False;
	return ComponentMenuLibsMenuSounds_PlaySoundOnlyForMouse;
}

Void ComponentMenuLibsMenuSounds_PlaySound(Text _Sound) {
	if (_Sound != "") {
		ComponentCommonLibsAudioManager_StopSound(_Sound);
		ComponentCommonLibsAudioManager_PlaySound(_Sound);
	}
}

Void ComponentMenuLibsMenuSounds_PlayFocusSound(CMlControl _To) {
	declare Text SoundToPlay = ComponentMenuLibsMenuSounds_GetCustomFocusSound(_To);
	if (SoundToPlay != ComponentMenuLibsMenuSounds_C_Sound_Silent) {
		ComponentMenuLibsMenuSounds_PlaySound(SoundToPlay);
	}
}

Void ComponentMenuLibsMenuSounds_PlaySelectSound(CMlControl _To) {
	declare Text SoundToPlay = ComponentMenuLibsMenuSounds_GetCustomSelectSound(_To);
	if (SoundToPlay != ComponentMenuLibsMenuSounds_C_Sound_Silent) {
		ComponentMenuLibsMenuSounds_PlaySound(SoundToPlay);
	}
}

Void ComponentMenuLibsMenuSounds_PlayCancelSound(CMlControl _To) {
	declare Text SoundToPlay = ComponentMenuLibsMenuSounds_GetCustomCancelSound(_To);
	if (SoundToPlay != ComponentMenuLibsMenuSounds_C_Sound_Silent) {
		ComponentMenuLibsMenuSounds_PlaySound(SoundToPlay);
	}
}

Void ComponentMenuLibsMenuSounds_InitControlSound(CMlControl _Control) {
	if (_Control.DataAttributeExists("menusounds-focussound")) {
		ComponentMenuLibsMenuSounds_SetCustomFocusSound(_Control, _Control.DataAttributeGet("menusounds-focussound"));
	}
	if (_Control.DataAttributeExists("menusounds-selectsound")) {
		ComponentMenuLibsMenuSounds_SetCustomSelectSound(_Control, _Control.DataAttributeGet("menusounds-selectsound"));
	}
	if (_Control.DataAttributeExists("menusounds-cancelsound")) {
		ComponentMenuLibsMenuSounds_SetCustomCancelSound(_Control, _Control.DataAttributeGet("menusounds-cancelsound"));
	}
	if (_Control.DataAttributeExists("menusounds-playsoundonlyformouse")) {
		ComponentMenuLibsMenuSounds_SetPlaySoundOnlyForMouse(_Control, ComponentMenuLibsTools_TextToBoolean(_Control.DataAttributeGet("menusounds-playsoundonlyformouse")));
	}
}

Void ComponentMenuLibsMenuSounds_Initialize() {
	Page.GetClassChildren("component-menusounds-item", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		ComponentMenuLibsMenuSounds_InitControlSound(Control);
	}
}

Void ComponentMenuLibsMenuSounds_SetSoundBalanceState(Integer _SoundBalanceState, Integer _FadeTime) {
	ComponentCommonLibsAudioManager_SetNewSoundBalance(_SoundBalanceState, _FadeTime);
}

Void ComponentMenuLibsMenuSounds_DisableForInput(CMlScriptEvent::EMenuNavAction _Input, Boolean _Disable) {
	if (_Disable) {
		if (!ComponentMenuLibsMenuSounds_G_DisabledForInputs.exists(_Input)) {
			ComponentMenuLibsMenuSounds_G_DisabledForInputs.add(_Input);
		}
	} else {
		ComponentMenuLibsMenuSounds_G_DisabledForInputs.remove(_Input);
	}
}

Void ComponentMenuLibsMenuSounds_DisableForMouse(CMlScriptEvent::Type _Mouse, Boolean _Disable) {
	if (_Disable) {
		if (!ComponentMenuLibsMenuSounds_G_DisabledForMouses.exists(_Mouse)) {
			ComponentMenuLibsMenuSounds_G_DisabledForMouses.add(_Mouse);
		}
	} else {
		ComponentMenuLibsMenuSounds_G_DisabledForMouses.remove(_Mouse);
	}
}

***MainStart***
***
ComponentMenuLibsMenuSounds_Initialize();
***

***MainLoop***
***
if (This is CManiaAppTitleLayer || EnableMenuNavigationInputs) {
	foreach (Event in MenuLibsScroll_PendingEvents) {
		switch (Event.Type) {
			case MenuLibsScroll_C_EventType_Focus: {
				if (Event.IsMouse || Event.To != Null) {
					ComponentMenuLibsMenuSounds_PlayFocusSound(Event.To);
				}
			}
			case MenuLibsScroll_C_EventType_Select: {
				if (Event.To != Null) {
					ComponentMenuLibsMenuSounds_PlaySelectSound(Event.To);
				}
			}
			case MenuLibsScroll_C_EventType_Cancel: {
				if (Event.To != Null) {
					ComponentMenuLibsMenuSounds_PlayCancelSound(Event.To);
				}
			}
		}
	}

	foreach (Event in ComponentNavigation_PendingEvents) {
		switch (Event.Type) {
			case ComponentNavigation_C_EventType_NavigateInput: {
				if (
					!ComponentMenuLibsMenuSounds_G_DisabledForInputs.exists(Event.Input) &&
					!ComponentMenuLibsMenuSounds_GetPlaySoundOnlyForMouse(Event.To)
				) {
					if (ComponentMenuLibsMenuSounds_C_FocusInputs.exists(Event.Input) && Event.From != Event.To && !MenuLibsScroll_IsScroll(Event.To)) {
						ComponentMenuLibsMenuSounds_PlayFocusSound(Event.To);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						ComponentMenuLibsMenuSounds_PlaySelectSound(Event.To);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						ComponentMenuLibsMenuSounds_PlayCancelSound(Event.To);
					}
				}
			}
			case ComponentNavigation_C_EventType_NavigateMouse: {
				if (!ComponentMenuLibsMenuSounds_G_DisabledForMouses.exists(Event.Mouse)) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						ComponentMenuLibsMenuSounds_PlaySelectSound(Event.To);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver && Event.From != Event.To) {
						ComponentMenuLibsMenuSounds_PlayFocusSound(Event.To);
					}
				}
			}
		}
	}
}
***

// */
// @Component end component-menulibs-menusounds

// @Component start component-time-of-day
// /*

declare Boolean TimeOfDay_G_ForcedDayProgressionEnabled;
declare Real TimeOfDay_G_ForcedDayProgression;

Real TimeOfDay_GetDayProgression(Real _SpeedMultiplier) {
	if (TimeOfDay_G_ForcedDayProgressionEnabled) return TimeOfDay_G_ForcedDayProgression;
	return TimeOfDay_ML::Mod(TimeOfDay_TiL::Clamp01TZDay(TimeOfDay_TiL::GetCurrent()) * _SpeedMultiplier, 0., 1.);
}
Real TimeOfDay_GetDayProgression() {
	if (TimeOfDay_G_ForcedDayProgressionEnabled) return TimeOfDay_G_ForcedDayProgression;
	return TimeOfDay_TiL::Clamp01TZDay(TimeOfDay_TiL::GetCurrent());
}

Void TimeOfDay_SetForcedDayProgression(Real _DayProgression) {
	TimeOfDay_G_ForcedDayProgressionEnabled = True;
	TimeOfDay_G_ForcedDayProgression = TimeOfDay_ML::Clamp(_DayProgression, 0., 1.);
}
Void TimeOfDay_ResetForcedDayProgression() {
	TimeOfDay_G_ForcedDayProgressionEnabled = False;
}

Integer TimeOfDay_GetDayPart(Real _DayProgression, Boolean _UseTransitionPart) {
	if (_UseTransitionPart && _DayProgression >= TimeOfDay_C_TimeRange_NightSunrise && _DayProgression < TimeOfDay_C_TimeRange_Sunrise) {
		return TimeOfDay_C_DayPart_NightSunrise;
	} else if (_DayProgression >= TimeOfDay_C_TimeRange_Sunrise && _DayProgression < TimeOfDay_C_TimeRange_Day) {
		if (_UseTransitionPart && _DayProgression >= TimeOfDay_C_TimeRange_SunriseDay) {
			return TimeOfDay_C_DayPart_SunriseDay;
		} else {
			return TimeOfDay_C_DayPart_Sunrise;
		}
	} else if (_DayProgression >= TimeOfDay_C_TimeRange_Day && _DayProgression < TimeOfDay_C_TimeRange_Sunset) {
		if (_UseTransitionPart && _DayProgression >= TimeOfDay_C_TimeRange_DaySunset) {
			return TimeOfDay_C_DayPart_DaySunset;
		} else {
			return TimeOfDay_C_DayPart_Day;
		}
	} else if (_DayProgression >= TimeOfDay_C_TimeRange_Sunset && _DayProgression < TimeOfDay_C_TimeRange_Night) {
		if (_UseTransitionPart && _DayProgression >= TimeOfDay_C_TimeRange_SunsetNight) {
			return TimeOfDay_C_DayPart_SunsetNight;
		} else {
			return TimeOfDay_C_DayPart_Sunset;
		}
	}
	return TimeOfDay_C_DayPart_Night;
}

Real TimeOfDay_GetTimeRange(Integer _DayPart) {
	switch (_DayPart) {
		case TimeOfDay_C_DayPart_NightSunrise: return TimeOfDay_C_TimeRange_NightSunrise;
		case TimeOfDay_C_DayPart_Sunrise: return TimeOfDay_C_TimeRange_Sunrise;
		case TimeOfDay_C_DayPart_SunriseDay: return TimeOfDay_C_TimeRange_SunriseDay;
		case TimeOfDay_C_DayPart_Day: return TimeOfDay_C_TimeRange_Day;
		case TimeOfDay_C_DayPart_DaySunset: return TimeOfDay_C_TimeRange_DaySunset;
		case TimeOfDay_C_DayPart_Sunset: return TimeOfDay_C_TimeRange_Sunset;
		case TimeOfDay_C_DayPart_SunsetNight: return TimeOfDay_C_TimeRange_SunsetNight;
		case TimeOfDay_C_DayPart_Night: return TimeOfDay_C_TimeRange_Night;
	}
	return TimeOfDay_C_TimeRange_Null;
}

// */
// @Component end component-time-of-day

// @Component start component-mainbackground
// /*

declare ComponentMainBackground_K_State ComponentMainBackground_G_State;
declare ComponentMainBackground_K_Event[] ComponentMainBackground_PendingEvents;

Real ComponentMainBackground_Private_CalculateOpacity(Real _CurrentHourReal, Real _StartTime, Real _EndTime, Boolean _Ascending) {
	if (_Ascending) {
		return (_CurrentHourReal-_StartTime)/(_EndTime-_StartTime);
	}
	return (_EndTime-_CurrentHourReal)/(_EndTime-_StartTime);
}

Void ComponentMainBackground_Private_ApplyOpacities(
	ComponentMainBackground_K_Controls _Controls,
	ComponentMainBackground_K_QuadOpacities _QuadOpacities
) {
	_Controls.Quad_Morning.Opacity = _QuadOpacities.Morning;
	_Controls.Quad_Day.Opacity = _QuadOpacities.Day;
	_Controls.Quad_Evening.Opacity = _QuadOpacities.Evening;
	_Controls.Quad_Night.Opacity = _QuadOpacities.Night;

	ComponentMainBackground_PendingEvents.add(ComponentMainBackground_K_Event {
		Type = ComponentMainBackground_C_EventType_UpdateOpacities,
		DayProgression = TimeOfDay_GetDayProgression(),
		DayPart = TimeOfDay_GetDayPart(TimeOfDay_GetDayProgression(), True)
	});
}

ComponentMainBackground_K_QuadOpacities ComponentMainBackground_Private_GetDayProgressionQuadOpacities(Real _DayProgression) {
	declare ComponentMainBackground_K_QuadOpacities ComponentMainBackground_QuadOpacities = ComponentMainBackground_C_DefaultQuadOpacities;
	declare Integer DayPart = TimeOfDay_GetDayPart(_DayProgression, True);

	switch (DayPart) {
		case ComponentMainBackground_C_DayPart_NightSunrise: {
			ComponentMainBackground_QuadOpacities.Night = 1.;
			ComponentMainBackground_QuadOpacities.Morning = ComponentMainBackground_Private_CalculateOpacity(_DayProgression, ComponentMainBackground_C_TimeRange_NightSunrise, ComponentMainBackground_C_TimeRange_Sunrise, True);
		}
		case ComponentMainBackground_C_DayPart_Sunrise: {
			ComponentMainBackground_QuadOpacities.Morning = 1.;
		}
		case ComponentMainBackground_C_DayPart_SunriseDay: {
			ComponentMainBackground_QuadOpacities.Morning = ComponentMainBackground_Private_CalculateOpacity(_DayProgression, ComponentMainBackground_C_TimeRange_SunriseDay, ComponentMainBackground_C_TimeRange_Day, False);
			ComponentMainBackground_QuadOpacities.Day = 1.;
		}
		case ComponentMainBackground_C_DayPart_Day: {
			ComponentMainBackground_QuadOpacities.Day = 1.;
		}
		case ComponentMainBackground_C_DayPart_DaySunset: {
			ComponentMainBackground_QuadOpacities.Day = 1.;
			ComponentMainBackground_QuadOpacities.Evening = ComponentMainBackground_Private_CalculateOpacity(_DayProgression, ComponentMainBackground_C_TimeRange_DaySunset, ComponentMainBackground_C_TimeRange_Sunset, True);
		}
		case ComponentMainBackground_C_DayPart_Sunset: {
			ComponentMainBackground_QuadOpacities.Evening = 1.;
		}
		case ComponentMainBackground_C_DayPart_SunsetNight: {
			ComponentMainBackground_QuadOpacities.Evening = ComponentMainBackground_Private_CalculateOpacity(_DayProgression, ComponentMainBackground_C_TimeRange_SunsetNight, ComponentMainBackground_C_TimeRange_Night, False);
			ComponentMainBackground_QuadOpacities.Night = 1.;
		}
		case ComponentMainBackground_C_DayPart_Night: {
			ComponentMainBackground_QuadOpacities.Night = 1.;
		}
	}

	return ComponentMainBackground_QuadOpacities;
}
ComponentMainBackground_K_QuadOpacities ComponentMainBackground_Private_GetDayProgressionQuadOpacities() {
	return ComponentMainBackground_Private_GetDayProgressionQuadOpacities(TimeOfDay_GetDayProgression());
}

CMlQuad ComponentMainBackground_GetQuadMorning() {
	return ComponentMainBackground_G_State.Controls.Quad_Morning;
}
CMlQuad ComponentMainBackground_GetQuadDay() {
	return ComponentMainBackground_G_State.Controls.Quad_Day;
}
CMlQuad ComponentMainBackground_GetQuadEvening() {
	return ComponentMainBackground_G_State.Controls.Quad_Evening;
}
CMlQuad ComponentMainBackground_GetQuadNight() {
	return ComponentMainBackground_G_State.Controls.Quad_Night;
}

Void ComponentMainBackground_SetVisibility(Boolean _IsVisible, Integer _AnimDuration) {
	ComponentMainBackground_G_State.IsVisible = _IsVisible;

	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Morning);
	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Day);
	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Evening);
	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Night);

	if (_AnimDuration <= 1) {
		ComponentMainBackground_G_State.UpdateTimer = Now + ComponentMainBackground_C_UpdateDelay;

		if (_IsVisible) {
			ComponentMainBackground_Private_ApplyOpacities(
				ComponentMainBackground_G_State.Controls,
				ComponentMainBackground_Private_GetDayProgressionQuadOpacities()
			);
		} else {
			ComponentMainBackground_Private_ApplyOpacities(
				ComponentMainBackground_G_State.Controls,
				ComponentMainBackground_C_DefaultQuadOpacities
			);
		}
	} else {
		ComponentMainBackground_G_State.UpdateTimer = Now + _AnimDuration + ComponentMainBackground_C_UpdateDelay;

		declare ComponentMainBackground_K_QuadOpacities ComponentMainBackground_QuadOpacities = ComponentMainBackground_C_DefaultQuadOpacities;
		declare Integer Hidden = 1;
		if (_IsVisible) {
			ComponentMainBackground_QuadOpacities = ComponentMainBackground_Private_GetDayProgressionQuadOpacities();
			Hidden = 0;
		}

		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Morning, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Morning^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Day, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Day^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Evening, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Evening^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Night, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Night^"\" hidden=\""^Hidden^"\" />", _AnimDuration, CAnimManager::EAnimManagerEasing::Linear);
	}
}
Void ComponentMainBackground_SetVisibility(Boolean _IsVisible) {
	ComponentMainBackground_SetVisibility(_IsVisible, -1);
}


Void ComponentMainBackground_ChangeBackgroundImages(Text[Integer] _BackgroundsImgUrl, Boolean _Animation) {
	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Morning);
	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Day);
	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Evening);
	AnimMgr.Flush(ComponentMainBackground_G_State.Controls.Quad_Night);

	if (_Animation) {
		ComponentMainBackground_G_State.UpdateTimer = Now + (ComponentMainBackground_C_BackgroundTransition * 2) + ComponentMainBackground_C_UpdateDelay;
		declare ComponentMainBackground_K_QuadOpacities ComponentMainBackground_QuadOpacities = ComponentMainBackground_C_DefaultQuadOpacities;

		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Morning, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Morning^"\"  />", ComponentMainBackground_C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Day, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Day^"\" />", ComponentMainBackground_C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Evening, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Evening^"\"  />", ComponentMainBackground_C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Night, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Night^"\" />", ComponentMainBackground_C_BackgroundTransition / 2, CAnimManager::EAnimManagerEasing::QuadOut);

		ComponentMainBackground_G_State.DisplayAnimEndTime = Now + ComponentMainBackground_C_BackgroundTransition * 2;
		ComponentMainBackground_G_State.CustomBackgroundImgUrls = _BackgroundsImgUrl;

		ComponentMainBackground_QuadOpacities = ComponentMainBackground_Private_GetDayProgressionQuadOpacities();

		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Morning, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Morning^"\" />", ComponentMainBackground_G_State.DisplayAnimEndTime, ComponentMainBackground_C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Day, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Day^"\" />", ComponentMainBackground_G_State.DisplayAnimEndTime, ComponentMainBackground_C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Evening, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Evening^"\" />", ComponentMainBackground_G_State.DisplayAnimEndTime, ComponentMainBackground_C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
		AnimMgr.Add(ComponentMainBackground_G_State.Controls.Quad_Night, "<a opacity=\""^ComponentMainBackground_QuadOpacities.Night^"\" />", ComponentMainBackground_G_State.DisplayAnimEndTime, ComponentMainBackground_C_BackgroundTransition, CAnimManager::EAnimManagerEasing::ExpIn);
	} else {
		ComponentMainBackground_G_State.DisplayAnimEndTime = -1;

		ComponentMainBackground_Private_ApplyOpacities(
				ComponentMainBackground_G_State.Controls,
				ComponentMainBackground_Private_GetDayProgressionQuadOpacities()
			);

		ComponentMainBackground_G_State.Controls.Quad_Morning.ChangeImageUrl(_BackgroundsImgUrl.get(0, ""));
		ComponentMainBackground_G_State.Controls.Quad_Day.ChangeImageUrl(_BackgroundsImgUrl.get(1, ""));
		ComponentMainBackground_G_State.Controls.Quad_Evening.ChangeImageUrl(_BackgroundsImgUrl.get(2, ""));
		ComponentMainBackground_G_State.Controls.Quad_Night.ChangeImageUrl(_BackgroundsImgUrl.get(3, ""));
	}
}

Void ComponentMainBackground_ResetBackgroundImages() {
	ComponentMainBackground_G_State.Controls.Quad_Morning.ChangeImageUrl("file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Morning.dds");
	ComponentMainBackground_G_State.Controls.Quad_Day.ChangeImageUrl("file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Day.dds");
	ComponentMainBackground_G_State.Controls.Quad_Evening.ChangeImageUrl("file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Evening.dds");
	ComponentMainBackground_G_State.Controls.Quad_Night.ChangeImageUrl("file://Media/Manialinks/Nadeo/TMNext/Menus/MainBackgrounds/Background_Night.dds");
}

***MainInit***
***
declare CMlFrame ComponentMainBackground_Frame_Global;
***

***MainStart***
***
ComponentMainBackground_Frame_Global <=> (Page.GetFirstChild("ComponentMainBackground_frame-global") as CMlFrame);
ComponentMainBackground_G_State.Controls.Quad_Morning <=> (ComponentMainBackground_Frame_Global.GetFirstChild("ComponentMainBackground_quad-morning") as CMlQuad);
ComponentMainBackground_G_State.Controls.Quad_Day <=> (ComponentMainBackground_Frame_Global.GetFirstChild("ComponentMainBackground_quad-day") as CMlQuad);
ComponentMainBackground_G_State.Controls.Quad_Evening <=> (ComponentMainBackground_Frame_Global.GetFirstChild("ComponentMainBackground_quad-evening") as CMlQuad);
ComponentMainBackground_G_State.Controls.Quad_Night <=> (ComponentMainBackground_Frame_Global.GetFirstChild("ComponentMainBackground_quad-night") as CMlQuad);

ComponentMainBackground_G_State.UpdateTimer = -1;
ComponentMainBackground_G_State.CustomBackgroundImgUrls = [];
ComponentMainBackground_G_State.DisplayAnimEndTime = -1;

ComponentMainBackground_SetVisibility(True);
***

***MainLoop***
***
ComponentMainBackground_PendingEvents = [];

if (ComponentMainBackground_G_State.IsVisible && (ComponentMainBackground_G_State.UpdateTimer < 0 || ComponentMainBackground_G_State.UpdateTimer < Now)) {
	// Only update every 30s
	ComponentMainBackground_G_State.UpdateTimer = Now + ComponentMainBackground_C_UpdateDelay;

	ComponentMainBackground_Private_ApplyOpacities(
		ComponentMainBackground_G_State.Controls,
		ComponentMainBackground_Private_GetDayProgressionQuadOpacities()
	);
}
if (ComponentMainBackground_G_State.DisplayAnimEndTime >= 0 && ComponentMainBackground_G_State.DisplayAnimEndTime <= Now) {
	ComponentMainBackground_G_State.DisplayAnimEndTime = -1;
	ComponentMainBackground_G_State.Controls.Quad_Morning.ChangeImageUrl(ComponentMainBackground_G_State.CustomBackgroundImgUrls.get(0, ""));
	ComponentMainBackground_G_State.Controls.Quad_Day.ChangeImageUrl(ComponentMainBackground_G_State.CustomBackgroundImgUrls.get(1, ""));
	ComponentMainBackground_G_State.Controls.Quad_Evening.ChangeImageUrl(ComponentMainBackground_G_State.CustomBackgroundImgUrls.get(2, ""));
	ComponentMainBackground_G_State.Controls.Quad_Night.ChangeImageUrl(ComponentMainBackground_G_State.CustomBackgroundImgUrls.get(3, ""));
}
***

// */
// @Component end component-mainbackground

// @Component start component-menulibs-helpers
// /*

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Skew position on X axis
Real ComponentMenuLibsHelpers_SkewX(Real _OffsetY, Real _Angle) {
	return _OffsetY * ComponentMenuLibsHelpers_ML::Tan(ComponentMenuLibsHelpers_ML::DegToRad(_Angle));
}
Real ComponentMenuLibsHelpers_SkewX(Real _PosX, Real _PosY, Real _Angle) {
	return _PosX + ComponentMenuLibsHelpers_SkewX(_PosY, _Angle);
}
Vec2 ComponentMenuLibsHelpers_SkewX(Vec2 _Pos, Real _Angle) {
	return <_Pos.X + ComponentMenuLibsHelpers_SkewX(_Pos.Y, _Angle), _Pos.Y>;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/** Keep the original ratio of the asset depending on the horizontal or vertical size
 *
 *	@return 	The X and Y size depending on the asset ratio and the given size parameter
 */
Vec2 ComponentMenuLibsHelpers_KeepRatioFromX(Real _AssetSizeX, Real _AssetSizeY, Real _SizeX) {
	return <_SizeX, _SizeX*_AssetSizeY/_AssetSizeX>;
}
Vec2 ComponentMenuLibsHelpers_KeepRatioFromY(Real _AssetSizeX, Real _AssetSizeY, Real _SizeY) {
	return <_SizeY*_AssetSizeX/_AssetSizeY, _SizeY>;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/// Get all controls that support the opacity parameter in a frame
CMlControl[] ComponentMenuLibsHelpers_GetControlsWithOpacitySupport(CMlFrame _Frame) {
	declare CMlControl[] ControlsWithOpacitySupport;
	foreach (Control in _Frame.Controls) {
		switchtype (Control) {
			case CMlEntry: {
				ControlsWithOpacitySupport.add(Control);
			}
			case CMlFrame: {
				declare CMlControl[] TmpControls = ComponentMenuLibsHelpers_GetControlsWithOpacitySupport(Control as CMlFrame);
				foreach (Control in TmpControls) {
					ControlsWithOpacitySupport.add(Control);
				}
			}
			case CMlLabel: {
				ControlsWithOpacitySupport.add(Control);
			}
			case CMlQuad: {
				ControlsWithOpacitySupport.add(Control);
			}
			case CMlTextEdit: {
				ControlsWithOpacitySupport.add(Control);
			}
		}
	}
	return ControlsWithOpacitySupport;
}

// */
// @Component end component-menulibs-helpers

// @Component start component-controller-info
// /*

Void ComponentControllerInfo_Private_Update() {
	declare Integer ComponentControllerInfo_ButtonsUpdate for System = 0;
	ComponentControllerInfo_ButtonsUpdate += 1;
}

Void ComponentControllerInfo_SetButtons(Text[Text] _Buttons) {
	declare Text[Text] ComponentControllerInfo_Buttons for System = [];
	declare Boolean IsUpdateNeeded = _Buttons.count != ComponentControllerInfo_Buttons.count;

	if (!IsUpdateNeeded) {
		foreach (Action => Description in _Buttons) {
			if (!ComponentControllerInfo_Buttons.existskey(Action) || ComponentControllerInfo_Buttons[Action] != Description) {
				IsUpdateNeeded = True;
				break;
			}
		}
	}

	if (IsUpdateNeeded) {
		ComponentControllerInfo_Buttons = _Buttons;
		ComponentControllerInfo_Private_Update();
	}
}

Void ComponentControllerInfo_SetButton(Text _Action, Text _Description) {
	declare Text[Text] ComponentControllerInfo_Buttons for System = [];
	if (!ComponentControllerInfo_Buttons.existskey(_Action) || ComponentControllerInfo_Buttons[_Action] != _Description) {
		ComponentControllerInfo_Buttons[_Action] = _Description;
		ComponentControllerInfo_Private_Update();
	}
}

Text[Text] ComponentControllerInfo_GetButtons() {
	declare Text[Text] ComponentControllerInfo_Buttons for System = [];
	return ComponentControllerInfo_Buttons;
}

// */
// @Component end component-controller-info

// @Component start component-menulibs-expendable-button
// /*

declare MenuLibsExpendableButton_K_Properties[Text] MenuLibsExpendableButton_G_Styles;
declare MenuLibsExpendableButton_K_Properties MenuLibsExpendableButton_G_DefaultProperties;

// Check if the control is a button
Boolean MenuLibsExpendableButton_IsButton(CMlControl _Control) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Control;
	return MenuLibsExpendableButton_State.IsButton;
}

Text MenuLibsExpendableButton_Private_GetColorAnim(MenuLibsExpendableButton_K_Image _Image, Vec3 _Color) {
	declare Text ColorAnim = "";

	switch (_Image.ColorMode) {
		case MenuLibsExpendableButton_C_ColorMode_Colorize: {
			ColorAnim = "colorize=\""^MenuLibsExpendableButton_CL::RgbToHex6(_Color)^"\"";
		}
		case MenuLibsExpendableButton_C_ColorMode_Modulate: {
			ColorAnim = "modulatecolor=\""^MenuLibsExpendableButton_CL::RgbToHex6(_Color)^"\"";
		}
		case MenuLibsExpendableButton_C_ColorMode_Background: {
			ColorAnim = "bgcolor=\""^MenuLibsExpendableButton_CL::RgbToHex6(_Color)^"\"";
		}
	}

	return ColorAnim;
}

Void MenuLibsExpendableButton_Private_SetColor(CMlQuad _Quad, MenuLibsExpendableButton_K_Image _Image, Vec3 _Color) {
	// Initialize all properties properly here first
	// Modifying one of them afterward can also have an effect on the others.
	// eg: modifying `ModulateColor` will also change the value of `Colorize`.
	_Quad.Colorize = MenuLibsExpendableButton_C_Default_Colorize;
	_Quad.ModulateColor = MenuLibsExpendableButton_C_Default_ModulateColor;
	_Quad.BgColor = MenuLibsExpendableButton_C_Default_BgColor;

	switch (_Image.ColorMode) {
		case MenuLibsExpendableButton_C_ColorMode_Colorize: {
			_Quad.Colorize = _Color;
		}
		case MenuLibsExpendableButton_C_ColorMode_Modulate: {
			_Quad.ModulateColor = _Color;
		}
		case MenuLibsExpendableButton_C_ColorMode_Background: {
			_Quad.BgColor = _Color;
		}
	}
}

// Focus or unfocus the button
Void MenuLibsExpendableButton_Focus(CMlFrame _Frame_ExpendableButton, Boolean _IsFocused, Boolean _IsAnimated) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	MenuLibsExpendableButton_State.IsFocused = _IsFocused;

	if (MenuLibsExpendableButton_State.IsFocused) {
		// Background images animation
		foreach (Position => Quad_Background in MenuLibsExpendableButton_State.Controls.Quads_Background) {
			AnimMgr.Flush(Quad_Background);
			if (!_IsAnimated) {
				if (MenuLibsExpendableButton_State.MergedProperties.BackgroundImages.existskey(Position)) {
					MenuLibsExpendableButton_Private_SetColor(
						Quad_Background,
						MenuLibsExpendableButton_State.MergedProperties.BackgroundImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.BackgroundColorFocused
					);
				}
				Quad_Background.Opacity = MenuLibsExpendableButton_State.MergedProperties.BackgroundOpacityFocused;
			} else {
				declare Text ColorAnim = "";
				if (MenuLibsExpendableButton_State.MergedProperties.BackgroundImages.existskey(Position)) {
					ColorAnim = MenuLibsExpendableButton_Private_GetColorAnim(
						MenuLibsExpendableButton_State.MergedProperties.BackgroundImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.BackgroundColorFocused
					);
				}
				AnimMgr.Add(Quad_Background, "<anim "^ColorAnim^" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.BackgroundOpacityFocused^"\" />", MenuLibsExpendableButton_C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		// Focus images animation
		foreach (Position => Quad_Focus in MenuLibsExpendableButton_State.Controls.Quads_Focus) {
			AnimMgr.Flush(Quad_Focus);
			if (!_IsAnimated) {
				if (MenuLibsExpendableButton_State.MergedProperties.FocusImages.existskey(Position)) {
					MenuLibsExpendableButton_Private_SetColor(
						Quad_Focus,
						MenuLibsExpendableButton_State.MergedProperties.FocusImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.FocusColorFocused
					);
				}
				Quad_Focus.Opacity = MenuLibsExpendableButton_State.MergedProperties.FocusOpacityFocused;
			} else {
				declare Text ColorAnim = "";
				if (MenuLibsExpendableButton_State.MergedProperties.FocusImages.existskey(Position)) {
					ColorAnim = MenuLibsExpendableButton_Private_GetColorAnim(
						MenuLibsExpendableButton_State.MergedProperties.FocusImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.FocusColorFocused
					);
				}
				AnimMgr.Add(Quad_Focus, "<anim "^ColorAnim^" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.FocusOpacityFocused^"\" />", MenuLibsExpendableButton_C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		// Icon image animation
		{
			AnimMgr.Flush(MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon);
			if (!_IsAnimated) {
				if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_IconColorMode)) {
					MenuLibsExpendableButton_Private_SetColor(
						MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon,
						MenuLibsExpendableButton_State.MergedProperties.IconImage,
						MenuLibsExpendableButton_State.MergedProperties.IconColorFocused
					);
				}
				MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.Opacity = MenuLibsExpendableButton_State.MergedProperties.IconOpacityFocused;
			} else {
				declare Text ColorAnim = "";
				if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_IconColorMode)) {
					ColorAnim = MenuLibsExpendableButton_Private_GetColorAnim(
						MenuLibsExpendableButton_State.MergedProperties.IconImage,
						MenuLibsExpendableButton_State.MergedProperties.IconColorFocused
					);
				}
				AnimMgr.Add(MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon, "<anim "^ColorAnim^" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.IconOpacityFocused^"\" />", MenuLibsExpendableButton_C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		// Text animation
		AnimMgr.Flush(MenuLibsExpendableButton_State.Controls.Label_ButtonText);
		if (!_IsAnimated) {
			MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextColor = MenuLibsExpendableButton_State.MergedProperties.TextColorFocused;
			MenuLibsExpendableButton_State.Controls.Label_ButtonText.Opacity = MenuLibsExpendableButton_State.MergedProperties.TextOpacityFocused;
		} else {
			AnimMgr.Add(MenuLibsExpendableButton_State.Controls.Label_ButtonText, "<anim textcolor=\""^MenuLibsExpendableButton_CL::RgbToHex6(MenuLibsExpendableButton_State.MergedProperties.TextColorFocused)^"\" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.TextOpacityFocused^"\" />", MenuLibsExpendableButton_C_FocusFadeInDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	} else {
		// Background images animation
		foreach (Position => Quad_Background in MenuLibsExpendableButton_State.Controls.Quads_Background) {
			AnimMgr.Flush(Quad_Background);
			if (!_IsAnimated) {
				if (MenuLibsExpendableButton_State.MergedProperties.BackgroundImages.existskey(Position)) {
					MenuLibsExpendableButton_Private_SetColor(
						Quad_Background,
						MenuLibsExpendableButton_State.MergedProperties.BackgroundImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.BackgroundColorUnfocused
					);
				}
				Quad_Background.Opacity = MenuLibsExpendableButton_State.MergedProperties.BackgroundOpacityUnfocused;
			} else {
				declare Text ColorAnim = "";
				if (MenuLibsExpendableButton_State.MergedProperties.BackgroundImages.existskey(Position)) {
					ColorAnim = MenuLibsExpendableButton_Private_GetColorAnim(
						MenuLibsExpendableButton_State.MergedProperties.BackgroundImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.BackgroundColorUnfocused
					);
				}
				AnimMgr.Add(Quad_Background, "<anim "^ColorAnim^" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.BackgroundOpacityUnfocused^"\" />", MenuLibsExpendableButton_C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		// Focus images animation
		foreach (Position => Quad_Focus in MenuLibsExpendableButton_State.Controls.Quads_Focus) {
			AnimMgr.Flush(Quad_Focus);
			if (!_IsAnimated) {
				if (MenuLibsExpendableButton_State.MergedProperties.FocusImages.existskey(Position)) {
					MenuLibsExpendableButton_Private_SetColor(
						Quad_Focus,
						MenuLibsExpendableButton_State.MergedProperties.FocusImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.FocusColorUnfocused
					);
				}
				Quad_Focus.Opacity = MenuLibsExpendableButton_State.MergedProperties.FocusOpacityUnfocused;
			} else {
				declare Text ColorAnim = "";
				if (MenuLibsExpendableButton_State.MergedProperties.FocusImages.existskey(Position)) {
					ColorAnim = MenuLibsExpendableButton_Private_GetColorAnim(
						MenuLibsExpendableButton_State.MergedProperties.FocusImages[Position],
						MenuLibsExpendableButton_State.MergedProperties.FocusColorUnfocused
					);
				}
				AnimMgr.Add(Quad_Focus, "<anim "^ColorAnim^" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.FocusOpacityUnfocused^"\" />", MenuLibsExpendableButton_C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		// Icon image animation
		{
			AnimMgr.Flush(MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon);
			if (!_IsAnimated) {
				if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_IconColorMode)) {
					MenuLibsExpendableButton_Private_SetColor(
						MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon,
						MenuLibsExpendableButton_State.MergedProperties.IconImage,
						MenuLibsExpendableButton_State.MergedProperties.IconColorUnfocused
					);
				}
				MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.Opacity = MenuLibsExpendableButton_State.MergedProperties.IconOpacityUnfocused;
			} else {
				declare Text ColorAnim = "";
				if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_IconColorMode)) {
					ColorAnim = MenuLibsExpendableButton_Private_GetColorAnim(
						MenuLibsExpendableButton_State.MergedProperties.IconImage,
						MenuLibsExpendableButton_State.MergedProperties.IconColorUnfocused
					);
				}
				AnimMgr.Add(MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon, "<anim "^ColorAnim^" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.IconOpacityUnfocused^"\" />", MenuLibsExpendableButton_C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
			}
		}

		// Text animation
		AnimMgr.Flush(MenuLibsExpendableButton_State.Controls.Label_ButtonText);
		if (!_IsAnimated) {
			MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextColor = MenuLibsExpendableButton_State.MergedProperties.TextColorUnfocused;
			MenuLibsExpendableButton_State.Controls.Label_ButtonText.Opacity = MenuLibsExpendableButton_State.MergedProperties.TextOpacityUnfocused;
		} else {
			AnimMgr.Add(MenuLibsExpendableButton_State.Controls.Label_ButtonText, "<anim textcolor=\""^MenuLibsExpendableButton_CL::RgbToHex6(MenuLibsExpendableButton_State.MergedProperties.TextColorUnfocused)^"\" opacity=\""^MenuLibsExpendableButton_State.MergedProperties.TextOpacityUnfocused^"\" />", MenuLibsExpendableButton_C_FocusFadeOutDuration, CAnimManager::EAnimManagerEasing::QuadOut);
		}
	}
}
Void MenuLibsExpendableButton_Focus(CMlFrame _Frame_ExpendableButton, Boolean _IsFocused) {
	MenuLibsExpendableButton_Focus(_Frame_ExpendableButton, _IsFocused, True);
}
Void MenuLibsExpendableButton_Focus(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_Focus(_Frame_ExpendableButton, True);
}
Void MenuLibsExpendableButton_Unfocus(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_Focus(_Frame_ExpendableButton, False);
}

Integer[] MenuLibsExpendableButton_Private_EnableProperty(Integer[] _EnabledProperties, Integer _Property, Boolean _Enabled) {
	declare Integer[] EnabledProperties = _EnabledProperties;

	if (_Enabled) {
		if (!EnabledProperties.exists(_Property)) {
			EnabledProperties.add(_Property);
		}
	} else {
		EnabledProperties.remove(_Property);
	}

	return EnabledProperties;
}

Void MenuLibsExpendableButton_Private_ApplyImage(CMlQuad _Quad, MenuLibsExpendableButton_K_Image _Image, Real _Height, Boolean _SuperSample) {
	if (_Image.Url != "" || _Image.ColorMode == MenuLibsExpendableButton_C_ColorMode_Background) {
		_Quad.ImageUrl = _Image.Url;
		if (_Image.Size.Y != 0.) {
			_Quad.Size = <_Height * _Image.Size.X / _Image.Size.Y, _Height>;
		} else {
			_Quad.Size = <_Height, _Height>;
		}
		_Quad.SuperSample = (_SuperSample && _Image.Url != "" && _Image.ColorMode == MenuLibsExpendableButton_C_ColorMode_Colorize);
		_Quad.Visible = True;
	} else {
		_Quad.ImageUrl = "";
		_Quad.Size = <0., _Height>;
		_Quad.SuperSample = False;
		_Quad.Visible = False;
	}
}

Void MenuLibsExpendableButton_Private_ApplyImages(CMlQuad[Integer] _Quads, MenuLibsExpendableButton_K_Image[Integer] _Images, Real _Height, Boolean _SuperSample) {
	foreach (Position in MenuLibsExpendableButton_C_Positions) {
		if (_Quads.existskey(Position))	{
			declare CMlQuad Quad = _Quads[Position];
			declare MenuLibsExpendableButton_K_Image Image = _Images.get(Position, MenuLibsExpendableButton_K_Image {});
			MenuLibsExpendableButton_Private_ApplyImage(Quad, Image, _Height, _SuperSample);
		}
	}
}

// Set and enable a property
MenuLibsExpendableButton_K_Properties MenuLibsExpendableButton_Private_SetProperty(MenuLibsExpendableButton_K_Properties _TargetProperties, Integer _PropertyId, MenuLibsExpendableButton_K_Properties _SourceProperties) {
	declare MenuLibsExpendableButton_K_Properties Properties = _TargetProperties;

	Properties.Enabled = MenuLibsExpendableButton_Private_EnableProperty(Properties.Enabled, _PropertyId, True);

	switch (_PropertyId) {
		case MenuLibsExpendableButton_C_Property_TextValue: Properties.TextValue = _SourceProperties.TextValue;
		case MenuLibsExpendableButton_C_Property_TextFitLabelEnabled: Properties.TextFitLabelEnabled = _SourceProperties.TextFitLabelEnabled;
		case MenuLibsExpendableButton_C_Property_TextAutoNewLineEnabled: Properties.TextAutoNewLineEnabled = _SourceProperties.TextAutoNewLineEnabled;
		case MenuLibsExpendableButton_C_Property_TextMaxLines: Properties.TextMaxLines = _SourceProperties.TextMaxLines;
		case MenuLibsExpendableButton_C_Property_TextFont: Properties.TextFont = _SourceProperties.TextFont;
		case MenuLibsExpendableButton_C_Property_TextFontSize: Properties.TextFontSize = _SourceProperties.TextFontSize;
		case MenuLibsExpendableButton_C_Property_TextPrefix: Properties.TextPrefix = _SourceProperties.TextPrefix;
		case MenuLibsExpendableButton_C_Property_TextHAlign: Properties.TextHAlign = _SourceProperties.TextHAlign;
		case MenuLibsExpendableButton_C_Property_TextVAlign: Properties.TextVAlign = _SourceProperties.TextVAlign;
		case MenuLibsExpendableButton_C_Property_TextOffset: Properties.TextOffset = _SourceProperties.TextOffset;
		case MenuLibsExpendableButton_C_Property_TextSize: Properties.TextSize = _SourceProperties.TextSize;
		case MenuLibsExpendableButton_C_Property_TextColorFocused: Properties.TextColorFocused = _SourceProperties.TextColorFocused;
		case MenuLibsExpendableButton_C_Property_TextColorUnfocused: Properties.TextColorUnfocused = _SourceProperties.TextColorUnfocused;
		case MenuLibsExpendableButton_C_Property_TextOpacityFocused: Properties.TextOpacityFocused = _SourceProperties.TextOpacityFocused;
		case MenuLibsExpendableButton_C_Property_TextOpacityUnfocused: Properties.TextOpacityUnfocused = _SourceProperties.TextOpacityUnfocused;
		case MenuLibsExpendableButton_C_Property_Height: Properties.Height = _SourceProperties.Height;
		case MenuLibsExpendableButton_C_Property_MinWidth: Properties.MinWidth = _SourceProperties.MinWidth;
		case MenuLibsExpendableButton_C_Property_MaxWidth: Properties.MaxWidth = _SourceProperties.MaxWidth;
		case MenuLibsExpendableButton_C_Property_Width: Properties.Width = _SourceProperties.Width;
		case MenuLibsExpendableButton_C_Property_HAlign: Properties.HAlign = _SourceProperties.HAlign;
		case MenuLibsExpendableButton_C_Property_VAlign: Properties.VAlign = _SourceProperties.VAlign;
		case MenuLibsExpendableButton_C_Property_BackgroundImages: {
			foreach (Position => BackgroundImage in _SourceProperties.BackgroundImages) {
				Properties.BackgroundImages[Position] = BackgroundImage;
			}
		}
		case MenuLibsExpendableButton_C_Property_FocusImages: {
			foreach (Position => FocusImage in _SourceProperties.FocusImages) {
				Properties.FocusImages[Position] = FocusImage;
			}
		}
		case MenuLibsExpendableButton_C_Property_BackgroundColorFocused: Properties.BackgroundColorFocused = _SourceProperties.BackgroundColorFocused;
		case MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused: Properties.BackgroundColorUnfocused = _SourceProperties.BackgroundColorUnfocused;
		case MenuLibsExpendableButton_C_Property_BackgroundOpacityFocused: Properties.BackgroundOpacityFocused = _SourceProperties.BackgroundOpacityFocused;
		case MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused: Properties.BackgroundOpacityUnfocused = _SourceProperties.BackgroundOpacityUnfocused;
		case MenuLibsExpendableButton_C_Property_FocusColorFocused: Properties.FocusColorFocused = _SourceProperties.FocusColorFocused;
		case MenuLibsExpendableButton_C_Property_FocusColorUnfocused: Properties.FocusColorUnfocused = _SourceProperties.FocusColorUnfocused;
		case MenuLibsExpendableButton_C_Property_FocusOpacityFocused: Properties.FocusOpacityFocused = _SourceProperties.FocusOpacityFocused;
		case MenuLibsExpendableButton_C_Property_FocusOpacityUnfocused: Properties.FocusOpacityUnfocused = _SourceProperties.FocusOpacityUnfocused;
		case MenuLibsExpendableButton_C_Property_IconImageUrl: Properties.IconImage.Url = _SourceProperties.IconImage.Url;
		case MenuLibsExpendableButton_C_Property_IconSize: Properties.IconImage.Size = _SourceProperties.IconImage.Size;
		case MenuLibsExpendableButton_C_Property_IconColorMode: Properties.IconImage.ColorMode = _SourceProperties.IconImage.ColorMode;
		case MenuLibsExpendableButton_C_Property_IconColorFocused: Properties.IconColorFocused = _SourceProperties.IconColorFocused;
		case MenuLibsExpendableButton_C_Property_IconColorUnfocused: Properties.IconColorUnfocused = _SourceProperties.IconColorUnfocused;
		case MenuLibsExpendableButton_C_Property_IconOpacityFocused: Properties.IconOpacityFocused = _SourceProperties.IconOpacityFocused;
		case MenuLibsExpendableButton_C_Property_IconOpacityUnfocused: Properties.IconOpacityUnfocused = _SourceProperties.IconOpacityUnfocused;
		case MenuLibsExpendableButton_C_Property_IconAlign: Properties.IconAlign = _SourceProperties.IconAlign;
		case MenuLibsExpendableButton_C_Property_IconOffset: Properties.IconOffset = _SourceProperties.IconOffset;
		case MenuLibsExpendableButton_C_Property_HitboxRot: Properties.HitboxRot = _SourceProperties.HitboxRot;
		case MenuLibsExpendableButton_C_Property_HitboxWidthScale: Properties.HitboxWidthScale = _SourceProperties.HitboxWidthScale;
		case MenuLibsExpendableButton_C_Property_HitboxHeightScale: Properties.HitboxHeightScale = _SourceProperties.HitboxHeightScale;
		case MenuLibsExpendableButton_C_Property_HitboxDebug: Properties.HitboxDebug = _SourceProperties.HitboxDebug;
		case MenuLibsExpendableButton_C_Property_Padding: Properties.Padding = _SourceProperties.Padding;
		case MenuLibsExpendableButton_C_Property_SuperSample: Properties.SuperSample = _SourceProperties.SuperSample;
	}

	return Properties;
}

// Merge a base properties struct with other enabled properties
MenuLibsExpendableButton_K_Properties MenuLibsExpendableButton_Private_MergeProperties(MenuLibsExpendableButton_K_Properties _Base, MenuLibsExpendableButton_K_Properties[] _PropertiesToMerge) {
	declare MenuLibsExpendableButton_K_Properties MergedProperties = _Base;

	foreach (Properties in _PropertiesToMerge) {
		foreach (PropertyId in Properties.Enabled) {
			MergedProperties = MenuLibsExpendableButton_Private_SetProperty(MergedProperties, PropertyId, Properties);
		}
	}

	return MergedProperties;
}

// Redraw the button (apply style, size, ...)
Void MenuLibsExpendableButton_RedrawButton(CMlFrame _Frame_ExpendableButton, Boolean _IsAnimated) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;

	declare MenuLibsExpendableButton_K_Properties[] PropertiesToMerge = [MenuLibsExpendableButton_G_DefaultProperties];
	foreach (Style in MenuLibsExpendableButton_State.Styles) {
		PropertiesToMerge.add(MenuLibsExpendableButton_G_Styles.get(Style, MenuLibsExpendableButton_K_Properties {}));
	}
	PropertiesToMerge.add(MenuLibsExpendableButton_State.CustomizedProperties);

	MenuLibsExpendableButton_State.MergedProperties = MenuLibsExpendableButton_Private_MergeProperties(
		MenuLibsExpendableButton_K_Properties {
			TextValue = "",
			TextFitLabelEnabled = True,
			TextAutoNewLineEnabled = False,
			TextMaxLines = -1,
			TextFont = "",
			TextFontSize = 3.,
			TextPrefix = "",
			TextHAlign = CMlControl::AlignHorizontal::HCenter,
			TextVAlign = CMlControl::AlignVertical::VCenter2,
			TextOffset = <0., 0.>,
			TextSize = <10., 10.>,
			TextColorFocused = <1., 1., 1.>,
			TextColorUnfocused = <1., 1., 1.>,
			TextOpacityFocused = 1.,
			TextOpacityUnfocused = 1.,
			Height = 10.,
			MinWidth = 0.,
			MaxWidth = 0.,
			Width = 0.,
			HAlign = CMlControl::AlignHorizontal::Left,
			VAlign = CMlControl::AlignVertical::Top,
			BackgroundImages = [
				MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image { ColorMode = MenuLibsExpendableButton_C_ColorMode_Background }
			],
			FocusImages = [
				MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image { ColorMode = MenuLibsExpendableButton_C_ColorMode_Background }
			],
			BackgroundColorFocused = <1., 0., 0.>,
			BackgroundColorUnfocused = <0., 0., 1.>,
			BackgroundOpacityFocused = 1.,
			BackgroundOpacityUnfocused = 1.,
			FocusColorFocused = <0., 0., 1.>,
			FocusColorUnfocused = <1., 0., 0.>,
			FocusOpacityFocused = 1.,
			FocusOpacityUnfocused = 0.,
			IconImage = MenuLibsExpendableButton_K_Image {},
			IconColorFocused = <1., 1., 1.>,
			IconColorUnfocused = <1., 1., 1.>,
			IconOpacityFocused = 1.,
			IconOpacityUnfocused = 1.,
			IconAlign = MenuLibsExpendableButton_C_IconAlign_Left,
			IconOffset = <0., 0.>,
			HitboxRot = 0.,
			HitboxWidthScale = 1.,
			HitboxHeightScale = 1.,
			HitboxDebug = False,
			Padding = <0., 0.>,
			SuperSample = False
		},
		PropertiesToMerge
	);

	// Apply the padding in Y
	if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_Padding)) {
		MenuLibsExpendableButton_State.MergedProperties.Height += (MenuLibsExpendableButton_State.MergedProperties.Padding.Y * 2);
	}
	// Update the button background and focus images
	MenuLibsExpendableButton_Private_ApplyImages(MenuLibsExpendableButton_State.Controls.Quads_Background, MenuLibsExpendableButton_State.MergedProperties.BackgroundImages, MenuLibsExpendableButton_State.MergedProperties.Height, MenuLibsExpendableButton_State.MergedProperties.SuperSample);
	MenuLibsExpendableButton_Private_ApplyImages(MenuLibsExpendableButton_State.Controls.Quads_Focus, MenuLibsExpendableButton_State.MergedProperties.FocusImages, MenuLibsExpendableButton_State.MergedProperties.Height, MenuLibsExpendableButton_State.MergedProperties.SuperSample);

	// Update the button icon
	if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_IconSize)) {
		MenuLibsExpendableButton_Private_ApplyImage(MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon, MenuLibsExpendableButton_State.MergedProperties.IconImage, MenuLibsExpendableButton_State.MergedProperties.IconImage.Size.Y, False);
	} else {
		MenuLibsExpendableButton_Private_ApplyImage(MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon, MenuLibsExpendableButton_State.MergedProperties.IconImage, MenuLibsExpendableButton_State.MergedProperties.Height * 0.8, False);
	}

	// Update button text
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.Value = MenuLibsExpendableButton_State.MergedProperties.TextValue;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextFont = MenuLibsExpendableButton_State.MergedProperties.TextFont;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextSizeReal = MenuLibsExpendableButton_State.MergedProperties.TextFontSize;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextPrefix = MenuLibsExpendableButton_State.MergedProperties.TextPrefix;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.HorizontalAlign = MenuLibsExpendableButton_State.MergedProperties.TextHAlign;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.VerticalAlign = MenuLibsExpendableButton_State.MergedProperties.TextVAlign;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.AutoNewLine = MenuLibsExpendableButton_State.MergedProperties.TextAutoNewLineEnabled;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.MaxLine = MenuLibsExpendableButton_State.MergedProperties.TextMaxLines;

	// Compute width of the three button parts
	declare Real LeftWidth = 0.;
	if (
		MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Left].Visible ||
		MenuLibsExpendableButton_State.Controls.Quads_Focus[MenuLibsExpendableButton_C_Position_Left].Visible
	) {
		LeftWidth = MenuLibsExpendableButton_ML::Max(
			MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Left].Size.X,
			MenuLibsExpendableButton_State.Controls.Quads_Focus[MenuLibsExpendableButton_C_Position_Left].Size.X
		);
	}
	declare Real RightWidth = 0.;
	if (
		MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Right].Visible ||
		MenuLibsExpendableButton_State.Controls.Quads_Focus[MenuLibsExpendableButton_C_Position_Right].Visible
	) {
		RightWidth = MenuLibsExpendableButton_ML::Max(
			MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Right].Size.X,
			MenuLibsExpendableButton_State.Controls.Quads_Focus[MenuLibsExpendableButton_C_Position_Right].Size.X
		);
	}
	// Force the use of the translated text even if the value does not use `_()`, the label would translate it anyway
	declare Real LabelWidth = MenuLibsExpendableButton_State.Controls.Label_ButtonText.ComputeWidth(MenuLibsExpendableButton_TL::GetTranslatedText(MenuLibsExpendableButton_State.Controls.Label_ButtonText.Value), False);
	declare Real MiddleWidth = LabelWidth;
	if (MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.Visible) {
		MiddleWidth += MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.Size.X;
		if (LabelWidth > 0.) {
			MiddleWidth += MenuLibsExpendableButton_C_IconTextMargin;
		}
	}

	// Apply the minimum, maximum and forced width
	if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_Width)) {
		MiddleWidth = MenuLibsExpendableButton_ML::Max(0., MenuLibsExpendableButton_State.MergedProperties.Width - LeftWidth - RightWidth);
	}
	if (
		MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_MinWidth) &&
		LeftWidth + MiddleWidth + RightWidth < MenuLibsExpendableButton_State.MergedProperties.MinWidth
	) {
		MiddleWidth = MenuLibsExpendableButton_State.MergedProperties.MinWidth - LeftWidth - RightWidth;
	}
	if (
		MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_MaxWidth) &&
		LeftWidth + MiddleWidth + RightWidth > MenuLibsExpendableButton_State.MergedProperties.MaxWidth
	) {
		MiddleWidth = MenuLibsExpendableButton_ML::Max(0., MenuLibsExpendableButton_State.MergedProperties.MaxWidth - LeftWidth - RightWidth);
	}
	// Apply the padding in X
	declare Real MaxWidthExceed = 0.;
	if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_Padding)) {
		if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_MaxWidth)) {
			// If the (total width + padding) do not exceed the MaxWidth, apply the padding
			if (LeftWidth + MiddleWidth + (MenuLibsExpendableButton_State.MergedProperties.Padding.X * 2) + RightWidth <= MenuLibsExpendableButton_State.MergedProperties.MaxWidth) {
				MiddleWidth += (MenuLibsExpendableButton_State.MergedProperties.Padding.X * 2);
			} else { // otherwise we will substract the exceed to the TextSize later
				MaxWidthExceed = (LeftWidth + MiddleWidth + (MenuLibsExpendableButton_State.MergedProperties.Padding.X * 2) + RightWidth) - MenuLibsExpendableButton_State.MergedProperties.MaxWidth;
			}
		} else {
			MiddleWidth += (MenuLibsExpendableButton_State.MergedProperties.Padding.X * 2);
		}
	}

	// Update button's parts position
	MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Middle].RelativePosition_V3.X = LeftWidth;
	MenuLibsExpendableButton_State.Controls.Quads_Focus[MenuLibsExpendableButton_C_Position_Middle].RelativePosition_V3.X = LeftWidth;
	MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Right].RelativePosition_V3.X = LeftWidth + MiddleWidth;
	MenuLibsExpendableButton_State.Controls.Quads_Focus[MenuLibsExpendableButton_C_Position_Right].RelativePosition_V3.X = LeftWidth + MiddleWidth;
	MenuLibsExpendableButton_State.Controls.Label_ButtonText.RelativePosition_V3 = MenuLibsExpendableButton_State.MergedProperties.TextOffset;

	// Update button's parts size
	MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Middle].Size.X = MiddleWidth;
	MenuLibsExpendableButton_State.Controls.Quads_Focus[MenuLibsExpendableButton_C_Position_Middle].Size.X = MiddleWidth;

	// Update the hitbox
	MenuLibsExpendableButton_State.Controls.Quad_NavZone.RelativePosition_V3 = <
		(LeftWidth + MiddleWidth + RightWidth) * 0.5,
		MenuLibsExpendableButton_State.MergedProperties.Height * -0.5
	>;
	MenuLibsExpendableButton_State.Controls.Quad_NavZone.RelativeRotation = MenuLibsExpendableButton_State.MergedProperties.HitboxRot;
	if (MenuLibsExpendableButton_State.Controls.Quad_NavZone.RelativeRotation != 0.) {
		declare Real ButtonVisibleWidth = ((LeftWidth * MenuLibsExpendableButton_State.MergedProperties.HitboxWidthScale) + MiddleWidth + (RightWidth * MenuLibsExpendableButton_State.MergedProperties.HitboxWidthScale)); //< Hypothenuse
		declare Real ButtonSkewRad = MenuLibsExpendableButton_ML::DegToRad(MenuLibsExpendableButton_State.Controls.Quad_NavZone.RelativeRotation);
		MenuLibsExpendableButton_State.Controls.Quad_NavZone.Size.X = ButtonVisibleWidth * MenuLibsExpendableButton_ML::Cos(ButtonSkewRad);
		if (MenuLibsExpendableButton_ML::Cos(ButtonSkewRad) == 0.) {
			MenuLibsExpendableButton_State.Controls.Quad_NavZone.Size.Y = 0.;
		} else {
			MenuLibsExpendableButton_State.Controls.Quad_NavZone.Size.Y = (ButtonVisibleWidth * MenuLibsExpendableButton_ML::Sin(ButtonSkewRad)) + ((MenuLibsExpendableButton_State.MergedProperties.Height * MenuLibsExpendableButton_State.MergedProperties.HitboxHeightScale) / MenuLibsExpendableButton_ML::Cos(ButtonSkewRad));
		}
		MenuLibsExpendableButton_State.Controls.Frame_HitboxClip.Size = <(LeftWidth + MiddleWidth + RightWidth), MenuLibsExpendableButton_State.MergedProperties.Height>;
	} else {
		MenuLibsExpendableButton_State.Controls.Quad_NavZone.Size = <
			(LeftWidth + MiddleWidth + RightWidth) * MenuLibsExpendableButton_State.MergedProperties.HitboxWidthScale,
			MenuLibsExpendableButton_State.MergedProperties.Height * MenuLibsExpendableButton_State.MergedProperties.HitboxHeightScale
		>;
		MenuLibsExpendableButton_State.Controls.Frame_HitboxClip.Size = <0., 0.>; //< This default value disable the clipping
	}
	if (MenuLibsExpendableButton_State.MergedProperties.HitboxDebug) {
		MenuLibsExpendableButton_State.Controls.Quad_NavZone.Opacity = 0.5;
	} else {
		MenuLibsExpendableButton_State.Controls.Quad_NavZone.Opacity = 0.;
	}

	// Update the button text and icon position and size
	MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3 = <0., MenuLibsExpendableButton_State.MergedProperties.Height * -0.5>;
	MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3 = <0., 0.>;

	declare Real IconWidth;
	declare Real TextWidth;
	declare Real MarginWidth;
	if (MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.Visible) {
		IconWidth = MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.Size.X;
		MarginWidth = MenuLibsExpendableButton_C_IconTextMargin;
		TextWidth = MenuLibsExpendableButton_ML::Max(0., MiddleWidth - IconWidth - MarginWidth - MaxWidthExceed);
	} else {
		TextWidth = MenuLibsExpendableButton_ML::Max(0., MiddleWidth - MaxWidthExceed);
	}

	if (MenuLibsExpendableButton_State.MergedProperties.Enabled.exists(MenuLibsExpendableButton_C_Property_TextSize)) {
		TextWidth = MenuLibsExpendableButton_State.MergedProperties.TextSize.X;
		MenuLibsExpendableButton_State.Controls.Label_ButtonText.Size = MenuLibsExpendableButton_State.MergedProperties.TextSize;
	} else {
		MenuLibsExpendableButton_State.Controls.Label_ButtonText.Size = <TextWidth, MenuLibsExpendableButton_State.MergedProperties.Height>;
	}

	if (MenuLibsExpendableButton_State.MergedProperties.TextFitLabelEnabled && !MenuLibsExpendableButton_State.MergedProperties.TextAutoNewLineEnabled && LabelWidth > MenuLibsExpendableButton_State.Controls.Label_ButtonText.Size.X) {
		ComponentMenuLibsTools_FitLabelValue(
			MenuLibsExpendableButton_State.Controls.Label_ButtonText,
			MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextSizeReal,
			MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextSizeReal / 10.,
			MenuLibsExpendableButton_State.Controls.Label_ButtonText.TextSizeReal / 10.
		);
		// Force the use of the translated text even if the value does not use `_()`, the label would translate it anyway
		LabelWidth = MenuLibsExpendableButton_State.Controls.Label_ButtonText.ComputeWidth(MenuLibsExpendableButton_TL::GetTranslatedText(MenuLibsExpendableButton_State.Controls.Label_ButtonText.Value), False);
	}

	MenuLibsExpendableButton_State.Controls.Label_ButtonText.Visible = MenuLibsExpendableButton_State.Controls.Label_ButtonText.Size.X > 0.;
	ComponentMenuLibsTools_AlignFrameContent(
		MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign,
		<TextWidth, MenuLibsExpendableButton_State.MergedProperties.Height>,
		MenuLibsExpendableButton_State.MergedProperties.TextHAlign,
		MenuLibsExpendableButton_State.MergedProperties.TextVAlign
	);
	MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += LeftWidth;

	MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3.X += LeftWidth;
	declare Integer IconAlign = MenuLibsExpendableButton_State.MergedProperties.IconAlign;
	if (
		IconAlign == MenuLibsExpendableButton_C_IconAlign_TextLeft &&
		MenuLibsExpendableButton_State.MergedProperties.TextHAlign == CMlControl::AlignHorizontal::Left
	) {
		IconAlign = MenuLibsExpendableButton_C_IconAlign_Left;
	} else if (
		IconAlign == MenuLibsExpendableButton_C_IconAlign_TextRight &&
		MenuLibsExpendableButton_State.MergedProperties.TextHAlign == CMlControl::AlignHorizontal::Right
	) {
		IconAlign = MenuLibsExpendableButton_C_IconAlign_Right;
	}
	switch (IconAlign) {
		case MenuLibsExpendableButton_C_IconAlign_Left: {
			MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += IconWidth + MarginWidth;
			MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Left;
		}
		case MenuLibsExpendableButton_C_IconAlign_Right: {
			MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Right;
			MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3.X += TextWidth + MarginWidth + IconWidth;
		}
		case MenuLibsExpendableButton_C_IconAlign_Center: {
			MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += (IconWidth * 0.5) + (MarginWidth * 0.5);
			MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::HCenter;
			MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3.X += (MiddleWidth * 0.5);
		}
		case MenuLibsExpendableButton_C_IconAlign_TextLeft: {
			switch (MenuLibsExpendableButton_State.MergedProperties.TextHAlign) {
				case CMlControl::AlignHorizontal::HCenter: {
					MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += IconWidth + MarginWidth;
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Right;
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3.X = MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X - (MenuLibsExpendableButton_ML::Min(TextWidth, LabelWidth) * 0.5) - MarginWidth;
				}
				case CMlControl::AlignHorizontal::Right: {
					MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X += IconWidth + MarginWidth;
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Right;
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3.X = MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X - MenuLibsExpendableButton_ML::Min(TextWidth, LabelWidth) - MarginWidth;
				}
			}
		}
		case MenuLibsExpendableButton_C_IconAlign_TextRight: {
			switch (MenuLibsExpendableButton_State.MergedProperties.TextHAlign) {
				case CMlControl::AlignHorizontal::Left: {
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Left;
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3.X = MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X + MenuLibsExpendableButton_ML::Min(TextWidth, LabelWidth) + MarginWidth;
				}
				case CMlControl::AlignHorizontal::HCenter: {
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.HorizontalAlign = CMlControl::AlignHorizontal::Left;
					MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3.X = MenuLibsExpendableButton_State.Controls.Frame_ButtonTextAlign.RelativePosition_V3.X + (MenuLibsExpendableButton_ML::Min(TextWidth, LabelWidth) * 0.5) + MarginWidth;
				}
			}
		}
	}

	// Apply an offset to the aligned position of the icon
	MenuLibsExpendableButton_State.Controls.Quad_ButtonIcon.RelativePosition_V3 += MenuLibsExpendableButton_State.MergedProperties.IconOffset;

	// Align the button
	ComponentMenuLibsTools_AlignFrame(
		MenuLibsExpendableButton_State.Controls.Frame_ButtonAlign,
		<LeftWidth + MiddleWidth + RightWidth, MenuLibsExpendableButton_State.MergedProperties.Height>,
		MenuLibsExpendableButton_State.MergedProperties.HAlign,
		MenuLibsExpendableButton_State.MergedProperties.VAlign
	);

	// Update focus
	MenuLibsExpendableButton_Focus(_Frame_ExpendableButton, MenuLibsExpendableButton_State.IsFocused, _IsAnimated);
}
Void MenuLibsExpendableButton_RedrawButton(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_RedrawButton(_Frame_ExpendableButton, True);
}

// Redraw all buttons
Void MenuLibsExpendableButton_RedrawButtons() {
	Page.GetClassChildren("MenuLibsExpendableButton_expendable-button", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlFrame Frame_ExpendableButton = (Control as CMlFrame).Parent;
		if (MenuLibsExpendableButton_IsButton(Frame_ExpendableButton)) {
			MenuLibsExpendableButton_RedrawButton(Frame_ExpendableButton);
		}
	}
}

// Customize a property
Void MenuLibsExpendableButton_Private_SetCustomizedProperty(CMlFrame _Frame_ExpendableButton, Integer _PropertyId, MenuLibsExpendableButton_K_Properties _Properties, Boolean _Redraw) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	MenuLibsExpendableButton_State.CustomizedProperties = MenuLibsExpendableButton_Private_SetProperty(MenuLibsExpendableButton_State.CustomizedProperties, _PropertyId, _Properties);
	if (_Redraw) MenuLibsExpendableButton_RedrawButton(_Frame_ExpendableButton);
}

// Reset a customized property
Void MenuLibsExpendableButton_Private_ResetCustomizedProperty(CMlFrame _Frame_ExpendableButton, Integer _PropertyId, Boolean _Redraw) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	MenuLibsExpendableButton_State.CustomizedProperties.Enabled = MenuLibsExpendableButton_Private_EnableProperty(MenuLibsExpendableButton_State.CustomizedProperties.Enabled, _PropertyId, False);
	if (_Redraw) MenuLibsExpendableButton_RedrawButton(_Frame_ExpendableButton);
}

// Update button visibility
Void MenuLibsExpendableButton_ShowAndUnlock(CMlFrame _Frame_ExpendableButton) {
	ComponentNavigation_Lock(_Frame_ExpendableButton, False);
	_Frame_ExpendableButton.Show();
}
Void MenuLibsExpendableButton_HideAndLock(CMlFrame _Frame_ExpendableButton) {
	ComponentNavigation_Lock(_Frame_ExpendableButton, True);
	_Frame_ExpendableButton.Hide();
}
Void MenuLibsExpendableButton_SetVisibilityAndNavigation(CMlFrame _Frame_ExpendableButton, Boolean _IsVisible) {
	ComponentNavigation_Lock(_Frame_ExpendableButton, !_IsVisible);
	_Frame_ExpendableButton.Visible = _IsVisible;
}

// Update the text displayed in the button
Void MenuLibsExpendableButton_SetText(CMlFrame _Frame_ExpendableButton, Text _Value, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextValue, MenuLibsExpendableButton_K_Properties { TextValue = _Value }, _Redraw);
}
Void MenuLibsExpendableButton_SetText(CMlFrame _Frame_ExpendableButton, Text _Value) {
	MenuLibsExpendableButton_SetText(_Frame_ExpendableButton, _Value, True);
}
Void MenuLibsExpendableButton_ResetText(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextValue, _Redraw);
}
Void MenuLibsExpendableButton_ResetText(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetText(_Frame_ExpendableButton, True);
}

// Enable or disable the fit label on the button text
Void MenuLibsExpendableButton_SetTextFitLabelEnabled(CMlFrame _Frame_ExpendableButton, Boolean _Enabled, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextFitLabelEnabled, MenuLibsExpendableButton_K_Properties { TextFitLabelEnabled = _Enabled }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextFitLabelEnabled(CMlFrame _Frame_ExpendableButton, Boolean _Enabled) {
	MenuLibsExpendableButton_SetTextFitLabelEnabled(_Frame_ExpendableButton, _Enabled, True);
}
Void MenuLibsExpendableButton_ResetTextFitLabelEnabled(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextFitLabelEnabled, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextFitLabelEnabled(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextFitLabelEnabled(_Frame_ExpendableButton, True);
}

// Enable or disable the auto new line on the button text
Void MenuLibsExpendableButton_SetTextAutoNewLineEnabled(CMlFrame _Frame_ExpendableButton, Boolean _AutoNewLine, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextAutoNewLineEnabled, MenuLibsExpendableButton_K_Properties { TextAutoNewLineEnabled = _AutoNewLine }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextAutoNewLineEnabled(CMlFrame _Frame_ExpendableButton, Boolean _AutoNewLine) {
	MenuLibsExpendableButton_SetTextAutoNewLineEnabled(_Frame_ExpendableButton, _AutoNewLine, True);
}
Void MenuLibsExpendableButton_ResetTextAutoNewLineEnabled(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextAutoNewLineEnabled, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextAutoNewLineEnabled(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextAutoNewLineEnabled(_Frame_ExpendableButton, True);
}

// Update the maximum number of lines for the text in the button
Void MenuLibsExpendableButton_SetTextMaxLines(CMlFrame _Frame_ExpendableButton, Integer _MaxLines, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextMaxLines, MenuLibsExpendableButton_K_Properties { TextMaxLines = _MaxLines }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextMaxLines(CMlFrame _Frame_ExpendableButton, Integer _MaxLines) {
	MenuLibsExpendableButton_SetTextMaxLines(_Frame_ExpendableButton, _MaxLines, True);
}
Void MenuLibsExpendableButton_ResetTextMaxLines(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextMaxLines, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextMaxLines(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextMaxLines(_Frame_ExpendableButton, True);
}

// Update the font of the text displayed in the button
Void MenuLibsExpendableButton_SetTextFont(CMlFrame _Frame_ExpendableButton, Text _Font, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextFont, MenuLibsExpendableButton_K_Properties { TextFont = _Font }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextFont(CMlFrame _Frame_ExpendableButton, Text _Font) {
	MenuLibsExpendableButton_SetTextFont(_Frame_ExpendableButton, _Font, True);
}
Void MenuLibsExpendableButton_ResetTextFont(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextFont, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextFont(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextFont(_Frame_ExpendableButton, True);
}

// Update the size of the text displayed in the button
Void MenuLibsExpendableButton_SetTextFontSize(CMlFrame _Frame_ExpendableButton, Real _Size, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextFontSize, MenuLibsExpendableButton_K_Properties { TextFontSize = _Size }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextFontSize(CMlFrame _Frame_ExpendableButton, Real _Size) {
	MenuLibsExpendableButton_SetTextFontSize(_Frame_ExpendableButton, _Size, True);
}
Void MenuLibsExpendableButton_ResetTextFontSize(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextFontSize, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextFontSize(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextFontSize(_Frame_ExpendableButton, True);
}

// Update the prefix of the text displayed in the button
Void MenuLibsExpendableButton_SetTextPrefix(CMlFrame _Frame_ExpendableButton, Text _Prefix, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextPrefix, MenuLibsExpendableButton_K_Properties { TextPrefix = _Prefix }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextPrefix(CMlFrame _Frame_ExpendableButton, Text _Prefix) {
	MenuLibsExpendableButton_SetTextPrefix(_Frame_ExpendableButton, _Prefix, True);
}
Void MenuLibsExpendableButton_ResetTextPrefix(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextPrefix, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextPrefix(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextPrefix(_Frame_ExpendableButton, True);
}

// Update the horizontal alignment of the text displayed in the button
Void MenuLibsExpendableButton_SetTextHAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextHAlign, MenuLibsExpendableButton_K_Properties { TextHAlign = _HAlign }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextHAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign) {
	MenuLibsExpendableButton_SetTextHAlign(_Frame_ExpendableButton, _HAlign, True);
}
Void MenuLibsExpendableButton_ResetTextHAlign(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextHAlign, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextHAlign(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextHAlign(_Frame_ExpendableButton, True);
}

// Update the vertical alignment of the text displayed in the button
Void MenuLibsExpendableButton_SetTextVAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextVAlign, MenuLibsExpendableButton_K_Properties { TextVAlign = _VAlign }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextVAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign) {
	MenuLibsExpendableButton_SetTextVAlign(_Frame_ExpendableButton, _VAlign, True);
}
Void MenuLibsExpendableButton_ResetTextVAlign(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextVAlign, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextVAlign(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextVAlign(_Frame_ExpendableButton, True);
}

// Update the offset of the text displayed in the button
Void MenuLibsExpendableButton_SetTextOffset(CMlFrame _Frame_ExpendableButton, Vec2 _Offset, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextOffset, MenuLibsExpendableButton_K_Properties { TextOffset = _Offset }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextOffset(CMlFrame _Frame_ExpendableButton, Vec2 _Offset) {
	MenuLibsExpendableButton_SetTextOffset(_Frame_ExpendableButton, _Offset, True);
}
Void MenuLibsExpendableButton_ResetTextOffset(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextOffset, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextOffset(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextOffset(_Frame_ExpendableButton, True);
}

// Update the size of the label for the text displayed in the button
Void MenuLibsExpendableButton_SetTextSize(CMlFrame _Frame_ExpendableButton, Vec2 _Size, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextSize, MenuLibsExpendableButton_K_Properties { TextSize = _Size }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextSize(CMlFrame _Frame_ExpendableButton, Vec2 _Size) {
	MenuLibsExpendableButton_SetTextSize(_Frame_ExpendableButton, _Size, True);
}
Void MenuLibsExpendableButton_ResetTextSize(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextSize, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextSize(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextSize(_Frame_ExpendableButton, True);
}

// Update the text color of the focused button
Void MenuLibsExpendableButton_SetTextColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextColorFocused, MenuLibsExpendableButton_K_Properties { TextColorFocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetTextColorFocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetTextColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetTextColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetTextColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetTextColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetTextColorFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextColorFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextColorFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextColorFocused(_Frame_ExpendableButton, True);
}

// Update the text color of the unfocused button
Void MenuLibsExpendableButton_SetTextColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextColorUnfocused, MenuLibsExpendableButton_K_Properties { TextColorUnfocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetTextColorUnfocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetTextColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetTextColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetTextColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetTextColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetTextColorUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextColorUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextColorUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextColorUnfocused(_Frame_ExpendableButton, True);
}

// Update the text opacity of the focused button
Void MenuLibsExpendableButton_SetTextOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextOpacityFocused, MenuLibsExpendableButton_K_Properties { TextOpacityFocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetTextOpacityFocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetTextOpacityFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextOpacityFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextOpacityFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextOpacityFocused(_Frame_ExpendableButton, True);
}

// Update the text opacity of the unfocused button
Void MenuLibsExpendableButton_SetTextOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextOpacityUnfocused, MenuLibsExpendableButton_K_Properties { TextOpacityUnfocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetTextOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetTextOpacityUnfocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetTextOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_TextOpacityUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetTextOpacityUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetTextOpacityUnfocused(_Frame_ExpendableButton, True);
}

// Update the height of the button
Void MenuLibsExpendableButton_SetHeight(CMlFrame _Frame_ExpendableButton, Real _Height, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_Height, MenuLibsExpendableButton_K_Properties { Height = _Height }, _Redraw);
}
Void MenuLibsExpendableButton_SetHeight(CMlFrame _Frame_ExpendableButton, Real _Height) {
	MenuLibsExpendableButton_SetHeight(_Frame_ExpendableButton, _Height, True);
}
Void MenuLibsExpendableButton_ResetHeight(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_Height, _Redraw);
}
Void MenuLibsExpendableButton_ResetHeight(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetHeight(_Frame_ExpendableButton, True);
}

// Update the minimum width of the button
Void MenuLibsExpendableButton_SetMinWidth(CMlFrame _Frame_ExpendableButton, Real _MinWidth, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_MinWidth, MenuLibsExpendableButton_K_Properties { MinWidth = _MinWidth }, _Redraw);
}
Void MenuLibsExpendableButton_SetMinWidth(CMlFrame _Frame_ExpendableButton, Real _MinWidth) {
	MenuLibsExpendableButton_SetMinWidth(_Frame_ExpendableButton, _MinWidth, True);
}
Void MenuLibsExpendableButton_ResetMinWidth(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_MinWidth, _Redraw);
}
Void MenuLibsExpendableButton_ResetMinWidth(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetMinWidth(_Frame_ExpendableButton, True);
}

// Update the maximum width of the button
Void MenuLibsExpendableButton_SetMaxWidth(CMlFrame _Frame_ExpendableButton, Real _MaxWidth, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_MaxWidth, MenuLibsExpendableButton_K_Properties { MaxWidth = _MaxWidth }, _Redraw);
}
Void MenuLibsExpendableButton_SetMaxWidth(CMlFrame _Frame_ExpendableButton, Real _MaxWidth) {
	MenuLibsExpendableButton_SetMaxWidth(_Frame_ExpendableButton, _MaxWidth, True);
}
Void MenuLibsExpendableButton_ResetMaxWidth(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_MaxWidth, _Redraw);
}
Void MenuLibsExpendableButton_ResetMaxWidth(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetMaxWidth(_Frame_ExpendableButton, True);
}

// Force the width of the button
Void MenuLibsExpendableButton_SetWidth(CMlFrame _Frame_ExpendableButton, Real _Width, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_Width, MenuLibsExpendableButton_K_Properties { Width = _Width }, _Redraw);
}
Void MenuLibsExpendableButton_SetWidth(CMlFrame _Frame_ExpendableButton, Real _Width) {
	MenuLibsExpendableButton_SetWidth(_Frame_ExpendableButton, _Width, True);
}
Void MenuLibsExpendableButton_ResetWidth(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_Width, _Redraw);
}
Void MenuLibsExpendableButton_ResetWidth(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetWidth(_Frame_ExpendableButton, True);
}

// Update the horizontal alignment of the button
Void MenuLibsExpendableButton_SetHAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HAlign, MenuLibsExpendableButton_K_Properties { HAlign = _HAlign }, _Redraw);
}
Void MenuLibsExpendableButton_SetHAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignHorizontal _HAlign) {
	MenuLibsExpendableButton_SetHAlign(_Frame_ExpendableButton, _HAlign, True);
}
Void MenuLibsExpendableButton_ResetHAlign(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HAlign, _Redraw);
}
Void MenuLibsExpendableButton_ResetHAlign(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetHAlign(_Frame_ExpendableButton, True);
}

// Update the vertical alignment of the button
Void MenuLibsExpendableButton_SetVAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_VAlign, MenuLibsExpendableButton_K_Properties { VAlign = _VAlign }, _Redraw);
}
Void MenuLibsExpendableButton_SetVAlign(CMlFrame _Frame_ExpendableButton, CMlControl::AlignVertical _VAlign) {
	MenuLibsExpendableButton_SetVAlign(_Frame_ExpendableButton, _VAlign, True);
}
Void MenuLibsExpendableButton_ResetVAlign(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_VAlign, _Redraw);
}
Void MenuLibsExpendableButton_ResetVAlign(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetVAlign(_Frame_ExpendableButton, True);
}

// Update the background images of the button
Void MenuLibsExpendableButton_SetBackgroundImages(CMlFrame _Frame_ExpendableButton, MenuLibsExpendableButton_K_Image[Integer] _BackgroundImages, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundImages, MenuLibsExpendableButton_K_Properties { BackgroundImages = _BackgroundImages }, _Redraw);
}
Void MenuLibsExpendableButton_SetBackgroundImages(CMlFrame _Frame_ExpendableButton, MenuLibsExpendableButton_K_Image[Integer] _BackgroundImages) {
	MenuLibsExpendableButton_SetBackgroundImages(_Frame_ExpendableButton, _BackgroundImages, True);
}
Void MenuLibsExpendableButton_ResetBackgroundImages(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundImages, _Redraw);
}
Void MenuLibsExpendableButton_ResetBackgroundImages(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetBackgroundImages(_Frame_ExpendableButton, True);
}

// Update the background color of the focused button
Void MenuLibsExpendableButton_SetBackgroundColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundColorFocused, MenuLibsExpendableButton_K_Properties { BackgroundColorFocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetBackgroundColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetBackgroundColorFocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetBackgroundColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetBackgroundColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetBackgroundColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetBackgroundColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetBackgroundColorFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundColorFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetBackgroundColorFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetBackgroundColorFocused(_Frame_ExpendableButton, True);
}

// Update the background color of the unfocused button
Void MenuLibsExpendableButton_SetBackgroundColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused, MenuLibsExpendableButton_K_Properties { BackgroundColorUnfocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetBackgroundColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetBackgroundColorUnfocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetBackgroundColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetBackgroundColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetBackgroundColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetBackgroundColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetBackgroundColorUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetBackgroundColorUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetBackgroundColorUnfocused(_Frame_ExpendableButton, True);
}

// Update the background opacity of the focused button
Void MenuLibsExpendableButton_SetBackgroundOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundOpacityFocused, MenuLibsExpendableButton_K_Properties { BackgroundOpacityFocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetBackgroundOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetBackgroundOpacityFocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetBackgroundOpacityFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundOpacityFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetBackgroundOpacityFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetBackgroundOpacityFocused(_Frame_ExpendableButton, True);
}

// Update the background opacity of the unfocused button
Void MenuLibsExpendableButton_SetBackgroundOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused, MenuLibsExpendableButton_K_Properties { BackgroundOpacityUnfocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetBackgroundOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetBackgroundOpacityUnfocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetBackgroundOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetBackgroundOpacityUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetBackgroundOpacityUnfocused(_Frame_ExpendableButton, True);
}

// Update the focus color of the focused button
Void MenuLibsExpendableButton_SetFocusColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusColorFocused, MenuLibsExpendableButton_K_Properties { FocusColorFocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetFocusColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetFocusColorFocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetFocusColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetFocusColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetFocusColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetFocusColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetFocusColorFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusColorFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetFocusColorFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetFocusColorFocused(_Frame_ExpendableButton, True);
}

// Update the focus color of the unfocused button
Void MenuLibsExpendableButton_SetFocusColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusColorUnfocused, MenuLibsExpendableButton_K_Properties { FocusColorUnfocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetFocusColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetFocusColorUnfocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetFocusColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetFocusColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetFocusColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetFocusColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetFocusColorUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusColorUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetFocusColorUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetFocusColorUnfocused(_Frame_ExpendableButton, True);
}

// Update the focus opacity of the focused button
Void MenuLibsExpendableButton_SetFocusOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusOpacityFocused, MenuLibsExpendableButton_K_Properties { FocusOpacityFocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetFocusOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetFocusOpacityFocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetFocusOpacityFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusOpacityFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetFocusOpacityFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetFocusOpacityFocused(_Frame_ExpendableButton, True);
}

// Update the focus opacity of the unfocused button
Void MenuLibsExpendableButton_SetFocusOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusOpacityUnfocused, MenuLibsExpendableButton_K_Properties { FocusOpacityUnfocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetFocusOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetFocusOpacityUnfocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetFocusOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusOpacityUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetFocusOpacityUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetFocusOpacityUnfocused(_Frame_ExpendableButton, True);
}

// Update the focus images of the button
Void MenuLibsExpendableButton_SetFocusImages(CMlFrame _Frame_ExpendableButton, MenuLibsExpendableButton_K_Image[Integer] _FocusImages, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusImages, MenuLibsExpendableButton_K_Properties { FocusImages = _FocusImages }, _Redraw);
}
Void MenuLibsExpendableButton_SetFocusImages(CMlFrame _Frame_ExpendableButton, MenuLibsExpendableButton_K_Image[Integer] _FocusImages) {
	MenuLibsExpendableButton_SetFocusImages(_Frame_ExpendableButton, _FocusImages, True);
}
Void MenuLibsExpendableButton_ResetFocusImages(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_FocusImages, _Redraw);
}
Void MenuLibsExpendableButton_ResetFocusImages(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetFocusImages(_Frame_ExpendableButton, True);
}

// Update the image of the button icon
Void MenuLibsExpendableButton_SetIconImageUrl(CMlFrame _Frame_ExpendableButton, Text _Url, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconImageUrl, MenuLibsExpendableButton_K_Properties { IconImage = MenuLibsExpendableButton_K_Image { Url = _Url } }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconImageUrl(CMlFrame _Frame_ExpendableButton, Text _Url) {
	MenuLibsExpendableButton_SetIconImageUrl(_Frame_ExpendableButton, _Url, True);
}
Void MenuLibsExpendableButton_ResetIconImageUrl(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconImageUrl, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconImageUrl(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconImageUrl(_Frame_ExpendableButton, True);
}

// Update the size of the button icon
Void MenuLibsExpendableButton_SetIconSize(CMlFrame _Frame_ExpendableButton, Vec2 _Size, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconSize, MenuLibsExpendableButton_K_Properties { IconImage = MenuLibsExpendableButton_K_Image { Size = _Size } }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconSize(CMlFrame _Frame_ExpendableButton, Vec2 _Size) {
	MenuLibsExpendableButton_SetIconSize(_Frame_ExpendableButton, _Size, True);
}
Void MenuLibsExpendableButton_ResetIconSize(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconSize, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconSize(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconSize(_Frame_ExpendableButton, True);
}

// Update the color mode of the button icon
Void MenuLibsExpendableButton_SetIconColorMode(CMlFrame _Frame_ExpendableButton, Integer _ColorMode, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconColorMode, MenuLibsExpendableButton_K_Properties { IconImage = MenuLibsExpendableButton_K_Image { ColorMode = _ColorMode } }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconColorMode(CMlFrame _Frame_ExpendableButton, Integer _ColorMode) {
	MenuLibsExpendableButton_SetIconColorMode(_Frame_ExpendableButton, _ColorMode, True);
}
Void MenuLibsExpendableButton_ResetIconColorMode(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconColorMode, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconColorMode(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconColorMode(_Frame_ExpendableButton, True);
}

// Update the icon color of the focused button
Void MenuLibsExpendableButton_SetIconColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconColorFocused, MenuLibsExpendableButton_K_Properties { IconColorFocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconColorFocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetIconColorFocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetIconColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetIconColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetIconColorFocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetIconColorFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetIconColorFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconColorFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconColorFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconColorFocused(_Frame_ExpendableButton, True);
}

// Update the icon color of the unfocused button
Void MenuLibsExpendableButton_SetIconColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconColorUnfocused, MenuLibsExpendableButton_K_Properties { IconColorUnfocused = _Color }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconColorUnfocused(CMlFrame _Frame_ExpendableButton, Vec3 _Color) {
	MenuLibsExpendableButton_SetIconColorUnfocused(_Frame_ExpendableButton, _Color, True);
}
Void MenuLibsExpendableButton_SetIconColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color, Boolean _Redraw) {
	MenuLibsExpendableButton_SetIconColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color), _Redraw);
}
Void MenuLibsExpendableButton_SetIconColorUnfocused(CMlFrame _Frame_ExpendableButton, Text _Color) {
	MenuLibsExpendableButton_SetIconColorUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_CL::HexToRgb(_Color));
}
Void MenuLibsExpendableButton_ResetIconColorUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconColorUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconColorUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconColorUnfocused(_Frame_ExpendableButton, True);
}

// Update the icon opacity of the focused button
Void MenuLibsExpendableButton_SetIconOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconOpacityFocused, MenuLibsExpendableButton_K_Properties { IconOpacityFocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconOpacityFocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetIconOpacityFocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetIconOpacityFocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconOpacityFocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconOpacityFocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconOpacityFocused(_Frame_ExpendableButton, True);
}

// Update the icon opacity of the unfocused button
Void MenuLibsExpendableButton_SetIconOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconOpacityUnfocused, MenuLibsExpendableButton_K_Properties { IconOpacityUnfocused = _Opacity }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Real _Opacity) {
	MenuLibsExpendableButton_SetIconOpacityUnfocused(_Frame_ExpendableButton, _Opacity, True);
}
Void MenuLibsExpendableButton_ResetIconOpacityUnfocused(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconOpacityUnfocused, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconOpacityUnfocused(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconOpacityUnfocused(_Frame_ExpendableButton, True);
}

// Update the icon alignment of the unfocused button
Void MenuLibsExpendableButton_SetIconAlign(CMlFrame _Frame_ExpendableButton, Integer _IconAlign, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconAlign, MenuLibsExpendableButton_K_Properties { IconAlign = _IconAlign }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconAlign(CMlFrame _Frame_ExpendableButton, Integer _IconAlign) {
	MenuLibsExpendableButton_SetIconAlign(_Frame_ExpendableButton, _IconAlign, True);
}
Void MenuLibsExpendableButton_ResetIconAlign(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconAlign, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconAlign(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconAlign(_Frame_ExpendableButton, True);
}

// Update the icon alignment of the unfocused button
Void MenuLibsExpendableButton_SetIconOffset(CMlFrame _Frame_ExpendableButton, Vec2 _IconOffset, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconOffset, MenuLibsExpendableButton_K_Properties { IconOffset = _IconOffset }, _Redraw);
}
Void MenuLibsExpendableButton_SetIconOffset(CMlFrame _Frame_ExpendableButton, Vec2 _IconOffset) {
	MenuLibsExpendableButton_SetIconOffset(_Frame_ExpendableButton, _IconOffset, True);
}
Void MenuLibsExpendableButton_ResetIconOffset(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_IconOffset, _Redraw);
}
Void MenuLibsExpendableButton_ResetIconOffset(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetIconOffset(_Frame_ExpendableButton, True);
}

// Update the hitbox rotation of the button
Void MenuLibsExpendableButton_SetHitboxRotation(CMlFrame _Frame_ExpendableButton, Real _Rotation, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxRot, MenuLibsExpendableButton_K_Properties { HitboxRot = _Rotation }, _Redraw);
}
Void MenuLibsExpendableButton_SetHitboxRotation(CMlFrame _Frame_ExpendableButton, Real _Rotation) {
	MenuLibsExpendableButton_SetHitboxRotation(_Frame_ExpendableButton, _Rotation, True);
}
Void MenuLibsExpendableButton_ResetHitboxRotation(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxRot, _Redraw);
}
Void MenuLibsExpendableButton_ResetHitboxRotation(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetHitboxRotation(_Frame_ExpendableButton, True);
}

// Update the hitbox width scale of the button
Void MenuLibsExpendableButton_SetHitboxWidthScale(CMlFrame _Frame_ExpendableButton, Real _Scale, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxWidthScale, MenuLibsExpendableButton_K_Properties { HitboxWidthScale = _Scale }, _Redraw);
}
Void MenuLibsExpendableButton_SetHitboxWidthScale(CMlFrame _Frame_ExpendableButton, Real _Scale) {
	MenuLibsExpendableButton_SetHitboxWidthScale(_Frame_ExpendableButton, _Scale, True);
}
Void MenuLibsExpendableButton_ResetHitboxWidthScale(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxWidthScale, _Redraw);
}
Void MenuLibsExpendableButton_ResetHitboxWidthScale(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetHitboxWidthScale(_Frame_ExpendableButton, True);
}

// Update the hitbox Height scale of the button
Void MenuLibsExpendableButton_SetHitboxHeightScale(CMlFrame _Frame_ExpendableButton, Real _Scale, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxHeightScale, MenuLibsExpendableButton_K_Properties { HitboxHeightScale = _Scale }, _Redraw);
}
Void MenuLibsExpendableButton_SetHitboxHeightScale(CMlFrame _Frame_ExpendableButton, Real _Scale) {
	MenuLibsExpendableButton_SetHitboxHeightScale(_Frame_ExpendableButton, _Scale, True);
}
Void MenuLibsExpendableButton_ResetHitboxHeightScale(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxHeightScale, _Redraw);
}
Void MenuLibsExpendableButton_ResetHitboxHeightScale(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetHitboxHeightScale(_Frame_ExpendableButton, True);
}

// Enable hitbox debug
Void MenuLibsExpendableButton_SetHitboxDebug(CMlFrame _Frame_ExpendableButton, Boolean _Enabled, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxDebug, MenuLibsExpendableButton_K_Properties { HitboxDebug = _Enabled }, _Redraw);
}
Void MenuLibsExpendableButton_SetHitboxDebug(CMlFrame _Frame_ExpendableButton, Boolean _Enabled) {
	MenuLibsExpendableButton_SetHitboxDebug(_Frame_ExpendableButton, _Enabled, True);
}
Void MenuLibsExpendableButton_ResetHitboxDebug(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_HitboxDebug, _Redraw);
}
Void MenuLibsExpendableButton_ResetHitboxDebug(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetHitboxDebug(_Frame_ExpendableButton, True);
}

// Update the padding of the button
Void MenuLibsExpendableButton_SetPadding(CMlFrame _Frame_ExpendableButton, Vec2 _Padding, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_Padding, MenuLibsExpendableButton_K_Properties { Padding = _Padding }, _Redraw);
}
Void MenuLibsExpendableButton_SetPadding(CMlFrame _Frame_ExpendableButton, Vec2 _Padding) {
	MenuLibsExpendableButton_SetPadding(_Frame_ExpendableButton, _Padding, True);
}
Void MenuLibsExpendableButton_ResetPadding(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_Padding, _Redraw);
}
Void MenuLibsExpendableButton_ResetPadding(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetPadding(_Frame_ExpendableButton, True);
}

// Enable supersample
Void MenuLibsExpendableButton_SetSuperSample(CMlFrame _Frame_ExpendableButton, Boolean _Enabled, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_SetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_SuperSample, MenuLibsExpendableButton_K_Properties { SuperSample = _Enabled }, _Redraw);
}
Void MenuLibsExpendableButton_SetSuperSample(CMlFrame _Frame_ExpendableButton, Boolean _Enabled) {
	MenuLibsExpendableButton_SetSuperSample(_Frame_ExpendableButton, _Enabled, True);
}
Void MenuLibsExpendableButton_ResetSuperSample(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_Private_ResetCustomizedProperty(_Frame_ExpendableButton, MenuLibsExpendableButton_C_Property_SuperSample, _Redraw);
}
Void MenuLibsExpendableButton_ResetSuperSample(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_ResetSuperSample(_Frame_ExpendableButton, True);
}

// Update the styles of the button
Void MenuLibsExpendableButton_SetStyles(CMlFrame _Frame_ExpendableButton, Text[] _StyleIds, Boolean _Redraw) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	MenuLibsExpendableButton_State.Styles = _StyleIds;
	if (_Redraw) MenuLibsExpendableButton_RedrawButton(_Frame_ExpendableButton);
}
Void MenuLibsExpendableButton_SetStyles(CMlFrame _Frame_ExpendableButton, Text[] _StyleIds) {
	MenuLibsExpendableButton_SetStyles(_Frame_ExpendableButton, _StyleIds, True);
}
Void MenuLibsExpendableButton_ResetStyles(CMlFrame _Frame_ExpendableButton, Boolean _Redraw) {
	MenuLibsExpendableButton_SetStyles(_Frame_ExpendableButton, [], _Redraw);
}
Void MenuLibsExpendableButton_ResetStyles(CMlFrame _Frame_ExpendableButton) {
	MenuLibsExpendableButton_SetStyles(_Frame_ExpendableButton, []);
}
Boolean MenuLibsExpendableButton_HasStyle(CMlFrame _Frame_ExpendableButton, Text _StyleId) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	return MenuLibsExpendableButton_State.Styles.exists(_StyleId);
}
Void MenuLibsExpendableButton_AddStyle(CMlFrame _Frame_ExpendableButton, Text _StyleId, Boolean _Redraw) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	if (!MenuLibsExpendableButton_State.Styles.exists(_StyleId)) {
		MenuLibsExpendableButton_State.Styles.add(_StyleId);
	}
	if (_Redraw) MenuLibsExpendableButton_RedrawButton(_Frame_ExpendableButton);
}
Void MenuLibsExpendableButton_AddStyle(CMlFrame _Frame_ExpendableButton, Text _StyleId) {
	MenuLibsExpendableButton_AddStyle(_Frame_ExpendableButton, _StyleId, True);
}
Void MenuLibsExpendableButton_RemoveStyle(CMlFrame _Frame_ExpendableButton, Text _StyleId, Boolean _Redraw) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	MenuLibsExpendableButton_State.Styles.remove(_StyleId);
	if (_Redraw) MenuLibsExpendableButton_RedrawButton(_Frame_ExpendableButton);
}
Void MenuLibsExpendableButton_RemoveStyle(CMlFrame _Frame_ExpendableButton, Text _StyleId) {
	MenuLibsExpendableButton_RemoveStyle(_Frame_ExpendableButton, _StyleId, True);
}

// Set the default properties of all buttons
Void MenuLibsExpendableButton_SetButtonsDefaultProperties(MenuLibsExpendableButton_K_Properties _DefaultProperties, Boolean _Redraw) {
	MenuLibsExpendableButton_G_DefaultProperties = _DefaultProperties;
	if (_Redraw) MenuLibsExpendableButton_RedrawButtons();
}
Void MenuLibsExpendableButton_SetButtonsDefaultProperties(MenuLibsExpendableButton_K_Properties _DefaultProperties) {
	MenuLibsExpendableButton_SetButtonsDefaultProperties(_DefaultProperties, True);
}

// Create a new button style
Void MenuLibsExpendableButton_CreateStyle(Text _StyleId, MenuLibsExpendableButton_K_Properties _Style) {
	MenuLibsExpendableButton_G_Styles[_StyleId] = _Style;
}

// Create a new button style from existing styles
Void MenuLibsExpendableButton_CreateStyle(Text _StyleId, Text[] _ExistingStyleIds) {
	declare MenuLibsExpendableButton_K_Properties[] PropertiesToMerge = [];

	foreach (StyleId in _ExistingStyleIds) {
		PropertiesToMerge.add(MenuLibsExpendableButton_G_Styles.get(StyleId, MenuLibsExpendableButton_K_Properties {}));
	}

	MenuLibsExpendableButton_G_Styles[_StyleId] = MenuLibsExpendableButton_Private_MergeProperties(MenuLibsExpendableButton_G_DefaultProperties, PropertiesToMerge);
}

// Initialize a button
Void MenuLibsExpendableButton_InitializeButton(CMlFrame _Frame_ExpendableButton) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	MenuLibsExpendableButton_State = MenuLibsExpendableButton_K_State {};

	MenuLibsExpendableButton_State.IsButton = True;
	MenuLibsExpendableButton_State.IsFocused = False;

	declare CMlFrame Frame_ButtonAlign <=> (_Frame_ExpendableButton.GetFirstChild("MenuLibsExpendableButton_frame-button-align") as CMlFrame);
	declare CMlFrame Frame_Background <=> (Frame_ButtonAlign.GetFirstChild("MenuLibsExpendableButton_frame-background") as CMlFrame);
	declare CMlFrame Frame_Focus <=> (Frame_ButtonAlign.GetFirstChild("MenuLibsExpendableButton_frame-focus") as CMlFrame);
	declare CMlFrame Frame_HitboxClip <=> (Frame_ButtonAlign.GetFirstChild("MenuLibsExpendableButton_frame-hitbox-clip") as CMlFrame);
	declare CMlFrame Frame_ButtonTextAlign <=> (Frame_ButtonAlign.GetFirstChild("MenuLibsExpendableButton_frame-button-text-align") as CMlFrame);
	MenuLibsExpendableButton_State.Controls = MenuLibsExpendableButton_K_Controls {
		Frame_ButtonAlign = Frame_ButtonAlign,
		Frame_Background = Frame_Background,
		Quads_Background = [
			MenuLibsExpendableButton_C_Position_Left => (Frame_Background.GetFirstChild("MenuLibsExpendableButton_quad-bg-left") as CMlQuad),
			MenuLibsExpendableButton_C_Position_Middle => (Frame_Background.GetFirstChild("MenuLibsExpendableButton_quad-bg-center") as CMlQuad),
			MenuLibsExpendableButton_C_Position_Right => (Frame_Background.GetFirstChild("MenuLibsExpendableButton_quad-bg-right") as CMlQuad)
		],
		Frame_Focus = Frame_Focus,
		Quads_Focus = [
			MenuLibsExpendableButton_C_Position_Left => (Frame_Focus.GetFirstChild("MenuLibsExpendableButton_quad-focus-left") as CMlQuad),
			MenuLibsExpendableButton_C_Position_Middle => (Frame_Focus.GetFirstChild("MenuLibsExpendableButton_quad-focus-center") as CMlQuad),
			MenuLibsExpendableButton_C_Position_Right => (Frame_Focus.GetFirstChild("MenuLibsExpendableButton_quad-focus-right") as CMlQuad)
		],
		Frame_HitboxClip = Frame_HitboxClip,
		Quad_NavZone = (Frame_HitboxClip.GetFirstChild("MenuLibsExpendableButton_quad-nav-zone") as CMlQuad),
		Quad_ButtonIcon = (Frame_ButtonAlign.GetFirstChild("MenuLibsExpendableButton_quad-button-icon") as CMlQuad),
		Frame_ButtonTextAlign = Frame_ButtonTextAlign,
		Label_ButtonText = (Frame_ButtonTextAlign.GetFirstChild("MenuLibsExpendableButton_label-button-text") as CMlLabel)
	};

	MenuLibsExpendableButton_State.CustomizedProperties = MenuLibsExpendableButton_K_Properties {};
	MenuLibsExpendableButton_State.MergedProperties = MenuLibsExpendableButton_K_Properties {};
	MenuLibsExpendableButton_State.Styles = [];

	if (_Frame_ExpendableButton.DataAttributeExists("text")) {
		MenuLibsExpendableButton_SetText(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-fitlabel-enabled")) {
		MenuLibsExpendableButton_SetTextFitLabelEnabled(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("text-fitlabel-enabled")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-autonewline-enabled")) {
		MenuLibsExpendableButton_SetTextAutoNewLineEnabled(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("text-autonewline-enabled")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-maxlines")) {
		MenuLibsExpendableButton_SetTextMaxLines(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet("text-maxlines")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textfont")) {
		MenuLibsExpendableButton_SetTextFont(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textfont"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textsize")) {
		MenuLibsExpendableButton_SetTextFontSize(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("text-textsize")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textprefix")) {
		MenuLibsExpendableButton_SetTextPrefix(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textprefix"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-halign")) {
		MenuLibsExpendableButton_SetTextHAlign(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToHAlign2(_Frame_ExpendableButton.DataAttributeGet("text-halign")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-valign")) {
		MenuLibsExpendableButton_SetTextVAlign(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToVAlign2(_Frame_ExpendableButton.DataAttributeGet("text-valign")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-offset")) {
		MenuLibsExpendableButton_SetTextOffset(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet("text-offset")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-size")) {
		MenuLibsExpendableButton_SetTextSize(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet("text-size")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textcolor-focused")) {
		MenuLibsExpendableButton_SetTextColorFocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textcolor-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-textcolor-unfocused")) {
		MenuLibsExpendableButton_SetTextColorUnfocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("text-textcolor-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-opacity-focused")) {
		MenuLibsExpendableButton_SetTextOpacityFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("text-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("text-opacity-unfocused")) {
		MenuLibsExpendableButton_SetTextOpacityUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("text-opacity-unfocused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("height")) {
		MenuLibsExpendableButton_SetHeight(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("height")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("width-min")) {
		MenuLibsExpendableButton_SetMinWidth(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("width-min")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("width-max")) {
		MenuLibsExpendableButton_SetMaxWidth(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("width-max")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("width")) {
		MenuLibsExpendableButton_SetWidth(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("width")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("halign")) {
		MenuLibsExpendableButton_SetHAlign(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToHAlign2(_Frame_ExpendableButton.DataAttributeGet("halign")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("valign")) {
		MenuLibsExpendableButton_SetVAlign(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToVAlign2(_Frame_ExpendableButton.DataAttributeGet("valign")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("background-color-focused")) {
		MenuLibsExpendableButton_SetBackgroundColorFocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("background-color-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("background-color-unfocused")) {
		MenuLibsExpendableButton_SetBackgroundColorUnfocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("background-color-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("background-opacity-focused")) {
		MenuLibsExpendableButton_SetBackgroundOpacityFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("background-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("background-opacity-unfocused")) {
		MenuLibsExpendableButton_SetBackgroundOpacityUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("background-opacity-unfocused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-color-focused")) {
		MenuLibsExpendableButton_SetFocusColorFocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("focus-color-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-color-unfocused")) {
		MenuLibsExpendableButton_SetFocusColorUnfocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("focus-color-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-opacity-focused")) {
		MenuLibsExpendableButton_SetFocusOpacityFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("focus-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("focus-opacity-unfocused")) {
		MenuLibsExpendableButton_SetFocusOpacityUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("focus-opacity-unfocused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("styles")) {
		MenuLibsExpendableButton_SetStyles(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::Split(" ", MenuLibsExpendableButton_TL::Trim(_Frame_ExpendableButton.DataAttributeGet("styles"))), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("padding")) {
		MenuLibsExpendableButton_SetPadding(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet("padding")), False);
	}

	declare Text[] Types = ["background", "focus"];
	foreach (Type in Types) {
		declare MenuLibsExpendableButton_K_Image[Integer] Images;
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-image-left")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Left)) Images[MenuLibsExpendableButton_C_Position_Left] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Left].Url = _Frame_ExpendableButton.DataAttributeGet(Type^"-image-left");
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-image-middle")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Middle)) Images[MenuLibsExpendableButton_C_Position_Middle] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Middle].Url = _Frame_ExpendableButton.DataAttributeGet(Type^"-image-middle");
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-image-right")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Right)) Images[MenuLibsExpendableButton_C_Position_Right] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Right].Url = _Frame_ExpendableButton.DataAttributeGet(Type^"-image-right");
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-size-left")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Left)) Images[MenuLibsExpendableButton_C_Position_Left] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Left].Size = ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet(Type^"-size-left"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-size-middle")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Middle)) Images[MenuLibsExpendableButton_C_Position_Middle] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Middle].Size = ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet(Type^"-size-middle"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-size-right")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Right)) Images[MenuLibsExpendableButton_C_Position_Right] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Right].Size = ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet(Type^"-size-right"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-colormode-left")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Left)) Images[MenuLibsExpendableButton_C_Position_Left] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Left].ColorMode = MenuLibsExpendableButton_TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet(Type^"-colormode-left"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-colormode-middle")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Middle)) Images[MenuLibsExpendableButton_C_Position_Middle] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Middle].ColorMode = MenuLibsExpendableButton_TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet(Type^"-colormode-middle"));
		}
		if (_Frame_ExpendableButton.DataAttributeExists(Type^"-colormode-right")) {
			if (!Images.existskey(MenuLibsExpendableButton_C_Position_Right)) Images[MenuLibsExpendableButton_C_Position_Right] = MenuLibsExpendableButton_K_Image {};
			Images[MenuLibsExpendableButton_C_Position_Right].ColorMode = MenuLibsExpendableButton_TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet(Type^"-colormode-right"));
		}
		if (Images.count > 0) {
			if (Type == "background") {
				MenuLibsExpendableButton_SetBackgroundImages(_Frame_ExpendableButton, Images, False);
			} else if (Type == "focus") {
				MenuLibsExpendableButton_SetFocusImages(_Frame_ExpendableButton, Images, False);
			}
		}
	}

	if (_Frame_ExpendableButton.DataAttributeExists("icon-image")) {
		MenuLibsExpendableButton_SetIconImageUrl(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("icon-image"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-size")) {
		MenuLibsExpendableButton_SetIconSize(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet("icon-size")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-colormode")) {
		MenuLibsExpendableButton_SetIconColorMode(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet("icon-colormode")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-color-focused")) {
		MenuLibsExpendableButton_SetIconColorFocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("icon-color-focused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-color-unfocused")) {
		MenuLibsExpendableButton_SetIconColorUnfocused(_Frame_ExpendableButton, _Frame_ExpendableButton.DataAttributeGet("icon-color-unfocused"), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-opacity-focused")) {
		MenuLibsExpendableButton_SetIconOpacityFocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("icon-opacity-focused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-opacity-unfocused")) {
		MenuLibsExpendableButton_SetIconOpacityUnfocused(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("icon-opacity-unfocused")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-align")) {
		MenuLibsExpendableButton_SetIconAlign(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToInteger(_Frame_ExpendableButton.DataAttributeGet("icon-align")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("icon-offset")) {
		MenuLibsExpendableButton_SetIconOffset(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToVec2(_Frame_ExpendableButton.DataAttributeGet("icon-offset")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-rot")) {
		MenuLibsExpendableButton_SetHitboxRotation(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("hitbox-rot")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-width-scale")) {
		MenuLibsExpendableButton_SetHitboxWidthScale(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("hitbox-width-scale")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-height-scale")) {
		MenuLibsExpendableButton_SetHitboxHeightScale(_Frame_ExpendableButton, MenuLibsExpendableButton_TL::ToReal(_Frame_ExpendableButton.DataAttributeGet("hitbox-height-scale")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("hitbox-debug")) {
		MenuLibsExpendableButton_SetHitboxDebug(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("hitbox-debug")), False);
	}
	if (_Frame_ExpendableButton.DataAttributeExists("supersample")) {
		MenuLibsExpendableButton_SetSuperSample(_Frame_ExpendableButton, ComponentMenuLibsTools_TextToBoolean(_Frame_ExpendableButton.DataAttributeGet("supersample")), False);
	}

	MenuLibsExpendableButton_RedrawButton(_Frame_ExpendableButton, False);
}

// Initialize all buttons in the manialink
Void MenuLibsExpendableButton_InitializeButtons() {
	Page.GetClassChildren("MenuLibsExpendableButton_expendable-button", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlFrame Frame_ExpendableButton = (Control as CMlFrame).Parent;
		MenuLibsExpendableButton_InitializeButton(Frame_ExpendableButton);
	}
}

// Get the width of the background
Real MenuLibsExpendableButton_GetWidth(CMlFrame _Frame_ExpendableButton) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	return (
		MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Left].Size.X +
		MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Middle].Size.X +
		MenuLibsExpendableButton_State.Controls.Quads_Background[MenuLibsExpendableButton_C_Position_Right].Size.X
	);
}

// Get the height of the background
Real MenuLibsExpendableButton_GetHeight(CMlFrame _Frame_ExpendableButton) {
	declare MenuLibsExpendableButton_K_State MenuLibsExpendableButton_State for _Frame_ExpendableButton;
	return MenuLibsExpendableButton_State.MergedProperties.Height;
}

***MainStart***
***
MenuLibsExpendableButton_InitializeButtons();
***

// */
// @Component end component-menulibs-expendable-button

// @Component start component-tmnext-expendable-button
// /*

***MainInit***
***
MenuLibsExpendableButton_SetButtonsDefaultProperties(MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_Height,
		MenuLibsExpendableButton_C_Property_TextFont,
		MenuLibsExpendableButton_C_Property_TextFontSize,
		MenuLibsExpendableButton_C_Property_TextPrefix,
		MenuLibsExpendableButton_C_Property_TextOffset,
		MenuLibsExpendableButton_C_Property_TextColorFocused,
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundImages,
		MenuLibsExpendableButton_C_Property_BackgroundColorFocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused,
		MenuLibsExpendableButton_C_Property_FocusColorFocused,
		MenuLibsExpendableButton_C_Property_FocusImages,
		MenuLibsExpendableButton_C_Property_IconColorFocused,
		MenuLibsExpendableButton_C_Property_IconColorUnfocused,
		MenuLibsExpendableButton_C_Property_HitboxRot,
		MenuLibsExpendableButton_C_Property_HitboxWidthScale
	],
	Height = 12.,
	TextFont = "GameFontExtraBold",
	TextFontSize = 4.,
	TextPrefix = "$t$i",
	TextOffset = <0., -0.55>,
	TextColorFocused = <1., 1., 1.>,
	TextColorUnfocused = <0.431, 0.98, 0.627>,
	BackgroundImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_Start_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Background
		},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_End_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	],
	BackgroundColorFocused = <0., 0.372, 0.274>,
	BackgroundColorUnfocused = <0., 0.608, 0.372>,
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_Contour_Start_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_Contour_Middle.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_Contour_End_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	],
	FocusColorFocused = <0.431, 0.98, 0.627>,
	IconColorFocused = <1., 1., 1.>,
	IconColorUnfocused = <0.431, 0.98, 0.627>,
	HitboxRot = 10.,
	HitboxWidthScale = 0.79
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_NoBackground, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_BackgroundImages,
		MenuLibsExpendableButton_C_Property_FocusImages
	],
	BackgroundImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {}
	],
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {}
	]
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_Stack, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_BackgroundImages,
		MenuLibsExpendableButton_C_Property_FocusImages
	],
	BackgroundImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Straight/Common_Button_Start_Straight.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Straight/Common_Button_End_Straight.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	],
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Straight/Common_Button_Contour_Start_Straight.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Straight/Common_Button_Contour_Middle.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Straight/Common_Button_Contour_End_Straight.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	]
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_StackTop, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_BackgroundImages,
		MenuLibsExpendableButton_C_Property_FocusImages
	],
	BackgroundImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_Start_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	],
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_Contour_Start_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	]
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_StackBottom, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_BackgroundImages,
		MenuLibsExpendableButton_C_Property_FocusImages
	],
	BackgroundImages = [
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_End_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	],
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {
			Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Common/ButtonStyles/Rounded/Common_Button_Contour_End_Rounded.dds",
			Size = <128., 256.>,
			ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
		}
	]
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_SizeExpendable, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_MinWidth,
		MenuLibsExpendableButton_C_Property_MaxWidth,
		MenuLibsExpendableButton_C_Property_Height
	],
	MinWidth = 30.,
	MaxWidth = 80.,
	Height = 12.
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_SizeMedium, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_Width,
		MenuLibsExpendableButton_C_Property_Height
	],
	Width = 54.,
	Height = 12.
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_SizeSmall, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_Width,
		MenuLibsExpendableButton_C_Property_Height,
		MenuLibsExpendableButton_C_Property_TextFontSize
	],
	Width = 25.,
	Height = 6.,
	TextFontSize = 2.5
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_AlignCenter, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_HAlign,
		MenuLibsExpendableButton_C_Property_VAlign
	],
	HAlign = CMlControl::AlignHorizontal::HCenter,
	VAlign = CMlControl::AlignVertical::VCenter
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_PageBack, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextValue,
		MenuLibsExpendableButton_C_Property_HAlign
	],
	TextValue = "Â’Back",
	HAlign = CMlControl::AlignHorizontal::Left
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_PagePrevious, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_IconImageUrl,
		MenuLibsExpendableButton_C_Property_IconColorMode,
		MenuLibsExpendableButton_C_Property_IconColorFocused,
		MenuLibsExpendableButton_C_Property_IconOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_IconAlign
	],
	IconImage = MenuLibsExpendableButton_K_Image {
		Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/ICON_ARROW_LEFT_OBLIQUE.dds",
		ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
	},
	IconColorFocused = <1., 1., 1.>,
	IconOpacityUnfocused = 0.6,
	IconAlign = MenuLibsExpendableButton_C_IconAlign_Left
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_PageNext, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_IconImageUrl,
		MenuLibsExpendableButton_C_Property_IconColorMode,
		MenuLibsExpendableButton_C_Property_IconColorFocused,
		MenuLibsExpendableButton_C_Property_IconOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_IconAlign,
		MenuLibsExpendableButton_C_Property_HAlign
	],
	IconImage = MenuLibsExpendableButton_K_Image {
		Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/128x128/ICON_ARROW_RIGHT_OBLIQUE.dds",
		ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
	},
	IconColorFocused = <1., 1., 1.>,
	IconOpacityUnfocused = 0.6,
	IconAlign = MenuLibsExpendableButton_C_IconAlign_Right,
	HAlign = CMlControl::AlignHorizontal::Right
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_PageNextAnimated, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_IconImageUrl,
		MenuLibsExpendableButton_C_Property_IconColorMode,
		MenuLibsExpendableButton_C_Property_IconColorFocused,
		MenuLibsExpendableButton_C_Property_IconOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_IconAlign,
		MenuLibsExpendableButton_C_Property_HAlign
	],
	IconImage = MenuLibsExpendableButton_K_Image {
		Url = "file://Media/Manialinks/Nadeo/TMNext/Menus/Icons/256x256/Icones_256_animated_triple_arrow_right.webm",
		ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize
	},
	IconColorFocused = <0.431, 0.98, 0.627>,
	IconOpacityUnfocused = 0.6,
	IconAlign = MenuLibsExpendableButton_C_IconAlign_Right,
	HAlign = CMlControl::AlignHorizontal::Right
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_ColorDark, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorFocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused,
		MenuLibsExpendableButton_C_Property_FocusColorFocused
	],
	TextColorUnfocused = <1., 1., 1.>,
	TextOpacityUnfocused = 0.6,
	BackgroundOpacityUnfocused = 0.6,
	BackgroundColorFocused = <0., 0.0196078, 0.0784314>,
	BackgroundColorUnfocused = <0., 0.0196078, 0.0784314>,
	FocusColorFocused = <1., 1., 1.>
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_ButtonSecondary, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorFocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused,
		MenuLibsExpendableButton_C_Property_FocusColorFocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_IconOpacityUnfocused
	],
	TextColorUnfocused = <0.431, 0.98, 0.627>,
	BackgroundColorFocused = <0., 0.196, 0.157>,
	BackgroundColorUnfocused = <0., 0.196, 0.157>,
	FocusColorFocused = <0.431, 0.98, 0.627>,
	BackgroundOpacityUnfocused = 0.6,
	TextOpacityUnfocused = 0.6,
	IconOpacityUnfocused = 0.6
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_ButtonTertiary, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_FocusOpacityFocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorFocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused
	],
	TextColorUnfocused = <1., 1., 1.>,
	TextOpacityUnfocused = 0.6,
	BackgroundOpacityUnfocused = 0.6,
	FocusOpacityFocused = 0.,
	BackgroundColorFocused = <0., 0.196, 0.157>,
	BackgroundColorUnfocused = <0., 0.196, 0.157>
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_ButtonWarning, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_BackgroundColorFocused,
		MenuLibsExpendableButton_C_Property_FocusColorFocused
	],
	BackgroundColorFocused = <1., 0.0509804, 0.0509804>,
	FocusColorFocused = <1., 1., 1.>
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_Map, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextHAlign,
		MenuLibsExpendableButton_C_Property_TextOffset,
		MenuLibsExpendableButton_C_Property_TextFontSize,
		MenuLibsExpendableButton_C_Property_TextColorFocused,
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityFocused,
		MenuLibsExpendableButton_C_Property_IconSize,
		MenuLibsExpendableButton_C_Property_IconColorMode,
		MenuLibsExpendableButton_C_Property_IconColorFocused,
		MenuLibsExpendableButton_C_Property_IconColorUnfocused,
		MenuLibsExpendableButton_C_Property_IconOpacityFocused,
		MenuLibsExpendableButton_C_Property_IconOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_IconAlign,
		MenuLibsExpendableButton_C_Property_IconOffset,
		MenuLibsExpendableButton_C_Property_BackgroundColorFocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityFocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_FocusImages
	],
	TextHAlign = CMlControl::AlignHorizontal::Left,
	TextOffset = <-2., -0.55>,
	TextFontSize = 6.5,
	TextColorFocused = <1., 1., 1.>,
	TextColorUnfocused = <0., 0.608, 0.372>,
	TextOpacityFocused = 1.,
	TextOpacityUnfocused = 0.6,
	BackgroundColorFocused = <0., 0.196, 0.157>,
	BackgroundColorUnfocused = <1., 1., 1.>,
	BackgroundOpacityFocused = 1.,
	BackgroundOpacityUnfocused = 0.6,
	IconColorFocused = <1., 1., 1.>,
	IconColorUnfocused = <0., 0.608, 0.372>,
	IconOpacityFocused = 1.,
	IconOpacityUnfocused = 0.6,
	IconAlign = MenuLibsExpendableButton_C_IconAlign_Left,
	IconOffset = <-2.5, 0.>,
	IconImage = MenuLibsExpendableButton_K_Image {
		ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize,
		Size = <10., 10.>
	},
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {}
	]
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_MapRaced, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityFocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityFocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused
	],
	TextColorUnfocused = <0., 0.372, 0.274>,
	TextOpacityFocused = 1.,
	TextOpacityUnfocused = 1.,
	BackgroundOpacityFocused = 1.,
	BackgroundOpacityUnfocused = 0.9
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_MapLive, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused
	],
	TextColorUnfocused = <0., 0.196, 0.157>,
	TextOpacityUnfocused = 1.,
	BackgroundColorUnfocused = <0.431, 0.98, 0.627>,
	BackgroundOpacityUnfocused = 1.
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_MapLocked, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused
	],
	TextColorUnfocused = <0., 0.372, 0.274>,
	BackgroundOpacityUnfocused = 0.4
});

MenuLibsExpendableButton_CreateStyle(MenuLibsExpendableButton_C_Style_Tabs, MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_Height,
		MenuLibsExpendableButton_C_Property_TextColorFocused,
		MenuLibsExpendableButton_C_Property_TextColorUnfocused,
		MenuLibsExpendableButton_C_Property_TextOpacityFocused,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorFocused,
		MenuLibsExpendableButton_C_Property_BackgroundColorUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityFocused,
		MenuLibsExpendableButton_C_Property_BackgroundOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_FocusImages
	],
	Height = 9.5,
	TextOpacityFocused = 1.,
	TextOpacityUnfocused = 0.6,
	TextColorUnfocused = <1., 1., 1.>,
	TextColorFocused = <0.431, 0.98, 0.627>,
	BackgroundColorUnfocused = <0., 0.0196078, 0.0784314>,
	BackgroundColorFocused = <0., 0.0196078, 0.0784314>,
	BackgroundOpacityUnfocused = 0.6,
	BackgroundOpacityFocused = 1.,
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {}
	]
});
***

// */
// @Component end component-tmnext-expendable-button

// @Component start component-menulibs-grid
// /*

ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_SetSize(ComponentMenuLibsGrid_K_GridConfig _GridConfig, Real _Size) {
	declare GridConfig = _GridConfig;
	GridConfig.Size = ComponentMenuLibsGrid_ML::Max(0., _Size);
	return GridConfig;
}
ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_SetGridPadding(ComponentMenuLibsGrid_K_GridConfig _GridConfig, Real _Padding) {
	declare GridConfig = _GridConfig;
	GridConfig.Padding = ComponentMenuLibsGrid_ML::Max(0., _Padding);
	return GridConfig;
}
ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_SetGutter(ComponentMenuLibsGrid_K_GridConfig _GridConfig, Real _Gutter) {
	declare GridConfig = _GridConfig;
	GridConfig.Gutter = ComponentMenuLibsGrid_ML::Max(0., _Gutter);
	return GridConfig;
}
ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_SetDirection(ComponentMenuLibsGrid_K_GridConfig _GridConfig, Integer _Direction) {
	declare GridConfig = _GridConfig;
	GridConfig.Direction = _Direction;
	return GridConfig;
}
ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_AddColumn(ComponentMenuLibsGrid_K_GridConfig _GridConfig, Integer _ColumnId, Real _Size, Integer _Align) {
	declare GridConfig = _GridConfig;
	GridConfig.Columns[_ColumnId] = ComponentMenuLibsGrid_K_GridColumn {
		Size = ComponentMenuLibsGrid_ML::Max(0., _Size),
		Align = _Align
	};
	return GridConfig;
}
ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_AddRow(ComponentMenuLibsGrid_K_GridConfig _GridConfig, Integer _RowId, Real _Size, Integer _Align) {
	return ComponentMenuLibsGrid_AddColumn(_GridConfig, _RowId, _Size, _Align);
}
ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_Create() {
	return ComponentMenuLibsGrid_K_GridConfig {
		Size = 0.,
		Padding = 0.,
		Gutter = 0.,
		Direction = ComponentMenuLibsGrid_C_Direction_Right,
		Columns = []
	};
}
ComponentMenuLibsGrid_K_GridConfig ComponentMenuLibsGrid_Create(Real _Size, Real _Padding, Real _Gutter, Integer _Direction) {
	declare ComponentMenuLibsGrid_K_GridConfig GridConfig = ComponentMenuLibsGrid_Create();
	GridConfig = ComponentMenuLibsGrid_SetSize(GridConfig, _Size);
	GridConfig = ComponentMenuLibsGrid_SetGridPadding(GridConfig, _Padding);
	GridConfig = ComponentMenuLibsGrid_SetGutter(GridConfig, _Gutter);
	GridConfig = ComponentMenuLibsGrid_SetDirection(GridConfig, _Direction);
	return GridConfig;
}
ComponentMenuLibsGrid_K_Grid ComponentMenuLibsGrid_Compile(ComponentMenuLibsGrid_K_GridConfig _GridConfig) {
	declare ComponentMenuLibsGrid_K_Grid Grid;
	Grid.Config = _GridConfig;

	declare Real ColumnSizeRatio = 1.;
	if (_GridConfig.Size > 0. && _GridConfig.Columns.count > 0) {
		declare Real GridSizeWithoutPaddingAndGutter = 0.;
		GridSizeWithoutPaddingAndGutter = _GridConfig.Size - (_GridConfig.Gutter * (_GridConfig.Columns.count - 1)) - (2 * _GridConfig.Padding);
		assert(GridSizeWithoutPaddingAndGutter > 0., "[Grid] The cumulated gutter and padding exceed the grid size you provided");

		declare Real AllColumnsSize;
		foreach (ColumnId => Column in _GridConfig.Columns) {
			AllColumnsSize += Column.Size;
		}

		ColumnSizeRatio = GridSizeWithoutPaddingAndGutter / AllColumnsSize;
	}

	declare Real ColumnPosLeft = _GridConfig.Padding;
	declare Real ColumnPosBgLeft = 0.;
	if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Left || _GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Bottom) {
		ColumnPosLeft *= -1.;
	}
	declare Integer ColumnKey = 0;
	foreach (ColumnId => Column in _GridConfig.Columns) {
		declare Real AlignShift = 0.;
		declare Real ColumnSize = Column.Size * ColumnSizeRatio;
		if (Column.Align == ComponentMenuLibsGrid_C_Align_Center) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Right || _GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Top) {
				AlignShift = ColumnSize * 0.5;
			} else {
				AlignShift = ColumnSize * -0.5;
			}
		} else if (Column.Align == ComponentMenuLibsGrid_C_Align_Left) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Left) {
				AlignShift = ColumnSize * -1.;
			}
		} else if (Column.Align == ComponentMenuLibsGrid_C_Align_Top) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Top) {
				AlignShift = ColumnSize * 1.;
			}
		} else if (Column.Align == ComponentMenuLibsGrid_C_Align_Right) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Right) {
				AlignShift = ColumnSize * 1.;
			}
		} else if (Column.Align == ComponentMenuLibsGrid_C_Align_Bottom) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Bottom) {
				AlignShift = ColumnSize * -1.;
			}
		}
		declare Real ColumnPos = ColumnPosLeft + AlignShift;
		Grid.Pos[ColumnId] = ColumnPos;
		Grid.Size[ColumnId] = ColumnSize;
		if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Right || _GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Top) {
			ColumnPosLeft += Grid.Size[ColumnId] + _GridConfig.Gutter;
		} else {
			ColumnPosLeft -= Grid.Size[ColumnId] + _GridConfig.Gutter;
		}

		declare Boolean IsFirstColumn = (ColumnKey == 0);
		declare Boolean IsLastColumn = (ColumnKey == _GridConfig.Columns.count - 1);
		declare Real AlignBgShift = 0.;
		declare Real ColumnBgSize = ColumnSize;
		if (IsFirstColumn || IsLastColumn) {
			ColumnBgSize += _GridConfig.Padding + (_GridConfig.Gutter * 0.5);
		} else {
			ColumnBgSize += _GridConfig.Gutter;
		}
		if (Column.Align == ComponentMenuLibsGrid_C_Align_Center) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Left || _GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Bottom) {
				if (IsFirstColumn) AlignBgShift = ((_GridConfig.Padding * 0.5) - (_GridConfig.Gutter * 0.25));
				if (IsLastColumn) AlignBgShift = -((_GridConfig.Padding * 0.5) - (_GridConfig.Gutter * 0.25));
			} else {
				if (IsFirstColumn) AlignBgShift = -((_GridConfig.Padding * 0.5) - (_GridConfig.Gutter * 0.25));
				else if (IsLastColumn) AlignBgShift = ((_GridConfig.Padding * 0.5) - (_GridConfig.Gutter * 0.25));
			}
		} else if (Column.Align == ComponentMenuLibsGrid_C_Align_Left || Column.Align == ComponentMenuLibsGrid_C_Align_Bottom) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Left || _GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Bottom) {
				if (IsLastColumn) AlignBgShift = -_GridConfig.Padding;
				else AlignBgShift = (_GridConfig.Gutter * -0.5);
			} else {
				if (IsFirstColumn) AlignBgShift = -_GridConfig.Padding;
				else AlignBgShift = (_GridConfig.Gutter * -0.5);
			}
		} else if (Column.Align == ComponentMenuLibsGrid_C_Align_Right || Column.Align == ComponentMenuLibsGrid_C_Align_Top) {
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Left || _GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Bottom) {
				if (IsFirstColumn) AlignBgShift = _GridConfig.Padding;
				else AlignBgShift = (_GridConfig.Gutter * 0.5);
			} else {
				if (IsLastColumn) AlignBgShift = _GridConfig.Padding;
				else AlignBgShift = (_GridConfig.Gutter * 0.5);
			}
		}
		Grid.PosBg[ColumnId] = ColumnPos + AlignBgShift;
		Grid.SizeBg[ColumnId] = ColumnBgSize;

		ColumnKey += 1;
	}

	return Grid;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
/**	Update the pos of grid elements dynamically
 *
 *	@param	_GridConfig						The grid configuration in which the column/row must be added
 *	@param	_Container						The frame containing the grid elements
 *																The container must have the C_Class_Container class
 *																All grid elements inside the container must have
 *																	- the C_Class_Element class
 *																	- the data-colum (or data-row) attribute
 *	@param	_Skew									Skew position on X axis depending on the original position of the control
 *	@param	_LockGridSize					Keep the grid size, resize the grid otherwise
 *	@param	_Animate							Animate the resize if true, resize without animation otherwise
 */
ComponentMenuLibsGrid_K_Grid ComponentMenuLibsGrid_Update(ComponentMenuLibsGrid_K_GridConfig _GridConfig, CMlFrame _Container, Real _Skew, Boolean _LockGridSize, Boolean _Animate) {
	assert(_Container.HasClass("component-grid-container"), "[Grid] The container you provided is not a grid container.");

	declare ComponentMenuLibsGrid_K_Grid Grid = ComponentMenuLibsGrid_K_Grid {Config = _GridConfig};
	declare Real AllHiddenControlsSize = 0.;
	declare CMlControl[Integer] VisibleControls = [];

	// Check for hidden controls
	foreach (Control in _Container.Controls) {
		if (Control.HasClass("component-grid-element") && (Control.DataAttributeExists("grid-column") || Control.DataAttributeExists("grid-row"))) {
			declare Integer ColumnId;
			if (Control.DataAttributeExists("grid-column")) {
				ColumnId = ComponentMenuLibsGrid_TL::ToInteger(Control.DataAttributeGet("grid-column"));
			} else if (Control.DataAttributeExists("grid-row")) {
				ColumnId = ComponentMenuLibsGrid_TL::ToInteger(Control.DataAttributeGet("grid-row"));
			}
			if (Grid.Config.Columns.existskey(ColumnId)) {
				if (Control.Visible) {
					VisibleControls[ColumnId] = Control;
				} else {
					AllHiddenControlsSize += Grid.Config.Columns[ColumnId].Size;
					Grid.Config.Columns.removekey(ColumnId);
				}
			}
		}
	}

	// Adjust the grid size
	if (!_LockGridSize && _GridConfig.Columns.count > 0) {
		declare Real AllColumnsSize;
		foreach (ColumnId => Column in _GridConfig.Columns) {
			AllColumnsSize += Column.Size;
		}
		if (AllColumnsSize != 0.) {
			Grid.Config.Size -= _GridConfig.Size * AllHiddenControlsSize / AllColumnsSize;
		}
	}

	// Compile the grid with the new sizes
	Grid = ComponentMenuLibsGrid_Compile(Grid.Config);

	// Apply the grid update
	foreach (ColumnId => Control in VisibleControls) {
		declare Boolean IsOriginalPosSaved for Control = False;
		declare Vec2 OriginalPos for Control = <0., 0.>;
		if (!IsOriginalPosSaved) { //< Saves the original position of the control indicated in the ML for the skew calculation
			OriginalPos = Control.RelativePosition_V3;
			IsOriginalPosSaved = True;
		}

		if (Grid.Pos.existskey(ColumnId)) {
			declare Real GridPos = Grid.Pos[ColumnId];
			declare Vec2 Pos = ComponentMenuLibsHelpers_SkewX(<GridPos, OriginalPos.Y>, _Skew);
			if (_GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Top || _GridConfig.Direction == ComponentMenuLibsGrid_C_Direction_Bottom) {
				Pos = ComponentMenuLibsHelpers_SkewX(<OriginalPos.X, GridPos>, _Skew);
			}
			if (_Animate) {
				AnimMgr.Flush(Control);
				AnimMgr.Add(Control, "<anim pos=\""^Pos.X^" "^Pos.Y^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
			} else {
				Control.RelativePosition_V3 = Pos;
			}
		}
	}

	return Grid;
}
ComponentMenuLibsGrid_K_Grid ComponentMenuLibsGrid_Update(ComponentMenuLibsGrid_K_GridConfig _GridConfig, CMlFrame _Container, Boolean _LockGridSize, Boolean _Animate) {
	return ComponentMenuLibsGrid_Update(_GridConfig, _Container, 0., _LockGridSize, _Animate);
}

// */
// @Component end component-menulibs-grid

// @Component start component-tmnext-pop-up-background-2
// /*

declare TMNextPopUpBackground2_K_Properties[Text] TMNextPopUpBackground2_G_Styles;
declare TMNextPopUpBackground2_K_Properties TMNextPopUpBackground2_G_DefaultProperties;

// Check if the control is a pop-up background
Boolean TMNextPopUpBackground2_IsPopUpBackground(CMlControl _Control) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Control;
	return TMNextPopUpBackground2_State.IsPopUpBackground;
}

// Enable or disable a properties from the `Enabled` array
Integer[] TMNextPopUpBackground2_Private_EnableProperty(Integer[] _EnabledProperties, Integer _Property, Boolean _Enabled) {
	declare Integer[] EnabledProperties = _EnabledProperties;

	if (_Enabled) {
		if (!EnabledProperties.exists(_Property)) {
			EnabledProperties.add(_Property);
		}
	} else {
		EnabledProperties.remove(_Property);
	}

	return EnabledProperties;
}

// Set and enable a property
TMNextPopUpBackground2_K_Properties TMNextPopUpBackground2_Private_SetProperty(TMNextPopUpBackground2_K_Properties _TargetProperties, Integer _PropertyId, TMNextPopUpBackground2_K_Properties _SourceProperties) {
	declare TMNextPopUpBackground2_K_Properties Properties = _TargetProperties;

	Properties.Enabled = TMNextPopUpBackground2_Private_EnableProperty(Properties.Enabled, _PropertyId, True);

	switch (_PropertyId) {
		case TMNextPopUpBackground2_C_Property_Position: Properties.Position = _SourceProperties.Position;
		case TMNextPopUpBackground2_C_Property_Width: Properties.Width = _SourceProperties.Width;
		case TMNextPopUpBackground2_C_Property_HAlign: Properties.HAlign = _SourceProperties.HAlign;
		case TMNextPopUpBackground2_C_Property_VAlign: Properties.VAlign = _SourceProperties.VAlign;
		case TMNextPopUpBackground2_C_Property_HeaderImageUrl: Properties.HeaderImageUrl = _SourceProperties.HeaderImageUrl;
		case TMNextPopUpBackground2_C_Property_DimmerOpacity: Properties.DimmerOpacity = _SourceProperties.DimmerOpacity;
		case TMNextPopUpBackground2_C_Property_DimmerColor: Properties.DimmerColor = _SourceProperties.DimmerColor;
		case TMNextPopUpBackground2_C_Property_DimmerSendCloseEvent: Properties.DimmerSendCloseEvent = _SourceProperties.DimmerSendCloseEvent;
		case TMNextPopUpBackground2_C_Property_ButtonLeaveEnable: Properties.ButtonLeaveEnable = _SourceProperties.ButtonLeaveEnable;
		case TMNextPopUpBackground2_C_Property_HeaderGradientVisible: Properties.HeaderGradientVisible = _SourceProperties.HeaderGradientVisible;
	}

	return Properties;
}

// Merge a base properties with other enabled properties
TMNextPopUpBackground2_K_Properties TMNextPopUpBackground2_Private_MergeProperties(TMNextPopUpBackground2_K_Properties _Base, TMNextPopUpBackground2_K_Properties[] _PropertiesToMerge) {
	declare TMNextPopUpBackground2_K_Properties MergedProperties = _Base;

	foreach (Properties in _PropertiesToMerge) {
		foreach (PropertyId in Properties.Enabled) {
			MergedProperties = TMNextPopUpBackground2_Private_SetProperty(MergedProperties, PropertyId, Properties);
		}
	}

	return MergedProperties;
}

// Redraw the pop-up background (apply style, width, ...)
Void TMNextPopUpBackground2_RedrawPopUpBackground(CMlFrame _Frame_PopUpBackground) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;

	declare TMNextPopUpBackground2_K_Properties[] PropertiesToMerge = [TMNextPopUpBackground2_G_DefaultProperties];
	foreach (Style in TMNextPopUpBackground2_State.Styles) {
		PropertiesToMerge.add(TMNextPopUpBackground2_G_Styles.get(Style, TMNextPopUpBackground2_K_Properties {}));
	}
	PropertiesToMerge.add(TMNextPopUpBackground2_State.CustomizedProperties);

	TMNextPopUpBackground2_State.MergedProperties = TMNextPopUpBackground2_Private_MergeProperties(
		TMNextPopUpBackground2_C_DefaultProperties,
		PropertiesToMerge
	);

	// Get pop-up variables depending on predefined styles
	declare Text Img_Background = "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Common_MainPopup.dds";
	declare Vec2 Size_Background = TMNextPopUpBackground2_C_ImgSize_MainPopUp_Background;
	declare Vec2 Size_Header = TMNextPopUpBackground2_C_ImgSize_MainPopUp_HeaderMask;
	if (TMNextPopUpBackground2_State.Styles.exists("secondary-pop-up-with-header")) {
		Img_Background = "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Common_SecondaryPopup_WithHeader.dds";
		Size_Background = TMNextPopUpBackground2_C_ImgSize_SecondaryPopUp_Background;
		Size_Header = TMNextPopUpBackground2_C_ImgSize_SecondaryPopUp_Header;
	} else if (TMNextPopUpBackground2_State.Styles.exists("secondary-pop-up-no-header")) {
		Img_Background = "file://Media/Manialinks/Nadeo/TMNext/Menus/PopUp/Common_SecondaryPopup_NoHeader.dds";
		Size_Background = TMNextPopUpBackground2_C_ImgSize_SecondaryPopUp_Background;
		Size_Header = TMNextPopUpBackground2_C_ImgSize_SecondaryPopUp_Header;
	}

	// Update pop-up background image
	TMNextPopUpBackground2_State.Controls.Quad_Background.ImageUrl = Img_Background;

	// Update pop-up size
	TMNextPopUpBackground2_State.Controls.Quad_Background.Size = <
		TMNextPopUpBackground2_State.MergedProperties.Width,
		TMNextPopUpBackground2_State.MergedProperties.Width * Size_Background.Y / Size_Background.X
	>;
	declare Real SizeX_PopUpHeader = TMNextPopUpBackground2_State.Controls.Quad_Background.Size.X * Size_Header.X / Size_Background.X;
	// The + 0.1 is for an alignment problem between the mask header and the background pop-up (https://gitlab.nadeo.org/trackmania-next/tmnext/-/merge_requests/4427#note_187413)
	TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size = <
		SizeX_PopUpHeader + 0.1,
		SizeX_PopUpHeader * Size_Header.Y / Size_Header.X
	>;
	TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.RelativePosition_V3 = <
		TMNextPopUpBackground2_State.Controls.Quad_Background.Size.X,
		0.
	>;
	// Update background hitbox
	TMNextPopUpBackground2_State.Controls.Quad_BackgroundHitbox.RelativePosition_V3.X = TMNextPopUpBackground2_State.Controls.Quad_Background.Size.X;
	declare Real SkewAngle = TMNextPopUpBackground2_ML::DegToRad(TMNextPopUpBackground2_State.Controls.Quad_BackgroundHitbox.RelativeRotation);
	declare Real SkewHeight = 0.;
	if (TMNextPopUpBackground2_ML::Cos(SkewAngle) != 0.) SkewHeight = TMNextPopUpBackground2_State.Controls.Quad_Background.Size.Y / TMNextPopUpBackground2_ML::Cos(SkewAngle);
	declare Real SkewWidth = TMNextPopUpBackground2_State.Controls.Quad_Background.Size.X - (SkewHeight * TMNextPopUpBackground2_ML::Sin(SkewAngle));
	TMNextPopUpBackground2_State.Controls.Quad_BackgroundHitbox.Size = <
		SkewWidth * TMNextPopUpBackground2_ML::Cos(SkewAngle),
		(TMNextPopUpBackground2_State.Controls.Quad_Background.Size.X * TMNextPopUpBackground2_ML::Sin(SkewAngle)) + SkewHeight
	>;
	TMNextPopUpBackground2_State.Controls.Frame_BackgroundHitbox.Size = TMNextPopUpBackground2_State.Controls.Quad_Background.Size;

	// Update area size and position
	declare Real HeaderGap = TMNextPopUpBackground2_State.Controls.Quad_Background.Size.Y * TMNextPopUpBackground2_C_SizeY_Common_HeaderGap / Size_Background.Y; //< Small gap between the header and the content area
	TMNextPopUpBackground2_State.HeaderArea.Size = <
		TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.X - (TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.Y * TMNextPopUpBackground2_ML::Tan(SkewAngle) * 2),
		TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.Y
	>;
	TMNextPopUpBackground2_State.HeaderArea.Position = <
		TMNextPopUpBackground2_State.Controls.Quad_Background.Size.Y * TMNextPopUpBackground2_ML::Tan(SkewAngle),
		0.
	>;
	TMNextPopUpBackground2_State.ContentArea.Size = <
		(TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.X + (TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.Y * TMNextPopUpBackground2_ML::Tan(SkewAngle))) - ((TMNextPopUpBackground2_State.Controls.Quad_Background.Size.Y - TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.Y) * TMNextPopUpBackground2_ML::Tan(SkewAngle) * 2),
		TMNextPopUpBackground2_State.Controls.Quad_Background.Size.Y - HeaderGap - TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.Y
	>;
	TMNextPopUpBackground2_State.ContentArea.Position = <
		(TMNextPopUpBackground2_State.Controls.Quad_Background.Size.Y - TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.Y) * TMNextPopUpBackground2_ML::Tan(SkewAngle),
		-TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Size.Y - HeaderGap
	>;

	// Update pop-up position
	TMNextPopUpBackground2_State.Controls.Frame_Background.RelativePosition_V3 = TMNextPopUpBackground2_State.MergedProperties.Position;

	// Update pop-up alignment
	declare Vec2 AlignPosition = ComponentMenuLibsTools_GetAlignPosition(TMNextPopUpBackground2_State.Controls.Quad_Background.Size, TMNextPopUpBackground2_State.MergedProperties.HAlign, TMNextPopUpBackground2_State.MergedProperties.VAlign);
	TMNextPopUpBackground2_State.Controls.Frame_Align.RelativePosition_V3 = AlignPosition;
	TMNextPopUpBackground2_State.HeaderArea.Position += AlignPosition;
	TMNextPopUpBackground2_State.ContentArea.Position += AlignPosition;

	// Update header
	if (TMNextPopUpBackground2_State.MergedProperties.HeaderImageUrl == "") {
		TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Visible = False;
	} else {
		TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.ImageUrl = TMNextPopUpBackground2_State.MergedProperties.HeaderImageUrl;
		TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.Visible = True;
	}

	// Update header gradient
	TMNextPopUpBackground2_State.Controls.Quad_HeaderGradient.Visible = TMNextPopUpBackground2_State.MergedProperties.HeaderGradientVisible;
	if (TMNextPopUpBackground2_State.Controls.Quad_HeaderGradient.Visible) {
		TMNextPopUpBackground2_State.Controls.Quad_HeaderGradient.RelativePosition_V3 = TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.RelativePosition_V3;
		TMNextPopUpBackground2_State.Controls.Quad_HeaderGradient.Size = <
			SizeX_PopUpHeader + 0.1,
			SizeX_PopUpHeader * TMNextPopUpBackground2_C_ImgSize_MainPopUp_HeaderMask.Y / TMNextPopUpBackground2_C_ImgSize_MainPopUp_HeaderMask.X
		>;
	}

	// Update dimmer
	TMNextPopUpBackground2_State.Controls.Quad_Dimmer.BgColor = TMNextPopUpBackground2_State.MergedProperties.DimmerColor;
	TMNextPopUpBackground2_State.Controls.Quad_Dimmer.Opacity = TMNextPopUpBackground2_State.MergedProperties.DimmerOpacity;

	// Update leave button
	TMNextPopUpBackground2_State.Controls.Button_Leave.Visible = TMNextPopUpBackground2_State.MergedProperties.ButtonLeaveEnable;
	if (TMNextPopUpBackground2_State.Controls.Button_Leave.Visible) {
		TMNextPopUpBackground2_State.Controls.Button_Leave.RelativePosition_V3.X = TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.RelativePosition_V3.X - 6.;
		TMNextPopUpBackground2_State.Controls.Button_Leave.RelativePosition_V3.Y = TMNextPopUpBackground2_State.Controls.Quad_HeaderImage.RelativePosition_V3.Y - 5.;
	}
}

// Redraw all pop-up backgrounds
Void TMNextPopUpBackground2_RedrawPopUpBackgrounds() {
	Page.GetClassChildren("TMNextPopUpBackground2_pop-up-background", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlFrame Frame_PopUpBackground = (Control as CMlFrame).Parent;
		if (TMNextPopUpBackground2_IsPopUpBackground(Frame_PopUpBackground)) {
			TMNextPopUpBackground2_RedrawPopUpBackground(Frame_PopUpBackground);
		}
	}
}

// Customize a property
Void TMNextPopUpBackground2_Private_SetCustomizedProperty(CMlFrame _Frame_PopUpBackground, Integer _PropertyId, TMNextPopUpBackground2_K_Properties _Properties, Boolean _Redraw) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	TMNextPopUpBackground2_State.CustomizedProperties = TMNextPopUpBackground2_Private_SetProperty(TMNextPopUpBackground2_State.CustomizedProperties, _PropertyId, _Properties);
	if (_Redraw) TMNextPopUpBackground2_RedrawPopUpBackground(_Frame_PopUpBackground);
}

// Reset a customized property
Void TMNextPopUpBackground2_Private_ResetCustomizedProperty(CMlFrame _Frame_PopUpBackground, Integer _PropertyId, Boolean _Redraw) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	TMNextPopUpBackground2_State.CustomizedProperties.Enabled = TMNextPopUpBackground2_Private_EnableProperty(TMNextPopUpBackground2_State.CustomizedProperties.Enabled, _PropertyId, False);
	if (_Redraw) TMNextPopUpBackground2_RedrawPopUpBackground(_Frame_PopUpBackground);
}

// Update the position of the pop-up background
Void TMNextPopUpBackground2_SetPosition(CMlFrame _Frame_PopUpBackground, Vec2 _Position, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_Position, TMNextPopUpBackground2_K_Properties { Position = _Position }, _Redraw);
}
Void TMNextPopUpBackground2_SetPosition(CMlFrame _Frame_PopUpBackground, Vec2 _Position) {
	TMNextPopUpBackground2_SetPosition(_Frame_PopUpBackground, _Position, True);
}
Void TMNextPopUpBackground2_ResetPosition(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_Position, _Redraw);
}
Void TMNextPopUpBackground2_ResetPosition(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetPosition(_Frame_PopUpBackground, True);
}

// Update the width of the pop-up background
Void TMNextPopUpBackground2_SetWidth(CMlFrame _Frame_PopUpBackground, Real _Width, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_Width, TMNextPopUpBackground2_K_Properties { Width = _Width }, _Redraw);
}
Void TMNextPopUpBackground2_SetWidth(CMlFrame _Frame_PopUpBackground, Real _Width) {
	TMNextPopUpBackground2_SetWidth(_Frame_PopUpBackground, _Width, True);
}
Void TMNextPopUpBackground2_ResetWidth(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_Width, _Redraw);
}
Void TMNextPopUpBackground2_ResetWidth(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetWidth(_Frame_PopUpBackground, True);
}

// Update the horizontal alignment of the pop-up background
Void TMNextPopUpBackground2_SetHAlign(CMlFrame _Frame_PopUpBackground, CMlControl::AlignHorizontal _HAlign, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_HAlign, TMNextPopUpBackground2_K_Properties { HAlign = _HAlign }, _Redraw);
}
Void TMNextPopUpBackground2_SetHAlign(CMlFrame _Frame_PopUpBackground, CMlControl::AlignHorizontal _HAlign) {
	TMNextPopUpBackground2_SetHAlign(_Frame_PopUpBackground, _HAlign, True);
}
Void TMNextPopUpBackground2_ResetHAlign(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_HAlign, _Redraw);
}
Void TMNextPopUpBackground2_ResetHAlign(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetHAlign(_Frame_PopUpBackground, True);
}

// Update the vertical alignment of the pop-up background
Void TMNextPopUpBackground2_SetVAlign(CMlFrame _Frame_PopUpBackground, CMlControl::AlignVertical _VAlign, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_VAlign, TMNextPopUpBackground2_K_Properties { VAlign = _VAlign }, _Redraw);
}
Void TMNextPopUpBackground2_SetVAlign(CMlFrame _Frame_PopUpBackground, CMlControl::AlignVertical _VAlign) {
	TMNextPopUpBackground2_SetVAlign(_Frame_PopUpBackground, _VAlign, True);
}
Void TMNextPopUpBackground2_ResetVAlign(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_VAlign, _Redraw);
}
Void TMNextPopUpBackground2_ResetVAlign(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetVAlign(_Frame_PopUpBackground, True);
}

// Update the header image url
Void TMNextPopUpBackground2_SetHeaderImageUrl(CMlFrame _Frame_PopUpBackground, Text _HeaderImageUrl, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_HeaderImageUrl, TMNextPopUpBackground2_K_Properties { HeaderImageUrl = _HeaderImageUrl }, _Redraw);
}
Void TMNextPopUpBackground2_SetHeaderImageUrl(CMlFrame _Frame_PopUpBackground, Text _HeaderImageUrl) {
	TMNextPopUpBackground2_SetHeaderImageUrl(_Frame_PopUpBackground, _HeaderImageUrl, True);
}
Void TMNextPopUpBackground2_ResetHeaderImageUrl(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_HeaderImageUrl, _Redraw);
}
Void TMNextPopUpBackground2_ResetHeaderImageUrl(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetHeaderImageUrl(_Frame_PopUpBackground, True);
}

// Update the opacity of the dimmer
Void TMNextPopUpBackground2_SetDimmerOpacity(CMlFrame _Frame_PopUpBackground, Real _Opacity, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_DimmerOpacity, TMNextPopUpBackground2_K_Properties { DimmerOpacity = _Opacity }, _Redraw);
}
Void TMNextPopUpBackground2_SetDimmerOpacity(CMlFrame _Frame_PopUpBackground, Real _Opacity) {
	TMNextPopUpBackground2_SetDimmerOpacity(_Frame_PopUpBackground, _Opacity, True);
}
Void TMNextPopUpBackground2_ResetDimmerOpacity(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_DimmerOpacity, _Redraw);
}
Void TMNextPopUpBackground2_ResetDimmerOpacity(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetDimmerOpacity(_Frame_PopUpBackground, True);
}

// Update the color of the dimmer
Void TMNextPopUpBackground2_SetDimmerColor(CMlFrame _Frame_PopUpBackground, Vec3 _Color, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_DimmerColor, TMNextPopUpBackground2_K_Properties { DimmerColor = _Color }, _Redraw);
}
Void TMNextPopUpBackground2_SetDimmerColor(CMlFrame _Frame_PopUpBackground, Vec3 _Color) {
	TMNextPopUpBackground2_SetDimmerColor(_Frame_PopUpBackground, _Color, True);
}
Void TMNextPopUpBackground2_SetDimmerColor(CMlFrame _Frame_PopUpBackground, Text _Color, Boolean _Redraw) {
	TMNextPopUpBackground2_SetDimmerColor(_Frame_PopUpBackground, TMNextPopUpBackground2_CL::HexToRgb(_Color), _Redraw);
}
Void TMNextPopUpBackground2_SetDimmerColor(CMlFrame _Frame_PopUpBackground, Text _Color) {
	TMNextPopUpBackground2_SetDimmerColor(_Frame_PopUpBackground, TMNextPopUpBackground2_CL::HexToRgb(_Color));
}
Void TMNextPopUpBackground2_ResetDimmerColor(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_DimmerColor, _Redraw);
}
Void TMNextPopUpBackground2_ResetDimmerColor(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetDimmerColor(_Frame_PopUpBackground, True);
}

// Send a close event when clicking on the dimmer
Void TMNextPopUpBackground2_SetDimmerSendCloseEvent(CMlFrame _Frame_PopUpBackground, Boolean _Enabled, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_DimmerSendCloseEvent, TMNextPopUpBackground2_K_Properties { DimmerSendCloseEvent = _Enabled }, _Redraw);
}
Void TMNextPopUpBackground2_SetDimmerSendCloseEvent(CMlFrame _Frame_PopUpBackground, Boolean _Enabled) {
	TMNextPopUpBackground2_SetDimmerSendCloseEvent(_Frame_PopUpBackground, _Enabled, True);
}
Void TMNextPopUpBackground2_ResetDimmerSendCloseEvent(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_DimmerSendCloseEvent, _Redraw);
}
Void TMNextPopUpBackground2_ResetDimmerSendCloseEvent(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetDimmerSendCloseEvent(_Frame_PopUpBackground, True);
}

// Display the cross button and send a close event when clicking on it
Void TMNextPopUpBackground2_SetButtonLeaveEnable(CMlFrame _Frame_PopUpBackground, Boolean _Enabled, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_ButtonLeaveEnable, TMNextPopUpBackground2_K_Properties { ButtonLeaveEnable = _Enabled }, _Redraw);
}
Void TMNextPopUpBackground2_SetButtonLeaveEnable(CMlFrame _Frame_PopUpBackground, Boolean _Enabled) {
	TMNextPopUpBackground2_SetButtonLeaveEnable(_Frame_PopUpBackground, _Enabled, True);
}
Void TMNextPopUpBackground2_ResetButtonLeaveEnable(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_ButtonLeaveEnable, _Redraw);
}
Void TMNextPopUpBackground2_ResetButtonLeaveEnable(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetButtonLeaveEnable(_Frame_PopUpBackground, True);
}


// Display a gradient on top of the header image
Void TMNextPopUpBackground2_SetHeaderGradientVisible(CMlFrame _Frame_PopUpBackground, Boolean _IsVisible, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_SetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_HeaderGradientVisible, TMNextPopUpBackground2_K_Properties { HeaderGradientVisible = _IsVisible }, _Redraw);
}
Void TMNextPopUpBackground2_SetHeaderGradientVisible(CMlFrame _Frame_PopUpBackground, Boolean _IsVisible) {
	TMNextPopUpBackground2_SetHeaderGradientVisible(_Frame_PopUpBackground, _IsVisible, True);
}
Void TMNextPopUpBackground2_ResetHeaderGradientVisible(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_Private_ResetCustomizedProperty(_Frame_PopUpBackground, TMNextPopUpBackground2_C_Property_HeaderGradientVisible, _Redraw);
}
Void TMNextPopUpBackground2_ResetHeaderGradientVisible(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_ResetHeaderGradientVisible(_Frame_PopUpBackground, True);
}

// Update the styles of the pop-up background
Void TMNextPopUpBackground2_SetStyles(CMlFrame _Frame_PopUpBackground, Text[] _StyleIds, Boolean _Redraw) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	TMNextPopUpBackground2_State.Styles = _StyleIds;
	if (_Redraw) TMNextPopUpBackground2_RedrawPopUpBackground(_Frame_PopUpBackground);
}
Void TMNextPopUpBackground2_SetStyles(CMlFrame _Frame_PopUpBackground, Text[] _StyleIds) {
	TMNextPopUpBackground2_SetStyles(_Frame_PopUpBackground, _StyleIds, True);
}
Void TMNextPopUpBackground2_ResetStyles(CMlFrame _Frame_PopUpBackground, Boolean _Redraw) {
	TMNextPopUpBackground2_SetStyles(_Frame_PopUpBackground, [], _Redraw);
}
Void TMNextPopUpBackground2_ResetStyles(CMlFrame _Frame_PopUpBackground) {
	TMNextPopUpBackground2_SetStyles(_Frame_PopUpBackground, []);
}
Void TMNextPopUpBackground2_AddStyle(CMlFrame _Frame_PopUpBackground, Text _StyleId, Boolean _Redraw) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	if (!TMNextPopUpBackground2_State.Styles.exists(_StyleId)) {
		TMNextPopUpBackground2_State.Styles.add(_StyleId);
	}
	if (_Redraw) TMNextPopUpBackground2_RedrawPopUpBackground(_Frame_PopUpBackground);
}
Void TMNextPopUpBackground2_AddStyle(CMlFrame _Frame_PopUpBackground, Text _StyleId) {
	TMNextPopUpBackground2_AddStyle(_Frame_PopUpBackground, _StyleId, True);
}
Void TMNextPopUpBackground2_RemoveStyle(CMlFrame _Frame_PopUpBackground, Text _StyleId, Boolean _Redraw) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	TMNextPopUpBackground2_State.Styles.remove(_StyleId);
	if (_Redraw) TMNextPopUpBackground2_RedrawPopUpBackground(_Frame_PopUpBackground);
}
Void TMNextPopUpBackground2_RemoveStyle(CMlFrame _Frame_PopUpBackground, Text _StyleId) {
	TMNextPopUpBackground2_RemoveStyle(_Frame_PopUpBackground, _StyleId, True);
}

// Set the default properties of all pop-up background
Void TMNextPopUpBackground2_SetPopUpBackgroundsDefaultProperties(TMNextPopUpBackground2_K_Properties _DefaultProperties, Boolean _Redraw) {
	TMNextPopUpBackground2_G_DefaultProperties = _DefaultProperties;
	if (_Redraw) TMNextPopUpBackground2_RedrawPopUpBackgrounds();
}
Void TMNextPopUpBackground2_SetPopUpBackgroundsDefaultProperties(TMNextPopUpBackground2_K_Properties _DefaultProperties) {
	TMNextPopUpBackground2_SetPopUpBackgroundsDefaultProperties(_DefaultProperties, True);
}

// Create a new pop-up background style
Void TMNextPopUpBackground2_CreateStyle(Text _StyleId, TMNextPopUpBackground2_K_Properties _Style) {
	TMNextPopUpBackground2_G_Styles[_StyleId] = _Style;
}

// Initialize a pop-up background
Void TMNextPopUpBackground2_InitializePopUpBackground(CMlFrame _Frame_PopUpBackground) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	TMNextPopUpBackground2_State = TMNextPopUpBackground2_K_State {};

	TMNextPopUpBackground2_State.IsPopUpBackground = True;

	declare CMlFrame Frame_Background <=> (_Frame_PopUpBackground.GetFirstChild("TMNextPopUpBackground2_frame-background") as CMlFrame);
	declare CMlFrame Frame_Align <=> (Frame_Background.GetFirstChild("TMNextPopUpBackground2_frame-align") as CMlFrame);
	declare CMlFrame Frame_BackgroundHitbox <=> (Frame_Align.GetFirstChild("TMNextPopUpBackground2_frame-background-hitbox") as CMlFrame);
	TMNextPopUpBackground2_State.Controls = TMNextPopUpBackground2_K_Controls {
		Quad_Dimmer = (_Frame_PopUpBackground.GetFirstChild("TMNextPopUpBackground2_quad-dimmer") as CMlQuad),
		Frame_Background = Frame_Background,
		Frame_Align = Frame_Align,
		Quad_Background = (Frame_Align.GetFirstChild("TMNextPopUpBackground2_quad-background") as CMlQuad),
		Quad_HeaderImage = (Frame_Align.GetFirstChild("TMNextPopUpBackground2_quad-header-image") as CMlQuad),
		Quad_HeaderGradient = (Frame_Align.GetFirstChild("TMNextPopUpBackground2_quad-header-gradient") as CMlQuad),
		Frame_BackgroundHitbox = Frame_BackgroundHitbox,
		Quad_BackgroundHitbox = (Frame_BackgroundHitbox.GetFirstChild("TMNextPopUpBackground2_quad-background-hitbox") as CMlQuad),
		Button_Leave = (Frame_Align.GetFirstChild("TMNextPopUpBackground2_button-leave") as CMlQuad)
	};

	TMNextPopUpBackground2_State.CustomizedProperties = TMNextPopUpBackground2_K_Properties {};
	TMNextPopUpBackground2_State.MergedProperties = TMNextPopUpBackground2_K_Properties {};
	TMNextPopUpBackground2_State.Styles = [];

	declare CMlFrame TMNextPopUpBackground2_PopUpBackground as TMNextPopUpBackground2_PopUpBackground_Dimmer for TMNextPopUpBackground2_State.Controls.Quad_Dimmer;
	TMNextPopUpBackground2_PopUpBackground_Dimmer = _Frame_PopUpBackground;
	declare CMlFrame TMNextPopUpBackground2_PopUpBackground as TMNextPopUpBackground2_PopUpBackground_ButtonLeave for TMNextPopUpBackground2_State.Controls.Button_Leave;
	TMNextPopUpBackground2_PopUpBackground_ButtonLeave = _Frame_PopUpBackground;

	if (_Frame_PopUpBackground.DataAttributeExists("pos")) {
		TMNextPopUpBackground2_SetPosition(_Frame_PopUpBackground, ComponentMenuLibsTools_TextToVec2(_Frame_PopUpBackground.DataAttributeGet("pos")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("width")) {
		TMNextPopUpBackground2_SetWidth(_Frame_PopUpBackground, TMNextPopUpBackground2_TL::ToReal(_Frame_PopUpBackground.DataAttributeGet("width")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("halign")) {
		TMNextPopUpBackground2_SetHAlign(_Frame_PopUpBackground, ComponentMenuLibsTools_TextToHAlign2(_Frame_PopUpBackground.DataAttributeGet("halign")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("valign")) {
		TMNextPopUpBackground2_SetVAlign(_Frame_PopUpBackground, ComponentMenuLibsTools_TextToVAlign2(_Frame_PopUpBackground.DataAttributeGet("valign")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("header-image")) {
		TMNextPopUpBackground2_SetHeaderImageUrl(_Frame_PopUpBackground, _Frame_PopUpBackground.DataAttributeGet("header-image"), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("dimmer-opacity")) {
		TMNextPopUpBackground2_SetDimmerOpacity(_Frame_PopUpBackground, TMNextPopUpBackground2_TL::ToReal(_Frame_PopUpBackground.DataAttributeGet("dimmer-opacity")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("dimmer-color")) {
		TMNextPopUpBackground2_SetDimmerColor(_Frame_PopUpBackground, _Frame_PopUpBackground.DataAttributeGet("dimmer-color"), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("dimmer-send-close-event")) {
		TMNextPopUpBackground2_SetDimmerSendCloseEvent(_Frame_PopUpBackground, ComponentMenuLibsTools_TextToBoolean(_Frame_PopUpBackground.DataAttributeGet("dimmer-send-close-event")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("button-leave-enabled")) {
		TMNextPopUpBackground2_SetButtonLeaveEnable(_Frame_PopUpBackground, ComponentMenuLibsTools_TextToBoolean(_Frame_PopUpBackground.DataAttributeGet("button-leave-enabled")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("header-gradient-visible")) {
		TMNextPopUpBackground2_SetHeaderGradientVisible(_Frame_PopUpBackground, ComponentMenuLibsTools_TextToBoolean(_Frame_PopUpBackground.DataAttributeGet("header-gradient-visible")), False);
	}
	if (_Frame_PopUpBackground.DataAttributeExists("styles")) {
		TMNextPopUpBackground2_SetStyles(_Frame_PopUpBackground, TMNextPopUpBackground2_TL::Split(" ", TMNextPopUpBackground2_TL::Trim(_Frame_PopUpBackground.DataAttributeGet("styles"))), False);
	}

	TMNextPopUpBackground2_RedrawPopUpBackground(_Frame_PopUpBackground);
}

// Initialize all pop-up backgrounds in the manialink
Void TMNextPopUpBackground2_InitializePopUpBackgrounds() {
	Page.GetClassChildren("TMNextPopUpBackground2_pop-up-background", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		TMNextPopUpBackground2_InitializePopUpBackground((Control as CMlFrame).Parent);
	}
}

// Get the size of the usable header area
Vec2 TMNextPopUpBackground2_GetHeaderAreaSize(CMlFrame _Frame_PopUpBackground) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	return TMNextPopUpBackground2_State.HeaderArea.Size;
}

// Get the size of the usable content area
Vec2 TMNextPopUpBackground2_GetContentAreaSize(CMlFrame _Frame_PopUpBackground) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	return TMNextPopUpBackground2_State.ContentArea.Size;
}

// Get the position of the usable header area
Vec2 TMNextPopUpBackground2_GetHeaderAreaPosition(CMlFrame _Frame_PopUpBackground) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	return TMNextPopUpBackground2_State.HeaderArea.Position;
}

// Get the position of the usable content area
Vec2 TMNextPopUpBackground2_GetContentAreaPosition(CMlFrame _Frame_PopUpBackground) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	return TMNextPopUpBackground2_State.ContentArea.Position;
}

// Get the width of the background
Real TMNextPopUpBackground2_GetBackgroundWidth(CMlFrame _Frame_PopUpBackground) {
	declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for _Frame_PopUpBackground;
	return TMNextPopUpBackground2_State.Controls.Quad_Background.Size.X - (TMNextPopUpBackground2_State.Controls.Quad_Background.Size.Y * TMNextPopUpBackground2_ML::Tan(TMNextPopUpBackground2_ML::DegToRad(TMNextPopUpBackground2_State.Controls.Quad_BackgroundHitbox.RelativeRotation)));
}

***MainInit***
***
declare TMNextPopUpBackground2_K_Event[] TMNextPopUpBackground2_PendingEvents;

// Style of the main pop-up
TMNextPopUpBackground2_CreateStyle("main-pop-up", TMNextPopUpBackground2_K_Properties {
	Enabled = [TMNextPopUpBackground2_C_Property_Width],
	Width = 308.
});

// Style of the secondary pop-up
TMNextPopUpBackground2_CreateStyle("secondary-pop-up-no-header", TMNextPopUpBackground2_K_Properties {
	Enabled = [TMNextPopUpBackground2_C_Property_Width],
	Width = 166.
});

// Style of the secondary pop-up
TMNextPopUpBackground2_CreateStyle("secondary-pop-up-with-header", TMNextPopUpBackground2_K_Properties {
	Enabled = [TMNextPopUpBackground2_C_Property_Width],
	Width = 166.
});
***

***MainStart***
***
TMNextPopUpBackground2_InitializePopUpBackgrounds();
***

***MainLoop***
***
TMNextPopUpBackground2_PendingEvents = [];

foreach (Event in PendingEvents) {
	switch (Event.Type) {
		case CMlScriptEvent::Type::MouseOver: {
			if (Event.ControlId == "TMNextPopUpBackground2_button-leave") {
				AnimMgr.Add(Event.Control, "<anim scale=\"1.2\"/>", 100, CAnimManager::EAnimManagerEasing::Linear);
			}
		}
		case CMlScriptEvent::Type::MouseOut: {
			if (Event.ControlId == "TMNextPopUpBackground2_button-leave") {
				AnimMgr.Add(Event.Control, "<anim scale=\"1.\"/>", 100, CAnimManager::EAnimManagerEasing::Linear);
			}
		}
		case CMlScriptEvent::Type::MouseClick: {
			if (Event.Control != Null && (Event.ControlId == "TMNextPopUpBackground2_quad-dimmer" || Event.ControlId == "TMNextPopUpBackground2_button-leave")) {
				declare CMlFrame TMNextPopUpBackground2_PopUpBackground for Event.Control;
				if (TMNextPopUpBackground2_PopUpBackground != Null) {
					declare TMNextPopUpBackground2_K_State TMNextPopUpBackground2_State for TMNextPopUpBackground2_PopUpBackground;
					if (
						(Event.ControlId == "TMNextPopUpBackground2_quad-dimmer" && TMNextPopUpBackground2_State.MergedProperties.DimmerSendCloseEvent) ||
						(Event.ControlId == "TMNextPopUpBackground2_button-leave" && TMNextPopUpBackground2_State.MergedProperties.ButtonLeaveEnable)
					) {
						TMNextPopUpBackground2_PendingEvents.add(TMNextPopUpBackground2_K_Event {
							Type = TMNextPopUpBackground2_C_EventType_Close,
							PopUpBackground = TMNextPopUpBackground2_PopUpBackground
						});
						if (Event.ControlId == "TMNextPopUpBackground2_button-leave") Event.Control.RelativeScale = 1.;
					}
				}
			}
		}
	}
}
***

// */
// @Component end component-tmnext-pop-up-background-2

// @Component start component-textfield
// /*

declare CMlFrame[] ComponentTextField_G_TextFields;
declare CMlControl ComponentTextField_G_FocusedTextField;
declare Boolean ComponentTextField_G_IsTextFieldFocused;
declare ComponentTextField_K_TextFieldEvent[] ComponentTextField_PendingEvents;
declare ComponentTextField_K_TextFieldEvent[] ComponentTextField_DelayedPendingEvents;

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is selected by the Navigation component
Void ComponentTextField_Select(CMlFrame _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;

	switch (ComponentTextField_Properties.TextFieldType) {
		case ComponentTextField_C_TextFieldType_Entry: {
			declare CMlEntry Entry_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_entry-label") as CMlEntry);

			// Prepare the component for edition
			ComponentTextField_G_FocusedTextField = Entry_Label;
			if (ComponentTextField_Properties.Label.Value == "") {
				Entry_Label.TextFormat = ComponentTextField_Properties.Label.TextFormatEntry;
				Entry_Label.Value = "";
			}

			// Start edition
			// We need to send a delayed event for the TextFormat to be correctly applied
			ComponentTextField_DelayedPendingEvents.add(ComponentTextField_K_TextFieldEvent {
				Control = Entry_Label,
				TextField = _Frame_TextField,
				Type = ComponentTextField_C_EventType_StartEdition,
				Value = ComponentTextField_Properties.Label.Value
			});
		}
		case ComponentTextField_C_TextFieldType_TextEdit: {
			declare CMlTextEdit TextEdit_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_textedit-label") as CMlTextEdit);

			// Prepare the component for edition
			ComponentTextField_G_FocusedTextField = TextEdit_Label;
			if (ComponentTextField_Properties.Label.Value == "") {
				TextEdit_Label.TextFormat = ComponentTextField_Properties.Label.TextFormatTextEdit;
				TextEdit_Label.Value = "";
			}

			// Start edition
			// We need to send a delayed event for the TextFormat to be correctly applied
			ComponentTextField_DelayedPendingEvents.add(ComponentTextField_K_TextFieldEvent {
				Control = TextEdit_Label,
				TextField = _Frame_TextField,
				Type = ComponentTextField_C_EventType_StartEdition,
				Value = ComponentTextField_Properties.Label.Value
			});
		}
	}
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is focused by the Navigation component
Void ComponentTextField_Focus(CMlFrame _Frame_TextField, Boolean _Forced, Boolean _IsAnimated) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	assert(ComponentTextField_Properties.IsTextField, "Control '"^_Frame_TextField.ControlId^"' is not an entry");
	if (ComponentTextField_Properties.IsLocked) return;

	if (ComponentTextField_Properties.IsFocused == False || _Forced) {
		declare CMlFrame Button_Background <=> (_Frame_TextField.GetFirstChild("ComponentTextField_button-background") as CMlFrame);
		declare Real OpacityFocus = ComponentTextField_Properties.Background.OpacityFocus;

		switch (ComponentTextField_Properties.TextFieldType) {
			case ComponentTextField_C_TextFieldType_Entry: {
				declare CMlEntry Entry_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_entry-label") as CMlEntry);
				AnimMgr.Flush(Entry_Label);
				if (ComponentTextField_Properties.Label.Value != "") {
					if (_IsAnimated) {
						AnimMgr.Add(Entry_Label, "<anim textcolor=\""^ComponentTextField_CL::RgbToHex6(ComponentTextField_Properties.Label.ColorFocus)^"\" opacity=\""^ComponentTextField_Properties.Label.OpacityFocus^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					} else {
						Entry_Label.TextColor = ComponentTextField_Properties.Label.ColorFocus;
						Entry_Label.Opacity = ComponentTextField_Properties.Label.OpacityFocus;
					}
				} else {
					Entry_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
					Entry_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
				}
			}
			case ComponentTextField_C_TextFieldType_TextEdit: {
				declare CMlTextEdit TextEdit_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_textedit-label") as CMlTextEdit);
				AnimMgr.Flush(TextEdit_Label);
				if (ComponentTextField_Properties.Label.Value != "") {
					if (_IsAnimated) {
						AnimMgr.Add(TextEdit_Label, "<anim textcolor=\""^ComponentTextField_CL::RgbToHex6(ComponentTextField_Properties.Label.ColorFocus)^"\" opacity=\""^ComponentTextField_Properties.Label.OpacityFocus^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					} else {
						TextEdit_Label.TextColor = ComponentTextField_Properties.Label.ColorFocus;
						TextEdit_Label.Opacity = ComponentTextField_Properties.Label.OpacityFocus;
					}
				} else {
					TextEdit_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
					TextEdit_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
				}
			}
		}

		// Update focus
		ComponentTextField_Properties.IsFocused = True;
		MenuLibsExpendableButton_Focus(Button_Background, ComponentTextField_Properties.IsFocused, _IsAnimated);
	}
}
Void ComponentTextField_Focus(CMlFrame _Frame_TextField, Boolean _Forced) {
	ComponentTextField_Focus(_Frame_TextField, _Forced, True);
}
Void ComponentTextField_Focus(CMlFrame _Frame_TextField) {
	ComponentTextField_Focus(_Frame_TextField, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	The component is unfocused by the Navigation component
Void ComponentTextField_Unfocus(CMlFrame _Frame_TextField, Boolean _Forced, Boolean _IsAnimated) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	assert(ComponentTextField_Properties.IsTextField, "Control '"^_Frame_TextField.ControlId^"' is not an entry");
	if (ComponentTextField_Properties.IsLocked) return;

	if (ComponentTextField_Properties.IsFocused == True || _Forced) {
		declare CMlFrame Button_Background <=> (_Frame_TextField.GetFirstChild("ComponentTextField_button-background") as CMlFrame);
		declare Real OpacityUnfocus = ComponentTextField_Properties.Background.OpacityUnfocus;

		switch (ComponentTextField_Properties.TextFieldType) {
			case ComponentTextField_C_TextFieldType_Entry: {
				declare CMlEntry Entry_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_entry-label") as CMlEntry);
				AnimMgr.Flush(Entry_Label);
				if (ComponentTextField_Properties.Label.Value != "") {
					if (_IsAnimated) {
						AnimMgr.Add(Entry_Label, "<anim textcolor=\""^ComponentTextField_CL::RgbToHex6(ComponentTextField_Properties.Label.ColorUnfocus)^"\" opacity=\""^ComponentTextField_Properties.Label.OpacityUnfocus^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					} else {
						Entry_Label.TextColor = ComponentTextField_Properties.Label.ColorUnfocus;
						Entry_Label.Opacity = ComponentTextField_Properties.Label.OpacityUnfocus;
					}
				} else {
					Entry_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
					Entry_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
				}
			}
			case ComponentTextField_C_TextFieldType_TextEdit: {
				declare CMlTextEdit TextEdit_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_textedit-label") as CMlTextEdit);
				AnimMgr.Flush(TextEdit_Label);
				if (ComponentTextField_Properties.Label.Value != "") {
					if (_IsAnimated) {
						AnimMgr.Add(TextEdit_Label, "<anim textcolor=\""^ComponentTextField_CL::RgbToHex6(ComponentTextField_Properties.Label.ColorUnfocus)^"\" opacity=\""^ComponentTextField_Properties.Label.OpacityUnfocus^"\" />", 250, CAnimManager::EAnimManagerEasing::QuadOut);
					} else {
						TextEdit_Label.TextColor = ComponentTextField_Properties.Label.ColorUnfocus;
						TextEdit_Label.Opacity = ComponentTextField_Properties.Label.OpacityUnfocus;
					}
				} else {
					TextEdit_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
					TextEdit_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
				}
			}
		}

		// Update focus
		ComponentTextField_Properties.IsFocused = False;
		MenuLibsExpendableButton_Focus(Button_Background, ComponentTextField_Properties.IsFocused, _IsAnimated);
	}
}
Void ComponentTextField_Unfocus(CMlFrame _Frame_TextField, Boolean _Forced) {
	ComponentTextField_Unfocus(_Frame_TextField, _Forced, True);
}
Void ComponentTextField_Unfocus(CMlFrame _Frame_TextField) {
	ComponentTextField_Unfocus(_Frame_TextField, False);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Update the component
Void ComponentTextField_Private_Update() {
	declare CMlFrame Frame_TextField = ComponentTextField_G_FocusedTextField.Parent.Parent;
	declare ComponentTextField_K_Properties ComponentTextField_Properties for Frame_TextField;
	declare CMlFrame Button_Background <=> (Frame_TextField.GetFirstChild("ComponentTextField_button-background") as CMlFrame);
	declare Text ContourColor = ComponentTextField_C_Contour_FocusedColor;
	declare Real ContourOpacity = ComponentTextField_C_Contour_FocusedOpacity;

	ComponentTextField_G_IsTextFieldFocused = ComponentTextField_G_FocusedTextField.IsFocused;
	if (!ComponentTextField_G_IsTextFieldFocused) {
		ContourColor = ComponentTextField_CL::RgbToHex6(ComponentTextField_Properties.Contour.ColorFocus);
		ContourOpacity = ComponentTextField_Properties.Background.OpacityFocus;
		if (ComponentTextField_Properties.Contour.OpacityFocus != -1.) ContourOpacity = ComponentTextField_Properties.Contour.OpacityFocus;
		switchtype (ComponentTextField_G_FocusedTextField) {
			case CMlEntry: {
				declare CMlEntry Entry_Label = ComponentTextField_G_FocusedTextField as CMlEntry;
				ComponentTextField_Properties.Label.Value = Entry_Label.Value;
				if (Entry_Label.Value == "") {
					Entry_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
					Entry_Label.TextFormat = CMlEntry::ETextFormat::Basic;
					Entry_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
					Entry_Label.Value = ComponentTextField_TL::GetTranslatedText(ComponentTextField_Properties.Label.Placeholder);
				} else {
					Entry_Label.Opacity = ComponentTextField_Properties.Label.OpacityFocus;
					Entry_Label.TextColor = ComponentTextField_Properties.Label.ColorFocus;
					Entry_Label.TextFormat = ComponentTextField_Properties.Label.TextFormatEntry;
				}
			}
			case CMlTextEdit: {
				declare CMlTextEdit TextEdit_Label = ComponentTextField_G_FocusedTextField as CMlTextEdit;
				ComponentTextField_Properties.Label.Value = TextEdit_Label.Value;
				if (TextEdit_Label.Value == "") {
					TextEdit_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
					TextEdit_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
					TextEdit_Label.TextFormat = CMlTextEdit::EControlScriptEditorTextFormat::Basic;
					TextEdit_Label.Value = ComponentTextField_TL::GetTranslatedText(ComponentTextField_Properties.Label.Placeholder);
				} else {
					TextEdit_Label.Opacity = ComponentTextField_Properties.Label.OpacityFocus;
					TextEdit_Label.TextColor = ComponentTextField_Properties.Label.ColorFocus;
					TextEdit_Label.TextFormat = ComponentTextField_Properties.Label.TextFormatTextEdit;
				}
			}
		}

		ComponentTextField_PendingEvents.add(ComponentTextField_K_TextFieldEvent {
			Control = Frame_TextField,
			TextField = Frame_TextField,
			Type = ComponentTextField_C_EventType_Update,
			Value = ComponentTextField_Properties.Label.Value
		});
	}

	MenuLibsExpendableButton_SetFocusColorFocused(Button_Background, ContourColor, False);
	MenuLibsExpendableButton_SetFocusOpacityFocused(Button_Background, ContourOpacity, False);
	MenuLibsExpendableButton_RedrawButton(Button_Background);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Apply all the properties to the component
Void ComponentTextField_ApplyProperties(CMlFrame _Frame_TextField, ComponentTextField_K_Properties _Properties, Boolean _RedrawBackground) {
	declare CMlEntry Entry_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_entry-label") as CMlEntry);
	declare CMlFrame Button_Background <=> (_Frame_TextField.GetFirstChild("ComponentTextField_button-background") as CMlFrame);
	declare CMlFrame Frame_Align <=> (_Frame_TextField.GetFirstChild("ComponentTextField_frame-text-field-align") as CMlFrame);
	declare CMlQuad Quad_Activation <=> (_Frame_TextField.GetFirstChild("ComponentTextField_quad-activation") as CMlQuad);
	declare CMlTextEdit TextEdit_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_textedit-label") as CMlTextEdit);

	// Tooltip
	if (_Properties.Tooltip != "") {
		Entry_Label.ToolTip = _Properties.Tooltip;
		TextEdit_Label.ToolTip = _Properties.Tooltip;
	} else if (_Properties.Label.Placeholder != "") {
		Entry_Label.ToolTip = _Properties.Label.Placeholder;
		TextEdit_Label.ToolTip = _Properties.Label.Placeholder;
	} else {
		Entry_Label.ToolTip = "";
		TextEdit_Label.ToolTip = "";
	}

	// TextField label
	Entry_Label.Visible = _Properties.TextFieldType == ComponentTextField_C_TextFieldType_Entry;
	TextEdit_Label.Visible = _Properties.TextFieldType == ComponentTextField_C_TextFieldType_TextEdit;
	switch (_Properties.TextFieldType) {
		case ComponentTextField_C_TextFieldType_Entry: {
			Entry_Label.SetValueType(_Properties.Label.ValueType);
			Entry_Label.AutoNewLine = _Properties.Label.AutoNewLine;
			Entry_Label.MaxLine = _Properties.Label.MaxLine;
			Entry_Label.Size = <_Properties.Size.X-4*ComponentMenuLibsHelpers_SkewX(_Properties.Size.Y, _Properties.Skew), _Properties.Size.Y - 2.>;
			Entry_Label.TextSizeReal = _Properties.Label.TextSize;
			if (_Properties.Label.Value != "") {
				Entry_Label.TextFormat = _Properties.Label.TextFormatEntry;
				Entry_Label.Value = _Properties.Label.Value;
				if (_Properties.IsFocused) {
					Entry_Label.Opacity = _Properties.Label.OpacityFocus;
					Entry_Label.TextColor = _Properties.Label.ColorFocus;
				} else {
					Entry_Label.Opacity = _Properties.Label.OpacityUnfocus;
					Entry_Label.TextColor = _Properties.Label.ColorUnfocus;
				}
			} else {
				Entry_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
				Entry_Label.TextFormat = CMlEntry::ETextFormat::Basic;
				Entry_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
				Entry_Label.Value = ComponentTextField_TL::GetTranslatedText(_Properties.Label.Placeholder);
			}
		}
		case ComponentTextField_C_TextFieldType_TextEdit: {
			TextEdit_Label.AutoNewLine = _Properties.Label.AutoNewLine;
			TextEdit_Label.MaxLine = _Properties.Label.MaxLine;
			TextEdit_Label.Size = <_Properties.Size.X-4*ComponentMenuLibsHelpers_SkewX(_Properties.Size.Y, _Properties.Skew), _Properties.Size.Y - 2.>;
			TextEdit_Label.TextSizeReal = _Properties.Label.TextSize;
			if (_Properties.Label.Value != "") {
				TextEdit_Label.TextFormat = _Properties.Label.TextFormatTextEdit;
				TextEdit_Label.Value = _Properties.Label.Value;
				if (_Properties.IsFocused) {
					TextEdit_Label.Opacity = _Properties.Label.OpacityFocus;
					TextEdit_Label.TextColor = _Properties.Label.ColorFocus;
				} else {
					TextEdit_Label.Opacity = _Properties.Label.OpacityUnfocus;
					TextEdit_Label.TextColor = _Properties.Label.ColorUnfocus;
				}
			} else {
				TextEdit_Label.Opacity = ComponentTextField_C_Placeholder_Opacity;
				TextEdit_Label.TextColor = ComponentTextField_CL::Hex6ToRgb(ComponentTextField_C_Placeholder_Color);
				TextEdit_Label.TextFormat = CMlTextEdit::EControlScriptEditorTextFormat::Basic;
				TextEdit_Label.Value = ComponentTextField_TL::GetTranslatedText(_Properties.Label.Placeholder);
			}
		}
	}

	// TextField background
	Button_Background.Visible = !_Properties.IsBgEmpty || _Properties.Background.Image != "";
	if (_RedrawBackground && Button_Background.Visible) {
		MenuLibsExpendableButton_SetWidth(Button_Background, _Properties.Size.X, False);
		MenuLibsExpendableButton_SetHeight(Button_Background, _Properties.Size.Y, False);
		if (_Properties.Background.Image != "") {
			MenuLibsExpendableButton_SetBackgroundImages(Button_Background, [
				MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
				MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {},
				MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {
					ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize,
					Url = _Properties.Background.Image,
					Size =  _Properties.Size
				}
			], False);
		} else if (_Properties.Skew == ComponentTextField_C_Skew_Margin) { //< When the TextField is not skewed
			MenuLibsExpendableButton_SetBackgroundImages(Button_Background, [
				MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
				MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {},
				MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {
					ColorMode = MenuLibsExpendableButton_C_ColorMode_Background
				}
			], False);
		}
		if (_Properties.Contour.Image != "") {
			MenuLibsExpendableButton_SetFocusImages(Button_Background, [
				MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
				MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {},
				MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {
					ColorMode = MenuLibsExpendableButton_C_ColorMode_Colorize,
					Url = _Properties.Contour.Image,
					Size =  _Properties.Size
				}
			], False);
		}
		MenuLibsExpendableButton_SetBackgroundColorFocused(Button_Background, _Properties.Background.ColorFocus, False);
		MenuLibsExpendableButton_SetBackgroundColorUnfocused(Button_Background, _Properties.Background.ColorUnfocus, False);
		MenuLibsExpendableButton_SetBackgroundOpacityFocused(Button_Background, _Properties.Background.OpacityFocus, False);
		MenuLibsExpendableButton_SetBackgroundOpacityUnfocused(Button_Background, _Properties.Background.OpacityUnfocus, False);
		MenuLibsExpendableButton_SetFocusColorFocused(Button_Background, _Properties.Contour.ColorFocus, False);
		MenuLibsExpendableButton_SetFocusColorUnfocused(Button_Background, _Properties.Contour.ColorUnfocus, False);
		MenuLibsExpendableButton_SetFocusOpacityFocused(Button_Background, _Properties.Contour.OpacityFocus, False);
		MenuLibsExpendableButton_SetFocusOpacityUnfocused(Button_Background, _Properties.Contour.OpacityUnfocus, False);
		MenuLibsExpendableButton_RedrawButton(Button_Background, False);
		MenuLibsExpendableButton_Focus(Button_Background, _Properties.IsFocused, False);
	}

	// Align
	ComponentMenuLibsTools_Align(Frame_Align, _Properties.Size, _Properties.HAlign, _Properties.VAlign);

	// Navigation
	Quad_Activation.Size = _Properties.Size;

	if (_Properties.IsFocused) {
		ComponentTextField_Focus(_Frame_TextField, True, False);
	} else {
		ComponentTextField_Unfocus(_Frame_TextField, True, False);
	}
}
Void ComponentTextField_ApplyProperties(CMlFrame _Frame_TextField, Boolean _RedrawBackground) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, _RedrawBackground);
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Visibility of the component
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void ComponentTextField_ShowAndUnlock(CMlFrame _Frame_TextField) {
	ComponentNavigation_Lock(_Frame_TextField, False);
	_Frame_TextField.Show();
}
Void ComponentTextField_HideAndLock(CMlFrame _Frame_TextField) {
	ComponentNavigation_Lock(_Frame_TextField, True);
	_Frame_TextField.Hide();
}
Void ComponentTextField_SetVisibilityAndNavigation(CMlFrame _Frame_TextField, Boolean _IsVisible) {
	ComponentNavigation_Lock(_Frame_TextField, !_IsVisible);
	_Frame_TextField.Visible = _IsVisible;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Setters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Void ComponentTextField_SetSize(CMlFrame _Frame_TextField, Vec2 _Size, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Size = _Size;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, True);
}
Void ComponentTextField_SetSize(CMlFrame _Frame_TextField, Vec2 _Size) {
	ComponentTextField_SetSize(_Frame_TextField, _Size, True);
}
Void ComponentTextField_SetValue(CMlFrame _Frame_TextField, Text _Value, Boolean _SendEvent, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.Value = _Value;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);

	if (_SendEvent) {
		ComponentTextField_DelayedPendingEvents.add(ComponentTextField_K_TextFieldEvent {
			Control = _Frame_TextField,
			TextField = _Frame_TextField,
			Type = ComponentTextField_C_EventType_Update,
			Value = ComponentTextField_Properties.Label.Value
		});
	}
}
Void ComponentTextField_SetValue(CMlFrame _Frame_TextField, Text _Value, Boolean _SendEvent) {
	ComponentTextField_SetValue(_Frame_TextField, _Value, _SendEvent, True);
}
Void ComponentTextField_SetValue(CMlFrame _Frame_TextField, Text _Value) {
	ComponentTextField_SetValue(_Frame_TextField, _Value, False);
}
Void ComponentTextField_SetTextOpacityFocus(CMlFrame _Frame_TextField, Real _TextOpacity, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.OpacityFocus = _TextOpacity;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetTextOpacityFocus(CMlFrame _Frame_TextField, Real _TextOpacity) {
	ComponentTextField_SetTextOpacityFocus(_Frame_TextField, _TextOpacity, True);
}
Void ComponentTextField_SetTextOpacityUnfocus(CMlFrame _Frame_TextField, Real _TextOpacity, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.OpacityUnfocus = _TextOpacity;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetTextOpacityUnfocus(CMlFrame _Frame_TextField, Real _TextOpacity) {
	ComponentTextField_SetTextOpacityUnfocus(_Frame_TextField, _TextOpacity, True);
}
Void ComponentTextField_SetTextColorFocus(CMlFrame _Frame_TextField, Vec3 _TextColor, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.ColorFocus = _TextColor;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetTextColorFocus(CMlFrame _Frame_TextField, Vec3 _TextColor) {
	ComponentTextField_SetTextColorFocus(_Frame_TextField, _TextColor, True);
}
Void ComponentTextField_SetTextColorUnfocus(CMlFrame _Frame_TextField, Vec3 _TextColor, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.ColorUnfocus = _TextColor;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetTextColorUnfocus(CMlFrame _Frame_TextField, Vec3 _TextColor) {
	ComponentTextField_SetTextColorUnfocus(_Frame_TextField, _TextColor, True);
}
Void ComponentTextField_SetTextSize(CMlFrame _Frame_TextField, Real _TextSize, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.TextSize = _TextSize;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetTextSize(CMlFrame _Frame_TextField, Real _TextSize) {
	ComponentTextField_SetTextSize(_Frame_TextField, _TextSize, True);
}
Void ComponentTextField_SetTextFormatEntry(CMlFrame _Frame_TextField, CMlEntry::ETextFormat _TextFormat, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.TextFormatEntry = _TextFormat;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetTextFormatEntry(CMlFrame _Frame_TextField, CMlEntry::ETextFormat _TextFormat) {
	ComponentTextField_SetTextFormatEntry(_Frame_TextField, _TextFormat, True);
}
Void ComponentTextField_SetTextFormatTextEdit(CMlFrame _Frame_TextField, CMlTextEdit::EControlScriptEditorTextFormat _TextFormat, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.TextFormatTextEdit = _TextFormat;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetTextFormatTextEdit(CMlFrame _Frame_TextField, CMlTextEdit::EControlScriptEditorTextFormat _TextFormat) {
	ComponentTextField_SetTextFormatTextEdit(_Frame_TextField, _TextFormat, True);
}
Void ComponentTextField_SetValueType(CMlFrame _Frame_TextField, CMlEntry::ValueType _ValueType, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Label.ValueType = _ValueType;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, False);
}
Void ComponentTextField_SetValueType(CMlFrame _Frame_TextField, CMlEntry::ValueType _ValueType) {
	ComponentTextField_SetValueType(_Frame_TextField, _ValueType, True);
}
Void ComponentTextField_SetBackgroundOpacityFocus(CMlFrame _Frame_TextField, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Background.OpacityFocus = _Opacity;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, True);
}
Void ComponentTextField_SetBackgroundOpacityFocus(CMlFrame _Frame_TextField, Real _Opacity) {
	ComponentTextField_SetBackgroundOpacityFocus(_Frame_TextField, _Opacity, True);
}
Void ComponentTextField_SetBackgroundOpacityUnfocus(CMlFrame _Frame_TextField, Real _Opacity, Boolean _ApplyProperties) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties.Background.OpacityUnfocus = _Opacity;
	if (_ApplyProperties) ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, True);
}
Void ComponentTextField_SetBackgroundOpacityUnfocus(CMlFrame _Frame_TextField, Real _Opacity) {
	ComponentTextField_SetBackgroundOpacityUnfocus(_Frame_TextField, _Opacity, True);
}
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
// Getters
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
Boolean ComponentTextField_IsTextField(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.IsTextField;
}

Boolean ComponentTextField_IsFocused(CMlControl _Frame_Counter) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_Counter;
	return ComponentTextField_Properties.IsFocused;
}

Vec2 ComponentTextField_GetSize(CMlFrame _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Size;
}
Text ComponentTextField_GetValue(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.Value;
}
Real ComponentTextField_GetTextOpacityFocus(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.OpacityFocus;
}
Real ComponentTextField_GetTextOpacityUnfocus(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.OpacityUnfocus;
}
Vec3 ComponentTextField_GetTextColorFocus(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.ColorFocus;
}
Vec3 ComponentTextField_GetTextColorUnfocus(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.ColorUnfocus;
}
Real ComponentTextField_GetTextSize(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.TextSize;
}
CMlEntry::ETextFormat ComponentTextField_GetTextFormatEntry(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.TextFormatEntry;
}
CMlTextEdit::EControlScriptEditorTextFormat ComponentTextField_GetTextFormatTextEdit(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.TextFormatTextEdit;
}
CMlEntry::ValueType ComponentTextField_GetValueType(CMlControl _Frame_TextField) {
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	return ComponentTextField_Properties.Label.ValueType;
}

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //
///	Initialize the component
Void ComponentTextField_InitTextField(CMlFrame _Frame_TextField) {
	declare CMlEntry Entry_Label <=> (_Frame_TextField.GetFirstChild("ComponentTextField_entry-label") as CMlEntry);

	// Initialize the Properties structure
	declare ComponentTextField_K_Properties ComponentTextField_Properties for _Frame_TextField;
	ComponentTextField_Properties = ComponentTextField_K_Properties {
		IsTextField = True,
		IsLocked = False,
		IsBgEmpty = False,
		TextFieldType = ComponentTextField_C_TextFieldType_Entry,
		Label = ComponentTextField_K_TextProperties {
			AutoNewLine = False,
			MaxLine = -1,
			OpacityFocus = 1.,
			OpacityUnfocus = 1.,
			Placeholder = "",
			ColorFocus = Entry_Label.TextColor,
			ColorUnfocus = Entry_Label.TextColor,
			TextFormatEntry = CMlEntry::ETextFormat::Basic,
			TextFormatTextEdit = CMlTextEdit::EControlScriptEditorTextFormat::Basic,
			TextSize = Entry_Label.TextSizeReal,
			Value = ""
		},
		Background = ComponentTextField_K_ImageProperties {
			ColorFocus = <0., 0., 0.>,
			ColorUnfocus = <0., 0., 0.>,
			ColorType = ComponentTextField_C_ColorType_Colorize,
			Image = "",
			OpacityFocus = 1.,
			OpacityUnfocus = 1.
		},
		Contour = ComponentTextField_K_ImageProperties {
			ColorFocus = <0., 0., 0.>,
			ColorUnfocus = <0., 0., 0.>,
			ColorType = ComponentTextField_C_ColorType_Colorize,
			Image = "",
			OpacityFocus = 0.,
			OpacityUnfocus = 0.
		},
		HAlign = ComponentMenuLibsTools_C_HAlign_Center,
		VAlign = ComponentMenuLibsTools_C_VAlign_Center,
		Size = Entry_Label.Size,
		Skew = ComponentTextField_C_Skew_Default,
		Tooltip = ""
	};

	// Retrieve the data entered in the frameinstance of the component
	if (_Frame_TextField.DataAttributeExists("bgempty")) {
		ComponentTextField_Properties.IsBgEmpty = ComponentMenuLibsTools_GetBooleanAttribute(_Frame_TextField, "bgempty");
	}
	if (_Frame_TextField.DataAttributeExists("textfieldtype")) {
		ComponentTextField_Properties.TextFieldType = ComponentTextField_TL::ToInteger(_Frame_TextField.DataAttributeGet("textfieldtype"));
	}
	if (_Frame_TextField.DataAttributeExists("halign")) {
		ComponentTextField_Properties.HAlign = _Frame_TextField.DataAttributeGet("halign");
	}
	if (_Frame_TextField.DataAttributeExists("valign")) {
		ComponentTextField_Properties.VAlign = _Frame_TextField.DataAttributeGet("valign");
	}
	if (_Frame_TextField.DataAttributeExists("size")) {
		ComponentTextField_Properties.Size = ComponentMenuLibsTools_TextToVec2(_Frame_TextField.DataAttributeGet("size"));
	}
	if (_Frame_TextField.DataAttributeExists("skew")) {
		ComponentTextField_Properties.Skew = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("skew"));
		if (ComponentTextField_Properties.Skew == 0.) ComponentTextField_Properties.Skew = ComponentTextField_C_Skew_Margin; //< If no skew, add a small right and left margin between the text and the background
	}
	if (_Frame_TextField.DataAttributeExists("tooltip")) {
		ComponentTextField_Properties.Tooltip = _Frame_TextField.DataAttributeGet("tooltip");
	}
	if (_Frame_TextField.DataAttributeExists("bgimage")) {
		ComponentTextField_Properties.Background.Image = _Frame_TextField.DataAttributeGet("bgimage");
	}
	if (_Frame_TextField.DataAttributeExists("bgcolortype")) {
		ComponentTextField_Properties.Background.ColorType = ComponentTextField_TL::ToInteger(_Frame_TextField.DataAttributeGet("bgcolortype"));
	}
	if (_Frame_TextField.DataAttributeExists("bgcolorfocus")) {
		ComponentTextField_Properties.Background.ColorFocus = ComponentTextField_CL::HexToRgb(_Frame_TextField.DataAttributeGet("bgcolorfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("bgcolorunfocus")) {
		ComponentTextField_Properties.Background.ColorUnfocus = ComponentTextField_CL::HexToRgb(_Frame_TextField.DataAttributeGet("bgcolorunfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("bgopacityfocus")) {
		ComponentTextField_Properties.Background.OpacityFocus = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("bgopacityfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("bgopacityunfocus")) {
		ComponentTextField_Properties.Background.OpacityUnfocus = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("bgopacityunfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("contourimage")) {
		ComponentTextField_Properties.Contour.Image = _Frame_TextField.DataAttributeGet("contourimage");
	}
	if (_Frame_TextField.DataAttributeExists("contouropacityfocus")) {
		ComponentTextField_Properties.Contour.OpacityFocus = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("contouropacityfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("contouropacityunfocus")) {
		ComponentTextField_Properties.Contour.OpacityUnfocus = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("contouropacityunfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("contourcolorfocus")) {
		ComponentTextField_Properties.Contour.ColorFocus = ComponentTextField_CL::HexToRgb(_Frame_TextField.DataAttributeGet("contourcolorfocus"));
		if (ComponentTextField_Properties.Contour.ColorUnfocus == <-1., -1., -1.>) ComponentTextField_Properties.Contour.ColorUnfocus = ComponentTextField_Properties.Contour.ColorFocus;
	}
	if (_Frame_TextField.DataAttributeExists("contourcolorunfocus")) {
		ComponentTextField_Properties.Contour.ColorUnfocus = ComponentTextField_CL::HexToRgb(_Frame_TextField.DataAttributeGet("contourcolorunfocus"));
		if (ComponentTextField_Properties.Contour.ColorFocus == <-1., -1., -1.>) ComponentTextField_Properties.Contour.ColorFocus = ComponentTextField_Properties.Contour.ColorUnfocus;
	}
	if (_Frame_TextField.DataAttributeExists("autonewline")) {
		ComponentTextField_Properties.Label.AutoNewLine = ComponentMenuLibsTools_GetBooleanAttribute(_Frame_TextField, "autonewline");
	}
	if (_Frame_TextField.DataAttributeExists("maxline")) {
		ComponentTextField_Properties.Label.MaxLine = ComponentTextField_TL::ToInteger(_Frame_TextField.DataAttributeGet("maxline"));
	}
	if (_Frame_TextField.DataAttributeExists("placeholder")) {
		ComponentTextField_Properties.Label.Placeholder = _Frame_TextField.DataAttributeGet("placeholder");
	}
	if (_Frame_TextField.DataAttributeExists("textcolorfocus")) {
		ComponentTextField_Properties.Label.ColorFocus = ComponentTextField_CL::HexToRgb(_Frame_TextField.DataAttributeGet("textcolorfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("textcolorunfocus")) {
		ComponentTextField_Properties.Label.ColorUnfocus = ComponentTextField_CL::HexToRgb(_Frame_TextField.DataAttributeGet("textcolorunfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("textopacityfocus")) {
		ComponentTextField_Properties.Label.OpacityFocus = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("textopacityfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("textopacityunfocus")) {
		ComponentTextField_Properties.Label.OpacityUnfocus = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("textopacityunfocus"));
	}
	if (_Frame_TextField.DataAttributeExists("textsize")) {
		ComponentTextField_Properties.Label.TextSize = ComponentTextField_TL::ToReal(_Frame_TextField.DataAttributeGet("textsize"));
	}
	if (_Frame_TextField.DataAttributeExists("textvalue")) {
		ComponentTextField_Properties.Label.Value = _Frame_TextField.DataAttributeGet("textvalue");
	}
	if (_Frame_TextField.DataAttributeExists("textvaluetype")) {
		switch (_Frame_TextField.DataAttributeGet("textvaluetype")) {
			case "Ml_Natural": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Natural;
			case "Ml_Integer": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Integer;
			case "Ml_Real": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Real;
			case "Ml_String": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_String;
			case "Ml_TimeMmSsCc": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeMmSsCc;
			case "Ml_TimeHhMmSs": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeHhMmSs;
			case "Ml_RealFormated": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_RealFormated;
			case "Ml_TimeMmSs": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeMmSs;
			case "Ml_Ascii7bit": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Ascii7bit;
			case "Ml_Real3Decimals": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Real3Decimals;
			case "Ml_TimeHhMmSs_24": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeHhMmSs_24;
			case "Ml_TimeHhMm": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeHhMm;
			case "Ml_Percent": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Percent;
			case "Ml_Hexa": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Hexa;
			case "Ml_TimeHhMmSsOrMmSs": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeHhMmSsOrMmSs;
			case "Ml_TimeHhMmFromSeconds": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeHhMmFromSeconds;
			case "Ml_TimeHhMmSsMil": ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_TimeHhMmSsMil;
			default: ComponentTextField_Properties.Label.ValueType = CMlEntry::ValueType::Ml_Unknown;
		}
	}
	if (_Frame_TextField.DataAttributeExists("textformat")) {
		switch (ComponentTextField_Properties.TextFieldType) {
			case ComponentTextField_C_TextFieldType_Entry: {
				switch (ComponentTextField_TL::ToLowerCase(_Frame_TextField.DataAttributeGet("textformat"))) {
					case "script": ComponentTextField_Properties.Label.TextFormatEntry = CMlEntry::ETextFormat::Script;
					case "password": ComponentTextField_Properties.Label.TextFormatEntry = CMlEntry::ETextFormat::Password;
					case "newpassword": ComponentTextField_Properties.Label.TextFormatEntry = CMlEntry::ETextFormat::Newpassword;
					default: ComponentTextField_Properties.Label.TextFormatEntry = CMlEntry::ETextFormat::Basic;
				}
			}
			case ComponentTextField_C_TextFieldType_TextEdit: {
				switch (ComponentTextField_TL::ToLowerCase(_Frame_TextField.DataAttributeGet("textformat"))) {
					case "script": ComponentTextField_Properties.Label.TextFormatTextEdit = CMlTextEdit::EControlScriptEditorTextFormat::Script;
					case "password": ComponentTextField_Properties.Label.TextFormatTextEdit = CMlTextEdit::EControlScriptEditorTextFormat::Password;
					case "newpassword": ComponentTextField_Properties.Label.TextFormatTextEdit = CMlTextEdit::EControlScriptEditorTextFormat::Newpassword;
					default: ComponentTextField_Properties.Label.TextFormatTextEdit = CMlTextEdit::EControlScriptEditorTextFormat::Basic;
				}
			}
		}
	}

	// First update of the component after initialization
	ComponentTextField_ApplyProperties(_Frame_TextField, ComponentTextField_Properties, True);
	ComponentTextField_Unfocus(_Frame_TextField, False, False);
}

***MainStart***
***
Page.GetClassChildren("ComponentTextField_frame-container-text-field", Page.MainFrame, True);
foreach (Control in Page.GetClassChildren_Result) {
	declare CMlFrame Frame_TextFieldContainer = (Control as CMlFrame);
	ComponentTextField_InitTextField(Frame_TextFieldContainer.Parent);
	ComponentTextField_G_TextFields.add(Frame_TextFieldContainer.Parent);
}
***
***MainLoop***
***
ComponentTextField_PendingEvents = ComponentTextField_DelayedPendingEvents;
ComponentTextField_DelayedPendingEvents = [];

/* Handle entry focused state */
if (ComponentTextField_G_FocusedTextField != Null && ComponentTextField_G_IsTextFieldFocused != ComponentTextField_G_FocusedTextField.IsFocused) {
	ComponentTextField_Private_Update();
}

/* Navigation events */
if (ComponentTextField_G_TextFields.count > 0 && !ComponentTextField_G_IsTextFieldFocused) {
	foreach (Event in ComponentNavigation_PendingEvents) {
		if (Event.To != Null && ComponentTextField_G_TextFields.exists(Event.To as CMlFrame)) {
			assert(ComponentTextField_IsTextField(Event.To), "The manialink has been modified, we do not point to the right frame anymore");
			declare CMlFrame Frame_TextField = Event.To as CMlFrame;

			if (ComponentTextField_IsFocused(Frame_TextField)) {
				switch (Event.Type) {
					case ComponentNavigation_C_EventType_NavigateInput: {
						switch (Event.Input) {
							case CMlScriptEvent::EMenuNavAction::Select: ComponentTextField_Select(Frame_TextField);
						}
					}
					case ComponentNavigation_C_EventType_NavigateMouse: {
						switch (Event.Mouse) {
							case CMlScriptEvent::Type::MouseClick: ComponentTextField_Select(Frame_TextField);
						}
					}
				}
			}
		}
	}
}

/* Local events */
foreach (Event in ComponentTextField_PendingEvents) {
	switch (Event.Type) {
		case ComponentTextField_C_EventType_StartEdition: {
			switchtype (Event.Control) {
				case CMlEntry: (Event.Control as CMlEntry).StartEdition();
				case CMlTextEdit: (Event.Control as CMlTextEdit).StartEdition();
			}
		}
	}
}
***

// */
// @Component end component-textfield

// @Component start component-popupmultichoice2
// /*

declare ComponentPopUpMultiChoice2_K_Properties[Text] ComponentPopUpMultiChoice2_G_Styles;
declare ComponentPopUpMultiChoice2_K_Properties ComponentPopUpMultiChoice2_G_DefaultProperties;
declare ComponentPopUpMultiChoice2_K_Event[] ComponentPopUpMultiChoice2_DelayedPendingEvents;
declare ComponentPopUpMultiChoice2_K_Event[] ComponentPopUpMultiChoice2_PendingEvents;

// Create a description line with custom properties
ComponentPopUpMultiChoice2_K_DescriptionPart ComponentPopUpMultiChoice2_CreateDescriptionPart(
	Text _TextValue,
	Vec2 _TextSize,
	Real _TextFontSize,
	Text _TextFont,
	Text _TextPrefix,
	Vec3 _TextColor,
	Boolean _TextFitLabelEnabled
) {
	return ComponentPopUpMultiChoice2_K_DescriptionPart {
		TextFitLabelEnabled = _TextFitLabelEnabled,
		TextFontSize = _TextFontSize,
		TextFont = _TextFont,
		TextPrefix = _TextPrefix,
		TextValue = _TextValue,
		TextColor = _TextColor,
		TextSize = _TextSize
	};
}

// Check if the control is a pop-up with multiple choices
Boolean ComponentPopUpMultiChoice2_IsPopUpMultiChoice(CMlControl _Control) {
	if (_Control == Null) return False;
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Control;
	return ComponentPopUpMultiChoice2_State.IsPopUpMultiChoice;
}

// Get the frame instance of this component from an inside control
CMlFrame ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(CMlControl _Control) {
	if (_Control == Null) return Null;
	if (_Control.HasClass("class-component-popupmultichoice2")) return _Control.Parent;

	declare CMlFrame Frame_ParentPopUpMultiChoice for _Control;
	if (Frame_ParentPopUpMultiChoice != Null) return Frame_ParentPopUpMultiChoice;

	return ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(_Control.Parent);
}

// Handle the focus inside the pop-up
Void ComponentPopUpMultiChoice2_Private_Focus(CMlControl _From, CMlControl _To, Boolean _IsAnimated) {
	if (!_To.HasClass("class-component-popupmultichoice2-navigation")) return;

	if (_From != Null) {
		ComponentNavigation_Unfocus(_From);
		if (MenuLibsExpendableButton_IsButton(_From)) {
			MenuLibsExpendableButton_Unfocus(_From as CMlFrame);
		} else if (MenuLibsScroll_IsScroll(_From)) {
			MenuLibsScroll_Unfocus((_From as CMlFrame));
		} else if (ComponentCheckbox_IsCheckbox(_From)) {
			ComponentCheckbox_Unfocus(_From as CMlFrame);
		} else if (ComponentTextField_IsTextField(_From)) {
			ComponentTextField_Unfocus(_From as CMlFrame);
		}
	}

	if (_To != Null) {
		ComponentNavigation_Focus(_To);
		if (MenuLibsExpendableButton_IsButton(_To)) {
			MenuLibsExpendableButton_Focus(_To as CMlFrame, True, _IsAnimated);
		} else if (MenuLibsScroll_IsScroll(_To)) {
			MenuLibsScroll_Focus((_To as CMlFrame));
		} else if (ComponentCheckbox_IsCheckbox(_To)) {
			ComponentCheckbox_Focus(_To as CMlFrame);
		} else if (ComponentTextField_IsTextField(_To)) {
			ComponentTextField_Focus(_To as CMlFrame);
		}

		declare CMlFrame Frame_PopUpMultiChoice = ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(_To);
		if (Frame_PopUpMultiChoice != Null) {
			declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for Frame_PopUpMultiChoice;
			ComponentPopUpMultiChoice2_State.LastFocusedControl = _To;
		}
	}
}

// Lock/Unlock the pop up navigation
Void ComponentPopUpMultiChoice2_LockPopUp(CMlFrame _Frame_PopUpMultiChoice, Boolean _Lock, Boolean _LockPopUpBackground) {
	assert(ComponentPopUpMultiChoice2_IsPopUpMultiChoice(_Frame_PopUpMultiChoice), _Frame_PopUpMultiChoice.ControlId^" is not an instance of the PopUpMultiChoice component.");
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;

	if (_LockPopUpBackground) {
		TMNextPopUpBackground2_SetDimmerSendCloseEvent(ComponentPopUpMultiChoice2_State.Controls.Frame_Background, !_Lock, False);
		TMNextPopUpBackground2_SetButtonLeaveEnable(ComponentPopUpMultiChoice2_State.Controls.Frame_Background, !_Lock, True);
	}
	ComponentNavigation_EnableGroup("navgroup-component-popupmultichoice2", !_Lock);
	ComponentNavigation_EnableContainer(ComponentPopUpMultiChoice2_State.Controls.Frame_NavigationContainer, !_Lock);
	ComponentNavigation_Lock(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, !ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices.Visible || _Lock);
	MenuLibsScroll_LockNavigation(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, !ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices.Visible || _Lock);
	if (ComponentPopUpMultiChoice2_State.Controls.Frame_CustomContent != Null) {
		ComponentPopUpMultiChoice2_State.Controls.Frame_CustomContent.Visible = !_Lock && !ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices.Visible;
		foreach (Key => Control in ComponentPopUpMultiChoice2_State.CustomContentControls) {
			ComponentNavigation_Lock(Control, !ComponentPopUpMultiChoice2_State.Controls.Frame_CustomContent.Visible);
		}
	}
}
// Display or hide the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_Display(CMlFrame _Frame_PopUpMultiChoice, Boolean _IsDisplayed, Boolean _SendEvent, Boolean _IsAnimated) {
	assert(ComponentPopUpMultiChoice2_IsPopUpMultiChoice(_Frame_PopUpMultiChoice), _Frame_PopUpMultiChoice.ControlId^" is not an instance of the PopUpMultiChoice component.");
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;

	_Frame_PopUpMultiChoice.Visible = _IsDisplayed;
	ComponentPopUpMultiChoice2_LockPopUp(_Frame_PopUpMultiChoice, !_IsDisplayed, False);

	// Update focus
	if (_IsDisplayed || !_IsAnimated) {
		if (ComponentPopUpMultiChoice2_State.LastFocusedControl == Null || ComponentNavigation_IsLocked(ComponentPopUpMultiChoice2_State.LastFocusedControl)) {
			if (!ComponentNavigation_IsLocked(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice)) {
				ComponentPopUpMultiChoice2_Private_Focus(ComponentPopUpMultiChoice2_State.LastFocusedControl, ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, _IsAnimated);
			} else if (!ComponentNavigation_IsLocked(ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice)) {
				ComponentPopUpMultiChoice2_Private_Focus(ComponentPopUpMultiChoice2_State.LastFocusedControl, ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice, _IsAnimated);
			} else if (!MenuLibsScroll_NavigationIsLocked(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices)) {
				ComponentPopUpMultiChoice2_Private_Focus(ComponentPopUpMultiChoice2_State.LastFocusedControl, ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, _IsAnimated);
			}
		} else if (!ComponentNavigation_IsFocused(ComponentPopUpMultiChoice2_State.LastFocusedControl, "navgroup-component-popupmultichoice2")) {
			ComponentPopUpMultiChoice2_Private_Focus(Null, ComponentPopUpMultiChoice2_State.LastFocusedControl, _IsAnimated);
		}
	}

	if (_SendEvent) {
		ComponentPopUpMultiChoice2_DelayedPendingEvents.add(ComponentPopUpMultiChoice2_K_Event {
			Type = ComponentPopUpMultiChoice2_C_EventType_Display,
			PopUpMultiChoice = _Frame_PopUpMultiChoice
		});
	}
}
Void ComponentPopUpMultiChoice2_Display(CMlFrame _Frame_PopUpMultiChoice, Boolean _IsDisplayed, Boolean _SendEvent) {
	ComponentPopUpMultiChoice2_Display(_Frame_PopUpMultiChoice, _IsDisplayed, _SendEvent, True);
}
Void ComponentPopUpMultiChoice2_Open(CMlFrame _Frame_PopUpMultiChoice, Boolean _SendEvent) {
	ComponentPopUpMultiChoice2_Display(_Frame_PopUpMultiChoice, True, _SendEvent);
}
Void ComponentPopUpMultiChoice2_Open(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_Open(_Frame_PopUpMultiChoice, True);
}
Void ComponentPopUpMultiChoice2_Close(CMlFrame _Frame_PopUpMultiChoice, Boolean _SendEvent) {
	ComponentPopUpMultiChoice2_Display(_Frame_PopUpMultiChoice, False, _SendEvent);
}
Void ComponentPopUpMultiChoice2_Close(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_Close(_Frame_PopUpMultiChoice, True);
}
Void ComponentPopUpMultiChoice2_Private_Close(CMlFrame _Frame_PopUpMultiChoice) {
	assert(ComponentPopUpMultiChoice2_IsPopUpMultiChoice(_Frame_PopUpMultiChoice), _Frame_PopUpMultiChoice.ControlId^" is not an instance of the PopUpMultiChoice component.");
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	if (!ComponentPopUpMultiChoice2_State.IsSelectionRequired) {
		ComponentPopUpMultiChoice2_Close(_Frame_PopUpMultiChoice);
	}
}

// Focus the first choice button
Void ComponentPopUpMultiChoice2_FocusFirstChoice(CMlFrame _Frame_PopUpMultiChoice, Boolean _IsAnimated) {
	assert(ComponentPopUpMultiChoice2_IsPopUpMultiChoice(_Frame_PopUpMultiChoice), "'"^_Frame_PopUpMultiChoice.ControlId^"' is not an instance of the PopUpMultiChoice component.");
	declare CMlControl Button_FirstChoice <=> _Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_button-first-choice");
	if (!ComponentNavigation_IsLocked(Button_FirstChoice)) {
		ComponentPopUpMultiChoice2_Private_Focus(
			ComponentNavigation_GetFocusedControl("navgroup-component-popupmultichoice2"),
			Button_FirstChoice,
			_IsAnimated
		);
	}
}

// Focus the second choice button
Void ComponentPopUpMultiChoice2_FocusSecondChoice(CMlFrame _Frame_PopUpMultiChoice, Boolean _IsAnimated) {
	assert(ComponentPopUpMultiChoice2_IsPopUpMultiChoice(_Frame_PopUpMultiChoice), "'"^_Frame_PopUpMultiChoice.ControlId^"' is not an instance of the PopUpMultiChoice component.");
	declare CMlControl Button_SecondChoice <=> _Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_button-second-choice");
	if (!ComponentNavigation_IsLocked(Button_SecondChoice)) {
		ComponentPopUpMultiChoice2_Private_Focus(
			ComponentNavigation_GetFocusedControl("navgroup-component-popupmultichoice2"),
			Button_SecondChoice,
			_IsAnimated
		);
	}
}

// Handle the focus inside the pop-up
Void ComponentPopUpMultiChoice2_Private_Select(CMlControl _Control) {
	declare CMlFrame Frame_PopUpMultiChoice = ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(_Control);

	if (Frame_PopUpMultiChoice != Null) {
		declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for Frame_PopUpMultiChoice;
		declare Integer ChoiceKey for _Control;

		if (ComponentPopUpMultiChoice2_State.IsClosedAfterSelection) {
			ComponentPopUpMultiChoice2_Close(Frame_PopUpMultiChoice);
		}

		ComponentPopUpMultiChoice2_DelayedPendingEvents.add(ComponentPopUpMultiChoice2_K_Event {
			Type = ComponentPopUpMultiChoice2_C_EventType_Select,
			SelectedControl = _Control,
			SelectedIndex = ChoiceKey,
			SelectedChoice = ComponentPopUpMultiChoice2_State.MergedProperties.Choices.get(ChoiceKey, ""),
			PopUpMultiChoice = Frame_PopUpMultiChoice
		});
	}
}

// Enable or disable a properties from the `Enabled` array
Integer[] ComponentPopUpMultiChoice2_Private_EnableProperty(Integer[] _EnabledProperties, Integer _Property, Boolean _Enabled) {
	declare Integer[] EnabledProperties = _EnabledProperties;

	if (_Enabled) {
		if (!EnabledProperties.exists(_Property)) {
			EnabledProperties.add(_Property);
		}
	} else {
		EnabledProperties.remove(_Property);
	}

	return EnabledProperties;
}

// Set and enable a property
ComponentPopUpMultiChoice2_K_Properties ComponentPopUpMultiChoice2_Private_SetProperty(ComponentPopUpMultiChoice2_K_Properties _TargetProperties, Integer _PropertyId, ComponentPopUpMultiChoice2_K_Properties _SourceProperties) {
	declare ComponentPopUpMultiChoice2_K_Properties Properties = _TargetProperties;

	Properties.Enabled = ComponentPopUpMultiChoice2_Private_EnableProperty(Properties.Enabled, _PropertyId, True);

	switch (_PropertyId) {
		case ComponentPopUpMultiChoice2_C_Property_Width: Properties.Width = _SourceProperties.Width;
		case ComponentPopUpMultiChoice2_C_Property_HAlign: Properties.HAlign = _SourceProperties.HAlign;
		case ComponentPopUpMultiChoice2_C_Property_VAlign: Properties.VAlign = _SourceProperties.VAlign;
		case ComponentPopUpMultiChoice2_C_Property_Choices: Properties.Choices = _SourceProperties.Choices;
		case ComponentPopUpMultiChoice2_C_Property_TitleValue: Properties.TitleValue = _SourceProperties.TitleValue;
		case ComponentPopUpMultiChoice2_C_Property_TitleFitLabelEnabled: Properties.TitleFitLabelEnabled = _SourceProperties.TitleFitLabelEnabled;
		case ComponentPopUpMultiChoice2_C_Property_TitleFont: Properties.TitleFont = _SourceProperties.TitleFont;
		case ComponentPopUpMultiChoice2_C_Property_TitleFontSize: Properties.TitleFontSize = _SourceProperties.TitleFontSize;
		case ComponentPopUpMultiChoice2_C_Property_TitlePrefix: Properties.TitlePrefix = _SourceProperties.TitlePrefix;
		case ComponentPopUpMultiChoice2_C_Property_Description: Properties.Description = _SourceProperties.Description;
		case ComponentPopUpMultiChoice2_C_Property_StylesFirstChoice: Properties.StylesFirstChoice = _SourceProperties.StylesFirstChoice;
		case ComponentPopUpMultiChoice2_C_Property_StylesSecondChoice: Properties.StylesSecondChoice = _SourceProperties.StylesSecondChoice;
		case ComponentPopUpMultiChoice2_C_Property_StylesScrollChoice: Properties.StylesScrollChoice = _SourceProperties.StylesScrollChoice;
		case ComponentPopUpMultiChoice2_C_Property_ForceScrollView: Properties.ForceScrollView = _SourceProperties.ForceScrollView;
		case ComponentPopUpMultiChoice2_C_Property_NavigationInputs: Properties.NavigationInputs = _SourceProperties.NavigationInputs;
		case ComponentPopUpMultiChoice2_C_Property_NavigationTargets: Properties.NavigationTargets = _SourceProperties.NavigationTargets;
		case ComponentPopUpMultiChoice2_C_Property_ForceHideChoices: Properties.ForceHideChoices = _SourceProperties.ForceHideChoices;
		case ComponentPopUpMultiChoice2_C_Property_ScrollFocusedChoiceKey: Properties.ScrollFocusedChoiceKey = _SourceProperties.ScrollFocusedChoiceKey;
	}

	return Properties;
}

// Merge a base properties with other enabled properties
ComponentPopUpMultiChoice2_K_Properties ComponentPopUpMultiChoice2_Private_MergeProperties(ComponentPopUpMultiChoice2_K_Properties _Base, ComponentPopUpMultiChoice2_K_Properties[] _PropertiesToMerge) {
	declare ComponentPopUpMultiChoice2_K_Properties MergedProperties = _Base;

	foreach (Properties in _PropertiesToMerge) {
		foreach (PropertyId in Properties.Enabled) {
			MergedProperties = ComponentPopUpMultiChoice2_Private_SetProperty(MergedProperties, PropertyId, Properties);
		}
	}

	return MergedProperties;
}

// Redraw the pop-up with multiple choices (apply style, width, ...)
Void ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(CMlFrame _Frame_PopUpMultiChoice, Boolean _IsAnimated) {
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;

	declare ComponentPopUpMultiChoice2_K_Properties[] PropertiesToMerge = [ComponentPopUpMultiChoice2_G_DefaultProperties];
	foreach (Style in ComponentPopUpMultiChoice2_State.Styles) {
		PropertiesToMerge.add(ComponentPopUpMultiChoice2_G_Styles.get(Style, ComponentPopUpMultiChoice2_K_Properties {}));
	}
	PropertiesToMerge.add(ComponentPopUpMultiChoice2_State.CustomizedProperties);

	ComponentPopUpMultiChoice2_State.MergedProperties = ComponentPopUpMultiChoice2_Private_MergeProperties(
		ComponentPopUpMultiChoice2_C_DefaultProperties,
		PropertiesToMerge
	);

	// Update the pop-up background
	TMNextPopUpBackground2_SetWidth(ComponentPopUpMultiChoice2_State.Controls.Frame_Background, ComponentPopUpMultiChoice2_State.MergedProperties.Width, False);
	TMNextPopUpBackground2_SetHAlign(ComponentPopUpMultiChoice2_State.Controls.Frame_Background, ComponentPopUpMultiChoice2_State.MergedProperties.HAlign, False);
	TMNextPopUpBackground2_SetVAlign(ComponentPopUpMultiChoice2_State.Controls.Frame_Background, ComponentPopUpMultiChoice2_State.MergedProperties.VAlign, False);
	TMNextPopUpBackground2_RedrawPopUpBackground(ComponentPopUpMultiChoice2_State.Controls.Frame_Background);

	// Get pop-up background infos
	declare Vec2 Size_HeaderArea = TMNextPopUpBackground2_GetHeaderAreaSize(ComponentPopUpMultiChoice2_State.Controls.Frame_Background);
	declare Vec2 Size_ContentArea = TMNextPopUpBackground2_GetContentAreaSize(ComponentPopUpMultiChoice2_State.Controls.Frame_Background);
	declare Vec2 Pos_HeaderArea = TMNextPopUpBackground2_GetHeaderAreaPosition(ComponentPopUpMultiChoice2_State.Controls.Frame_Background);
	declare Vec2 Pos_ContentArea = TMNextPopUpBackground2_GetContentAreaPosition(ComponentPopUpMultiChoice2_State.Controls.Frame_Background);

	// Update pop-up title
	ComponentPopUpMultiChoice2_State.Controls.Label_Title.Value = ComponentPopUpMultiChoice2_State.MergedProperties.TitleValue;
	ComponentPopUpMultiChoice2_State.Controls.Label_Title.TextFont = ComponentPopUpMultiChoice2_State.MergedProperties.TitleFont;
	ComponentPopUpMultiChoice2_State.Controls.Label_Title.TextSizeReal = ComponentPopUpMultiChoice2_State.MergedProperties.TitleFontSize;
	ComponentPopUpMultiChoice2_State.Controls.Label_Title.TextPrefix = ComponentPopUpMultiChoice2_State.MergedProperties.TitlePrefix;
	ComponentPopUpMultiChoice2_State.Controls.Label_Title.Size = <Size_HeaderArea.X - 8*ComponentMenuLibsHelpers_SkewX(Size_HeaderArea.Y, 10.), Size_HeaderArea.Y>;
	ComponentPopUpMultiChoice2_State.Controls.Label_Title.RelativePosition_V3 = ComponentMenuLibsHelpers_SkewX(<0., Pos_HeaderArea.Y - Size_HeaderArea.Y*0.55>, 10.);
	if (ComponentPopUpMultiChoice2_State.MergedProperties.TitleFitLabelEnabled) {
		ComponentMenuLibsTools_FitLabelValue(
			ComponentPopUpMultiChoice2_State.Controls.Label_Title,
			ComponentPopUpMultiChoice2_State.Controls.Label_Title.TextSizeReal,
			ComponentPopUpMultiChoice2_State.Controls.Label_Title.TextSizeReal / 10.,
			ComponentPopUpMultiChoice2_State.Controls.Label_Title.TextSizeReal / 10.
		);
	}

	// Update description grid
	ComponentPopUpMultiChoice2_State.Controls.Frame_DescriptionContainer.Visible = ComponentPopUpMultiChoice2_State.MergedProperties.Description.count > 0 && ComponentPopUpMultiChoice2_State.MergedProperties.Choices.count < 3 && !ComponentPopUpMultiChoice2_State.MergedProperties.ForceScrollView;
	if (ComponentPopUpMultiChoice2_State.Controls.Frame_DescriptionContainer.Visible) {
		declare GridConfig = ComponentMenuLibsGrid_Create(0., 0., 0., ComponentMenuLibsGrid_C_Direction_Bottom);
		foreach (Index => Control in ComponentPopUpMultiChoice2_State.Controls.Frame_DescriptionContainer.Controls) {
			if (Control.HasClass("component-grid-element")) {
				declare CMlLabel Label_Line = Control as CMlLabel;
				if (ComponentPopUpMultiChoice2_State.MergedProperties.Description.existskey(Index)) {
					declare ComponentPopUpMultiChoice2_K_DescriptionPart DescriptionPart = ComponentPopUpMultiChoice2_State.MergedProperties.Description[Index];
					GridConfig = ComponentMenuLibsGrid_AddRow(GridConfig, Index, DescriptionPart.TextSize.Y, ComponentMenuLibsGrid_C_Align_Center);
					GridConfig = ComponentMenuLibsGrid_SetSize(GridConfig, GridConfig.Size + DescriptionPart.TextSize.Y);
					Label_Line.TextSizeReal = DescriptionPart.TextFontSize;
					Label_Line.TextPrefix = DescriptionPart.TextPrefix;
					Label_Line.TextColor = DescriptionPart.TextColor;
					Label_Line.TextFont = DescriptionPart.TextFont;
					Label_Line.Value = DescriptionPart.TextValue;
					Label_Line.Size = DescriptionPart.TextSize;
					if (DescriptionPart.TextFitLabelEnabled) {
						ComponentMenuLibsTools_FitLabelValue(Label_Line, Label_Line.TextSizeReal, Label_Line.TextSizeReal / 10., Label_Line.TextSizeReal / 10.);
					}
					Label_Line.Show();
				} else {
					Label_Line.Hide();
				}
			}
		}
		ComponentMenuLibsGrid_Update(ComponentMenuLibsGrid_Compile(GridConfig).Config, ComponentPopUpMultiChoice2_State.Controls.Frame_DescriptionContainer, 10., False, False);
		ComponentPopUpMultiChoice2_State.Controls.Frame_DescriptionContainer.RelativePosition_V3 = ComponentMenuLibsHelpers_SkewX(<0., Pos_ContentArea.Y - Size_ContentArea.Y*0.1>, 10.);
	}

	// Define choices layout
	ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices.Visible = (ComponentPopUpMultiChoice2_State.MergedProperties.Choices.count > 2 || ComponentPopUpMultiChoice2_State.MergedProperties.ForceScrollView) && !ComponentPopUpMultiChoice2_State.MergedProperties.ForceHideChoices;
	MenuLibsExpendableButton_SetVisibilityAndNavigation(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, !ComponentPopUpMultiChoice2_State.MergedProperties.ForceScrollView && ComponentPopUpMultiChoice2_State.MergedProperties.Choices.count < 3 && !ComponentPopUpMultiChoice2_State.MergedProperties.ForceHideChoices);
	MenuLibsExpendableButton_SetVisibilityAndNavigation(ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice, !ComponentPopUpMultiChoice2_State.MergedProperties.ForceScrollView && ComponentPopUpMultiChoice2_State.MergedProperties.Choices.count == 2 && !ComponentPopUpMultiChoice2_State.MergedProperties.ForceHideChoices);
	if (ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice.Visible && !ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice.Visible) {
		ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice.RelativePosition_V3 = ComponentMenuLibsHelpers_SkewX(<0., Pos_ContentArea.Y - Size_ContentArea.Y*0.8>, 10.);
		MenuLibsExpendableButton_SetStyles(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, ComponentPopUpMultiChoice2_State.MergedProperties.StylesFirstChoice, False);
		MenuLibsExpendableButton_SetHAlign(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, CMlControl::AlignHorizontal::HCenter, False);
		MenuLibsExpendableButton_SetText(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, ComponentPopUpMultiChoice2_State.MergedProperties.Choices[0], False);
		MenuLibsExpendableButton_RedrawButton(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, _IsAnimated);
		MenuLibsScroll_SetElementsTotal(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, 0);
	}	else if (ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice.Visible && ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice.Visible) {
		ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice.RelativePosition_V3 = ComponentMenuLibsHelpers_SkewX(<-Size_ContentArea.X*0.35, Pos_ContentArea.Y - Size_ContentArea.Y*0.8>, 10.);
		ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice.RelativePosition_V3 = ComponentMenuLibsHelpers_SkewX(<Size_ContentArea.X*0.35, Pos_ContentArea.Y - Size_ContentArea.Y*0.8>, 10.);
		MenuLibsExpendableButton_SetStyles(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, ComponentPopUpMultiChoice2_State.MergedProperties.StylesFirstChoice, False);
		MenuLibsExpendableButton_SetStyles(ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice, ComponentPopUpMultiChoice2_State.MergedProperties.StylesSecondChoice, False);
		MenuLibsExpendableButton_SetText(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, ComponentPopUpMultiChoice2_State.MergedProperties.Choices[0], False);
		MenuLibsExpendableButton_SetText(ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice, ComponentPopUpMultiChoice2_State.MergedProperties.Choices[1], False);
		MenuLibsExpendableButton_SetHAlign(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, CMlControl::AlignHorizontal::Left, False);
		MenuLibsExpendableButton_SetHAlign(ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice, CMlControl::AlignHorizontal::Right, False);
		MenuLibsExpendableButton_RedrawButton(ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, _IsAnimated);
		MenuLibsExpendableButton_RedrawButton(ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice, _IsAnimated);
		MenuLibsScroll_SetElementsTotal(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, 0);
	} else if (ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices.Visible) {
		MenuLibsScroll_SetElementsTotal(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, ComponentPopUpMultiChoice2_State.MergedProperties.Choices.count);
		if (ComponentPopUpMultiChoice2_State.MergedProperties.ScrollFocusedChoiceKey >= 0 && ComponentPopUpMultiChoice2_State.MergedProperties.ScrollFocusedChoiceKey < ComponentPopUpMultiChoice2_State.MergedProperties.Choices.count) {
			MenuLibsScroll_SetFocusedElementKey(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, ComponentPopUpMultiChoice2_State.MergedProperties.ScrollFocusedChoiceKey, False, True);
		} else {
			MenuLibsScroll_SetFocusedElementKey(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices, 0, False, True);
		}
		MenuLibsScroll_ScrollToHeader(ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices);
		ComponentPopUpMultiChoice2_State.Controls.Frame_ScrollChoices.RelativePosition_V3.Y = 19. - 0.5 * (10. * (5 - ComponentPopUpMultiChoice2_ML::Min(ComponentPopUpMultiChoice2_State.MergedProperties.Choices.count, 5)));
	}

	// Update navigation
	ComponentNavigation_ChangeControlTargets(ComponentPopUpMultiChoice2_State.Controls.Frame_NavigationContainer, ComponentPopUpMultiChoice2_State.Controls.Button_FirstChoice, ComponentPopUpMultiChoice2_State.MergedProperties.NavigationInputs, ComponentPopUpMultiChoice2_State.MergedProperties.NavigationTargets);
	ComponentNavigation_ChangeControlTargets(ComponentPopUpMultiChoice2_State.Controls.Frame_NavigationContainer, ComponentPopUpMultiChoice2_State.Controls.Button_SecondChoice, ComponentPopUpMultiChoice2_State.MergedProperties.NavigationInputs, ComponentPopUpMultiChoice2_State.MergedProperties.NavigationTargets);
	ComponentPopUpMultiChoice2_Display(_Frame_PopUpMultiChoice, _Frame_PopUpMultiChoice.Visible, True, _IsAnimated);
}
Void ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(_Frame_PopUpMultiChoice, True);
}

// Redraw all pop-up with multiple choices
Void ComponentPopUpMultiChoice2_RedrawPopUpMultiChoices() {
	Page.GetClassChildren("class-component-popupmultichoice2", Page.MainFrame, True);
	foreach (Control in Page.GetClassChildren_Result) {
		declare CMlFrame Frame_PopUpMultiChoice = (Control as CMlFrame).Parent;
		if (ComponentPopUpMultiChoice2_IsPopUpMultiChoice(Frame_PopUpMultiChoice)) {
			ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(Frame_PopUpMultiChoice);
		}
	}
}

// Customize a property
Void ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(CMlFrame _Frame_PopUpMultiChoice, Integer _PropertyId, ComponentPopUpMultiChoice2_K_Properties _Properties, Boolean _Redraw) {
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	ComponentPopUpMultiChoice2_State.CustomizedProperties = ComponentPopUpMultiChoice2_Private_SetProperty(ComponentPopUpMultiChoice2_State.CustomizedProperties, _PropertyId, _Properties);
	if (_Redraw) ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(_Frame_PopUpMultiChoice);
}

// Reset a customized property
Void ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(CMlFrame _Frame_PopUpMultiChoice, Integer _PropertyId, Boolean _Redraw) {
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	ComponentPopUpMultiChoice2_State.CustomizedProperties.Enabled = ComponentPopUpMultiChoice2_Private_EnableProperty(ComponentPopUpMultiChoice2_State.CustomizedProperties.Enabled, _PropertyId, False);
	if (_Redraw) ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(_Frame_PopUpMultiChoice);
}

// Update the width of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetWidth(CMlFrame _Frame_PopUpMultiChoice, Real _Width, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_Width, ComponentPopUpMultiChoice2_K_Properties { Width = _Width }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetWidth(CMlFrame _Frame_PopUpMultiChoice, Real _Width) {
	ComponentPopUpMultiChoice2_SetWidth(_Frame_PopUpMultiChoice, _Width, True);
}
Void ComponentPopUpMultiChoice2_ResetWidth(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_Width, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetWidth(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetWidth(_Frame_PopUpMultiChoice, True);
}

// Update the horizontal alignment of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetHAlign(CMlFrame _Frame_PopUpMultiChoice, CMlControl::AlignHorizontal _HAlign, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_HAlign, ComponentPopUpMultiChoice2_K_Properties { HAlign = _HAlign }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetHAlign(CMlFrame _Frame_PopUpMultiChoice, CMlControl::AlignHorizontal _HAlign) {
	ComponentPopUpMultiChoice2_SetHAlign(_Frame_PopUpMultiChoice, _HAlign, True);
}
Void ComponentPopUpMultiChoice2_ResetHAlign(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_HAlign, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetHAlign(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetHAlign(_Frame_PopUpMultiChoice, True);
}

// Update the vertical alignment of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetVAlign(CMlFrame _Frame_PopUpMultiChoice, CMlControl::AlignVertical _VAlign, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_VAlign, ComponentPopUpMultiChoice2_K_Properties { VAlign = _VAlign }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetVAlign(CMlFrame _Frame_PopUpMultiChoice, CMlControl::AlignVertical _VAlign) {
	ComponentPopUpMultiChoice2_SetVAlign(_Frame_PopUpMultiChoice, _VAlign, True);
}
Void ComponentPopUpMultiChoice2_ResetVAlign(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_VAlign, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetVAlign(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetVAlign(_Frame_PopUpMultiChoice, True);
}

// Update the possibles choices of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetChoices(CMlFrame _Frame_PopUpMultiChoice, Text[Integer] _Choices, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_Choices, ComponentPopUpMultiChoice2_K_Properties { Choices = _Choices }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetChoices(CMlFrame _Frame_PopUpMultiChoice, Text[Integer] _Choices) {
	ComponentPopUpMultiChoice2_SetChoices(_Frame_PopUpMultiChoice, _Choices, True);
}
Void ComponentPopUpMultiChoice2_ResetChoices(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_Choices, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetChoices(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetChoices(_Frame_PopUpMultiChoice, True);
}

// Update the title of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetTitle(CMlFrame _Frame_PopUpMultiChoice, Text _Title, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleValue, ComponentPopUpMultiChoice2_K_Properties { TitleValue = _Title }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetTitle(CMlFrame _Frame_PopUpMultiChoice, Text _Title) {
	ComponentPopUpMultiChoice2_SetTitle(_Frame_PopUpMultiChoice, _Title, True);
}
Void ComponentPopUpMultiChoice2_ResetTitle(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleValue, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetTitle(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetTitle(_Frame_PopUpMultiChoice, True);
}

// Enable or disable the fit label on the button text
Void ComponentPopUpMultiChoice2_SetTitleFitLabelEnabled(CMlFrame _Frame_PopUpMultiChoice, Boolean _Enabled, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleFitLabelEnabled, ComponentPopUpMultiChoice2_K_Properties { TitleFitLabelEnabled = _Enabled }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetTitleFitLabelEnabled(CMlFrame _Frame_PopUpMultiChoice, Boolean _Enabled) {
	ComponentPopUpMultiChoice2_SetTitleFitLabelEnabled(_Frame_PopUpMultiChoice, _Enabled, True);
}
Void ComponentPopUpMultiChoice2_ResetTitleFitLabelEnabled(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleFitLabelEnabled, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetTitleFitLabelEnabled(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetTitleFitLabelEnabled(_Frame_PopUpMultiChoice, True);
}

// Update the font of the text displayed in the button
Void ComponentPopUpMultiChoice2_SetTitleFont(CMlFrame _Frame_PopUpMultiChoice, Text _Font, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleFont, ComponentPopUpMultiChoice2_K_Properties { TitleFont = _Font }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetTitleFont(CMlFrame _Frame_PopUpMultiChoice, Text _Font) {
	ComponentPopUpMultiChoice2_SetTitleFont(_Frame_PopUpMultiChoice, _Font, True);
}
Void ComponentPopUpMultiChoice2_ResetTitleFont(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleFont, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetTitleFont(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetTitleFont(_Frame_PopUpMultiChoice, True);
}

// Update the size of the text displayed in the button
Void ComponentPopUpMultiChoice2_SetTitleFontSize(CMlFrame _Frame_PopUpMultiChoice, Real _Size, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleFontSize, ComponentPopUpMultiChoice2_K_Properties { TitleFontSize = _Size }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetTitleFontSize(CMlFrame _Frame_PopUpMultiChoice, Real _Size) {
	ComponentPopUpMultiChoice2_SetTitleFontSize(_Frame_PopUpMultiChoice, _Size, True);
}
Void ComponentPopUpMultiChoice2_ResetTitleFontSize(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitleFontSize, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetTitleFontSize(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetTitleFontSize(_Frame_PopUpMultiChoice, True);
}

// Update the prefix of the text displayed in the button
Void ComponentPopUpMultiChoice2_SetTitlePrefix(CMlFrame _Frame_PopUpMultiChoice, Text _Prefix, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitlePrefix, ComponentPopUpMultiChoice2_K_Properties { TitlePrefix = _Prefix }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetTitlePrefix(CMlFrame _Frame_PopUpMultiChoice, Text _Prefix) {
	ComponentPopUpMultiChoice2_SetTitlePrefix(_Frame_PopUpMultiChoice, _Prefix, True);
}
Void ComponentPopUpMultiChoice2_ResetTitlePrefix(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_TitlePrefix, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetTitlePrefix(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetTitlePrefix(_Frame_PopUpMultiChoice, True);
}

// Update the possibles choices of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetDescription(CMlFrame _Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_K_DescriptionPart[] _Description, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_Description, ComponentPopUpMultiChoice2_K_Properties { Description = _Description }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetDescription(CMlFrame _Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_K_DescriptionPart[] _Description) {
	ComponentPopUpMultiChoice2_SetDescription(_Frame_PopUpMultiChoice, _Description, True);
}
Void ComponentPopUpMultiChoice2_ResetDescription(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_Description, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetDescription(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetDescription(_Frame_PopUpMultiChoice, True);
}

// Update the styles of the first choice button
Void ComponentPopUpMultiChoice2_SetStylesFirstChoice(CMlFrame _Frame_PopUpMultiChoice, Text[] _StylesFirstChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_StylesFirstChoice, ComponentPopUpMultiChoice2_K_Properties { StylesFirstChoice = _StylesFirstChoice }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetStylesFirstChoice(CMlFrame _Frame_PopUpMultiChoice, Text[] _StylesFirstChoice) {
	ComponentPopUpMultiChoice2_SetStylesFirstChoice(_Frame_PopUpMultiChoice, _StylesFirstChoice, True);
}
Void ComponentPopUpMultiChoice2_ResetStylesFirstChoice(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_StylesFirstChoice, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetStylesFirstChoice(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetStylesFirstChoice(_Frame_PopUpMultiChoice, True);
}

// Update the styles of the second choice button
Void ComponentPopUpMultiChoice2_SetStylesSecondChoice(CMlFrame _Frame_PopUpMultiChoice, Text[] _StylesSecondChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_StylesSecondChoice, ComponentPopUpMultiChoice2_K_Properties { StylesSecondChoice = _StylesSecondChoice }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetStylesSecondChoice(CMlFrame _Frame_PopUpMultiChoice, Text[] _StylesSecondChoice) {
	ComponentPopUpMultiChoice2_SetStylesSecondChoice(_Frame_PopUpMultiChoice, _StylesSecondChoice, True);
}
Void ComponentPopUpMultiChoice2_ResetStylesSecondChoice(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_StylesSecondChoice, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetStylesSecondChoice(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetStylesSecondChoice(_Frame_PopUpMultiChoice, True);
}

// Update the styles of the choice buttons inside the scroll
Void ComponentPopUpMultiChoice2_SetStylesScrollChoice(CMlFrame _Frame_PopUpMultiChoice, Text[] _StylesScrollChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_StylesScrollChoice, ComponentPopUpMultiChoice2_K_Properties { StylesScrollChoice = _StylesScrollChoice }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetStylesScrollChoice(CMlFrame _Frame_PopUpMultiChoice, Text[] _StylesScrollChoice) {
	ComponentPopUpMultiChoice2_SetStylesScrollChoice(_Frame_PopUpMultiChoice, _StylesScrollChoice, True);
}
Void ComponentPopUpMultiChoice2_ResetStylesScrollChoice(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_StylesScrollChoice, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetStylesScrollChoice(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetStylesScrollChoice(_Frame_PopUpMultiChoice, True);
}

// Update the styles of the choice buttons inside the scroll
Void ComponentPopUpMultiChoice2_SetForceScrollView(CMlFrame _Frame_PopUpMultiChoice, Boolean _ForceScrollView, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_ForceScrollView, ComponentPopUpMultiChoice2_K_Properties { ForceScrollView = _ForceScrollView }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetForceScrollView(CMlFrame _Frame_PopUpMultiChoice, Boolean _ForceScrollView) {
	ComponentPopUpMultiChoice2_SetForceScrollView(_Frame_PopUpMultiChoice, _ForceScrollView, True);
}
Void ComponentPopUpMultiChoice2_ResetForceScrollView(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_ForceScrollView, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetForceScrollView(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetForceScrollView(_Frame_PopUpMultiChoice, True);
}

// Update the focused element key inside the scroll (at pop up opening)
Void ComponentPopUpMultiChoice2_SetScrollFocusedChoiceKey(CMlFrame _Frame_PopUpMultiChoice, Integer _ScrollFocusedChoiceKey, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_ScrollFocusedChoiceKey, ComponentPopUpMultiChoice2_K_Properties { ScrollFocusedChoiceKey = _ScrollFocusedChoiceKey }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetScrollFocusedChoiceKey(CMlFrame _Frame_PopUpMultiChoice, Integer _ScrollFocusedChoiceKey) {
	ComponentPopUpMultiChoice2_SetScrollFocusedChoiceKey(_Frame_PopUpMultiChoice, _ScrollFocusedChoiceKey, True);
}
Void ComponentPopUpMultiChoice2_ResetScrollFocusedChoiceKey(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_ScrollFocusedChoiceKey, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetScrollFocusedChoiceKey(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetScrollFocusedChoiceKey(_Frame_PopUpMultiChoice, True);
}

// Update the navigation inputs of the buttons
Void ComponentPopUpMultiChoice2_SetNavigationInputs(CMlFrame _Frame_PopUpMultiChoice, Text[] _NavigationInputs, Boolean _Redraw) {
	assert(!_NavigationInputs.exists("select") && !_NavigationInputs.exists("cancel") && !_NavigationInputs.exists("left") && !_NavigationInputs.exists("right"), "`select`, `cancel`, `right` and `left` cannot be replaced.");
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_NavigationInputs, ComponentPopUpMultiChoice2_K_Properties { NavigationInputs = _NavigationInputs }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetNavigationInputs(CMlFrame _Frame_PopUpMultiChoice, Text[] _NavigationInputs) {
	ComponentPopUpMultiChoice2_SetNavigationInputs(_Frame_PopUpMultiChoice, _NavigationInputs, True);
}
Void ComponentPopUpMultiChoice2_ResetNavigationInputs(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_NavigationInputs, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetNavigationInputs(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetNavigationInputs(_Frame_PopUpMultiChoice, True);
}

// Update the navigation targets of the buttons
Void ComponentPopUpMultiChoice2_SetNavigationTargets(CMlFrame _Frame_PopUpMultiChoice, Text[] _NavigationTargets, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_NavigationTargets, ComponentPopUpMultiChoice2_K_Properties { NavigationTargets = _NavigationTargets }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetNavigationTargets(CMlFrame _Frame_PopUpMultiChoice, Text[] _NavigationTargets) {
	ComponentPopUpMultiChoice2_SetNavigationTargets(_Frame_PopUpMultiChoice, _NavigationTargets, True);
}
Void ComponentPopUpMultiChoice2_ResetNavigationTargets(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_NavigationTargets, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetNavigationTargets(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetNavigationTargets(_Frame_PopUpMultiChoice, True);
}

// Update the ForceHideChoices property of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetForceHideChoices(CMlFrame _Frame_PopUpMultiChoice, Boolean _Hide, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_SetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_ForceHideChoices, ComponentPopUpMultiChoice2_K_Properties { ForceHideChoices = _Hide }, _Redraw);
}
Void ComponentPopUpMultiChoice2_SetForceHideChoices(CMlFrame _Frame_PopUpMultiChoice, Boolean _Hide) {
	ComponentPopUpMultiChoice2_SetForceHideChoices(_Frame_PopUpMultiChoice, _Hide, True);
}
Void ComponentPopUpMultiChoice2_ResetForceHideChoices(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_Private_ResetCustomizedProperty(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_C_Property_ForceHideChoices, _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetForceHideChoices(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_ResetForceHideChoices(_Frame_PopUpMultiChoice, True);
}

// Update the styles of the pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetStyles(CMlFrame _Frame_PopUpMultiChoice, Text[] _StyleIds, Boolean _Redraw) {
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	ComponentPopUpMultiChoice2_State.Styles = _StyleIds;
	if (_Redraw) ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(_Frame_PopUpMultiChoice);
}
Void ComponentPopUpMultiChoice2_SetStyles(CMlFrame _Frame_PopUpMultiChoice, Text[] _StyleIds) {
	ComponentPopUpMultiChoice2_SetStyles(_Frame_PopUpMultiChoice, _StyleIds, True);
}
Void ComponentPopUpMultiChoice2_ResetStyles(CMlFrame _Frame_PopUpMultiChoice, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_SetStyles(_Frame_PopUpMultiChoice, [], _Redraw);
}
Void ComponentPopUpMultiChoice2_ResetStyles(CMlFrame _Frame_PopUpMultiChoice) {
	ComponentPopUpMultiChoice2_SetStyles(_Frame_PopUpMultiChoice, []);
}
Void ComponentPopUpMultiChoice2_AddStyle(CMlFrame _Frame_PopUpMultiChoice, Text _StyleId, Boolean _Redraw) {
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	if (!ComponentPopUpMultiChoice2_State.Styles.exists(_StyleId)) {
		ComponentPopUpMultiChoice2_State.Styles.add(_StyleId);
	}
	if (_Redraw) ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(_Frame_PopUpMultiChoice);
}
Void ComponentPopUpMultiChoice2_AddStyle(CMlFrame _Frame_PopUpMultiChoice, Text _StyleId) {
	ComponentPopUpMultiChoice2_AddStyle(_Frame_PopUpMultiChoice, _StyleId, True);
}
Void ComponentPopUpMultiChoice2_RemoveStyle(CMlFrame _Frame_PopUpMultiChoice, Text _StyleId, Boolean _Redraw) {
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	ComponentPopUpMultiChoice2_State.Styles.remove(_StyleId);
	if (_Redraw) ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(_Frame_PopUpMultiChoice);
}
Void ComponentPopUpMultiChoice2_RemoveStyle(CMlFrame _Frame_PopUpMultiChoice, Text _StyleId) {
	ComponentPopUpMultiChoice2_RemoveStyle(_Frame_PopUpMultiChoice, _StyleId, True);
}

// Set the default properties of all pop-up with multiple choices
Void ComponentPopUpMultiChoice2_SetPopUpMultiChoicesDefaultProperties(ComponentPopUpMultiChoice2_K_Properties _DefaultProperties, Boolean _Redraw) {
	ComponentPopUpMultiChoice2_G_DefaultProperties = _DefaultProperties;
	if (_Redraw) ComponentPopUpMultiChoice2_RedrawPopUpMultiChoices();
}
Void ComponentPopUpMultiChoice2_SetPopUpMultiChoicesDefaultProperties(ComponentPopUpMultiChoice2_K_Properties _DefaultProperties) {
	ComponentPopUpMultiChoice2_SetPopUpMultiChoicesDefaultProperties(_DefaultProperties, True);
}

// Create a new pop-up with multiple choices style
Void ComponentPopUpMultiChoice2_CreateStyle(Text _StyleId, ComponentPopUpMultiChoice2_K_Properties _Style) {
	ComponentPopUpMultiChoice2_G_Styles[_StyleId] = _Style;
}

// Define the property that requires a selection
Void ComponentPopUpMultiChoice2_SetSelectionIsRequired(CMlFrame _Frame_PopUpMultiChoice, Boolean _IsSelectionRequired) {
	assert(ComponentPopUpMultiChoice2_IsPopUpMultiChoice(_Frame_PopUpMultiChoice), _Frame_PopUpMultiChoice.ControlId^" is not an instance of the PopUpMultiChoice component.");
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	ComponentPopUpMultiChoice2_State.IsSelectionRequired = _IsSelectionRequired;
	TMNextPopUpBackground2_SetButtonLeaveEnable(ComponentPopUpMultiChoice2_State.Controls.Frame_Background, !_IsSelectionRequired);
}

// Set the property to automatically close the pop up after a selection
Void ComponentPopUpMultiChoice2_SetClosedAfterSelection(CMlFrame _Frame_PopUpMultiChoice, Boolean _IsClosedAfterSelection) {
	assert(ComponentPopUpMultiChoice2_IsPopUpMultiChoice(_Frame_PopUpMultiChoice), _Frame_PopUpMultiChoice.ControlId^" is not an instance of the PopUpMultiChoice component.");
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	ComponentPopUpMultiChoice2_State.IsClosedAfterSelection = _IsClosedAfterSelection;
}

// Initialize a pop-up with multiple choices
Void ComponentPopUpMultiChoice2_InitializePopUpMultiChoice(CMlFrame _Frame_PopUpMultiChoice) {
	declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for _Frame_PopUpMultiChoice;
	declare CMlFrame Button_FirstChoice <=> (_Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_button-first-choice") as CMlFrame);
	declare CMlFrame Button_SecondChoice <=> (_Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_button-second-choice") as CMlFrame);
	declare Integer ChoiceKey as FirstChoiceKey for Button_FirstChoice;
	FirstChoiceKey = 0;
	declare Integer ChoiceKey as SecondChoiceKey for Button_SecondChoice;
	SecondChoiceKey = 1;

	// Initialize the State structure
	ComponentPopUpMultiChoice2_State = ComponentPopUpMultiChoice2_K_State {
		Styles = [],
		IsSelectionRequired = False,
		IsClosedAfterSelection = True,
		IsPopUpMultiChoice = True,
		CustomContentControls = [],
		CustomizedProperties = ComponentPopUpMultiChoice2_K_Properties {},
		MergedProperties = ComponentPopUpMultiChoice2_K_Properties {},
		Controls = ComponentPopUpMultiChoice2_K_Controls {
			Button_FirstChoice = Button_FirstChoice,
			Button_SecondChoice = Button_SecondChoice,
			Frame_Background = (_Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_frame-background") as CMlFrame),
			Frame_DescriptionContainer = (_Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_frame-description-container") as CMlFrame),
			Frame_NavigationContainer = (_Frame_PopUpMultiChoice.GetFirstChild("navcontainer-component-popupmultichoice2") as CMlFrame),
			Frame_ScrollChoices = (_Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_frame-scroll-choices") as CMlFrame),
			Label_Title = (_Frame_PopUpMultiChoice.GetFirstChild("ComponentPopUpMultiChoice2_label-title") as CMlLabel)
		},
		LastFocusedControl = Null
	};

	// Get data attributes if they exists
	if (_Frame_PopUpMultiChoice.DataAttributeExists("selection-required")) {
		ComponentPopUpMultiChoice2_SetSelectionIsRequired(_Frame_PopUpMultiChoice, ComponentMenuLibsTools_TextToBoolean(_Frame_PopUpMultiChoice.DataAttributeGet("selection-required")));
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("close-after-selection")) {
		ComponentPopUpMultiChoice2_State.IsClosedAfterSelection = ComponentMenuLibsTools_TextToBoolean(_Frame_PopUpMultiChoice.DataAttributeGet("close-after-selection"));
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("width")) {
		ComponentPopUpMultiChoice2_SetWidth(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::ToReal(_Frame_PopUpMultiChoice.DataAttributeGet("width")), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("halign")) {
		ComponentPopUpMultiChoice2_SetHAlign(_Frame_PopUpMultiChoice, ComponentMenuLibsTools_TextToHAlign2(_Frame_PopUpMultiChoice.DataAttributeGet("halign")), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("valign")) {
		ComponentPopUpMultiChoice2_SetVAlign(_Frame_PopUpMultiChoice, ComponentMenuLibsTools_TextToVAlign2(_Frame_PopUpMultiChoice.DataAttributeGet("valign")), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("choices")) {
		declare Text[Integer] Choices;
		Choices.fromjson(_Frame_PopUpMultiChoice.DataAttributeGet("choices"));
		ComponentPopUpMultiChoice2_SetChoices(_Frame_PopUpMultiChoice, Choices, False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("title")) {
		ComponentPopUpMultiChoice2_SetTitle(_Frame_PopUpMultiChoice, _Frame_PopUpMultiChoice.DataAttributeGet("title"), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("title-fitlabel-enabled")) {
		ComponentPopUpMultiChoice2_SetTitleFitLabelEnabled(_Frame_PopUpMultiChoice, ComponentMenuLibsTools_TextToBoolean(_Frame_PopUpMultiChoice.DataAttributeGet("title-fitlabel-enabled")), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("title-textfont")) {
		ComponentPopUpMultiChoice2_SetTitleFont(_Frame_PopUpMultiChoice, _Frame_PopUpMultiChoice.DataAttributeGet("title-textfont"), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("title-textsize")) {
		ComponentPopUpMultiChoice2_SetTitleFontSize(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::ToReal(_Frame_PopUpMultiChoice.DataAttributeGet("title-textsize")), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("title-textprefix")) {
		ComponentPopUpMultiChoice2_SetTitlePrefix(_Frame_PopUpMultiChoice, _Frame_PopUpMultiChoice.DataAttributeGet("title-textprefix"), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("description")) {
		declare ComponentPopUpMultiChoice2_K_DescriptionPart[] Description;
		Description.fromjson(_Frame_PopUpMultiChoice.DataAttributeGet("description"));
		ComponentPopUpMultiChoice2_SetDescription(_Frame_PopUpMultiChoice, Description, False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("styles-firstchoice")) {
		ComponentPopUpMultiChoice2_SetStylesFirstChoice(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::Split(" ", ComponentPopUpMultiChoice2_TL::Trim(_Frame_PopUpMultiChoice.DataAttributeGet("styles-firstchoice"))), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("styles-secondchoice")) {
		ComponentPopUpMultiChoice2_SetStylesSecondChoice(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::Split(" ", ComponentPopUpMultiChoice2_TL::Trim(_Frame_PopUpMultiChoice.DataAttributeGet("styles-secondchoice"))), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("styles-scrollchoice")) {
		ComponentPopUpMultiChoice2_SetStylesScrollChoice(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::Split(" ", ComponentPopUpMultiChoice2_TL::Trim(_Frame_PopUpMultiChoice.DataAttributeGet("styles-scrollchoice"))), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("force-scrollview")) {
		ComponentPopUpMultiChoice2_SetForceScrollView(_Frame_PopUpMultiChoice, ComponentMenuLibsTools_TextToBoolean(_Frame_PopUpMultiChoice.DataAttributeGet("force-scrollview")), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("scroll-focused-choice-key")) {
		ComponentPopUpMultiChoice2_SetScrollFocusedChoiceKey(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::ToInteger(_Frame_PopUpMultiChoice.DataAttributeGet("scroll-focused-choice-key")), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("nav-inputs")) {
		ComponentPopUpMultiChoice2_SetNavigationInputs(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::Split(";", ComponentPopUpMultiChoice2_TL::Trim(_Frame_PopUpMultiChoice.DataAttributeGet("nav-inputs"))), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("nav-targets")) {
		ComponentPopUpMultiChoice2_SetNavigationTargets(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::Split(";", ComponentPopUpMultiChoice2_TL::Trim(_Frame_PopUpMultiChoice.DataAttributeGet("nav-targets"))), False);
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("custom-content-frame")) {
		ComponentPopUpMultiChoice2_State.Controls.Frame_CustomContent <=> (Page.GetFirstChild(_Frame_PopUpMultiChoice.DataAttributeGet("custom-content-frame")) as CMlFrame);
		if (ComponentPopUpMultiChoice2_State.Controls.Frame_CustomContent != Null) {
			Page.GetClassChildren("class-component-popupmultichoice2-navigation", ComponentPopUpMultiChoice2_State.Controls.Frame_CustomContent, True);
			foreach (Key => Control in Page.GetClassChildren_Result) {
				declare CMlControl CustomControl = Control;
				declare CMlFrame Frame_ParentPopUpMultiChoice for CustomControl;
				declare Integer ChoiceKey for CustomControl;
				ComponentPopUpMultiChoice2_State.CustomContentControls.add(CustomControl);
				Frame_ParentPopUpMultiChoice = _Frame_PopUpMultiChoice;
				ChoiceKey = -1;
			}
		}
	}
	if (_Frame_PopUpMultiChoice.DataAttributeExists("styles")) {
		ComponentPopUpMultiChoice2_SetStyles(_Frame_PopUpMultiChoice, ComponentPopUpMultiChoice2_TL::Split(" ", ComponentPopUpMultiChoice2_TL::Trim(_Frame_PopUpMultiChoice.DataAttributeGet("styles"))), False);
	}

	// Update containers of custom controls
	ComponentNavigation_ChangeNavigationContainers(ComponentPopUpMultiChoice2_State.CustomContentControls, ComponentPopUpMultiChoice2_State.Controls.Frame_NavigationContainer.Id);

	// Redraw the pop-up after initialization is complete
	ComponentPopUpMultiChoice2_RedrawPopUpMultiChoice(_Frame_PopUpMultiChoice, False);
}

// Initialize all pop-up with multiple choicess in the manialink
Void ComponentPopUpMultiChoice2_InitializePopUpMultiChoices() {
	Page.GetClassChildren("class-component-popupmultichoice2", Page.MainFrame, True);
	declare CMlControl[] PageClassChildrenControls = Page.GetClassChildren_Result;
	foreach (Control in PageClassChildrenControls) {
		ComponentPopUpMultiChoice2_InitializePopUpMultiChoice((Control as CMlFrame).Parent);
	}
}

***MainStart***
***
// Basic style for buttons
MenuLibsExpendableButton_CreateStyle("choice-style-button-default", [
	"component-tmnext-expendable-button-style-size-expendable",
	"component-tmnext-expendable-button-style-align-center",
	"component-tmnext-expendable-button-style-secondary"
]);

// Basic style for the choice scroll
MenuLibsExpendableButton_CreateStyle("choice-style-button-scroll", MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_Width,
		MenuLibsExpendableButton_C_Property_Height,
		MenuLibsExpendableButton_C_Property_HAlign,
		MenuLibsExpendableButton_C_Property_VAlign,
		MenuLibsExpendableButton_C_Property_TextFontSize,
		MenuLibsExpendableButton_C_Property_TextOpacityUnfocused,
		MenuLibsExpendableButton_C_Property_BackgroundImages,
		MenuLibsExpendableButton_C_Property_FocusImages
	],
	Width = 100.,
	Height = 9.,
	HAlign = CMlControl::AlignHorizontal::HCenter,
	VAlign = CMlControl::AlignVertical::Top,
	TextFontSize = 4.,
	TextOpacityUnfocused = 0.6,
	BackgroundImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {}
	],
	FocusImages = [
		MenuLibsExpendableButton_C_Position_Left => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Middle => MenuLibsExpendableButton_K_Image {},
		MenuLibsExpendableButton_C_Position_Right => MenuLibsExpendableButton_K_Image {}
	]
});

ComponentPopUpMultiChoice2_InitializePopUpMultiChoices();
***

***MainLoop***
***
ComponentPopUpMultiChoice2_PendingEvents = ComponentPopUpMultiChoice2_DelayedPendingEvents;
ComponentPopUpMultiChoice2_DelayedPendingEvents = [];

/* PopUpBackground events */
foreach (Event in TMNextPopUpBackground2_PendingEvents) {
	if (Event.PopUpBackground != Null && Event.PopUpBackground.ControlId == "ComponentPopUpMultiChoice2_frame-background") {
		switch (Event.Type) {
			case TMNextPopUpBackground2_C_EventType_Close: {
				ComponentPopUpMultiChoice2_Private_Close(ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(Event.PopUpBackground));
			}
		}
	}
}

/* Navigation events */
foreach (Event in ComponentNavigation_PendingEvents) {
	switch (Event.Type) {
		case ComponentNavigation_C_EventType_NavigateInput: {
			if (ComponentNavigation_IsEventFromGroup(Event, "navgroup-component-popupmultichoice2")) {
				switch (Event.Input) {
					case CMlScriptEvent::EMenuNavAction::Cancel: ComponentPopUpMultiChoice2_Private_Close(ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(Event.To));
					case CMlScriptEvent::EMenuNavAction::Select: ComponentPopUpMultiChoice2_Private_Select(Event.To);
					default: {
						declare CMlControl To = Event.To;
						if (Event.To != Null && ComponentNavigation_GetControlTarget(Event.From, Event.Input) == Event.To) {
							declare CMlControl[CMlScriptEvent::EMenuNavAction] NavigationMemory for Event.To;
							NavigationMemory[ComponentNavigation_InvertInput(Event.Input)] = Event.From;
						}
						if (Event.From != Null) {
							declare CMlControl[CMlScriptEvent::EMenuNavAction] NavigationMemory for Event.From;
							if (NavigationMemory.existskey(Event.Input) && !ComponentNavigation_IsLocked(NavigationMemory.get(Event.Input, Null))) {
								To = NavigationMemory[Event.Input];
							}
						}
						ComponentPopUpMultiChoice2_Private_Focus(Event.From, To, True);
					}
				}
			}
		}
		case ComponentNavigation_C_EventType_NavigateMouse: {
			if (ComponentNavigation_IsEventFromGroup(Event, "navgroup-component-popupmultichoice2")) {
				if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
					ComponentPopUpMultiChoice2_Private_Select(Event.To);
				} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
					ComponentPopUpMultiChoice2_Private_Focus(Event.From, Event.To, True);
				}
			}
		}
	}
}

/* Scroll events */
foreach (Event in MenuLibsScroll_PendingEvents) {
	if (Event.Scroll != Null && Event.Scroll.ControlId == "ComponentPopUpMultiChoice2_frame-scroll-choices") {
		switch (Event.Type) {
			case MenuLibsScroll_C_EventType_Cancel: ComponentPopUpMultiChoice2_Private_Close(ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(Event.To));
			case MenuLibsScroll_C_EventType_Select: ComponentPopUpMultiChoice2_Private_Select(Event.To);
			case MenuLibsScroll_C_EventType_Update: {
				declare ComponentPopUpMultiChoice2_K_State ComponentPopUpMultiChoice2_State for ComponentPopUpMultiChoice2_Private_GetPopUpMultiChoiceFrame(Event.Scroll);

				foreach (Key => Frame_Element in Event.ElementsVisible) {
					if (ComponentPopUpMultiChoice2_State.MergedProperties.Choices.existskey(Key)) {
						declare CMlFrame Button_Choice = (Frame_Element.GetFirstChild("ComponentPopUpMultiChoice2_button-choice") as CMlFrame);
						declare Text Choice = ComponentPopUpMultiChoice2_State.MergedProperties.Choices[Key];
						declare Integer ChoiceKey for Frame_Element;
						ChoiceKey = Key;

						MenuLibsExpendableButton_SetText(Button_Choice, Choice, False);
						MenuLibsExpendableButton_SetStyles(Button_Choice, ComponentPopUpMultiChoice2_State.MergedProperties.StylesScrollChoice, False);
						MenuLibsExpendableButton_RedrawButton(Button_Choice);
						Frame_Element.Show();
					}
				}
				foreach (Key => Frame_Element in Event.ElementsHidden) {
					declare Integer ChoiceKey for Frame_Element;
					ChoiceKey = -1;
					Frame_Element.Hide();
				}
			}
			case MenuLibsScroll_C_EventType_Focus: {
				if (Event.From != Null) MenuLibsExpendableButton_Unfocus(Event.From.GetFirstChild("ComponentPopUpMultiChoice2_button-choice") as CMlFrame);
				if (Event.To != Null && MenuLibsScroll_IsFocused(Event.Scroll)) MenuLibsExpendableButton_Focus(Event.To.GetFirstChild("ComponentPopUpMultiChoice2_button-choice") as CMlFrame);
				if (Event.IsMouse && Event.To != Null && !MenuLibsScroll_IsFocused(Event.Scroll)) {
					ComponentPopUpMultiChoice2_Private_Focus(ComponentNavigation_GetFocusedControl("navgroup-component-popupmultichoice2"), Event.Scroll, True);
				}
			}
		}
	}
}
***

// */
// @Component end component-popupmultichoice2

// @Component start lib-news-struct
// /*

LibNewsStruct_K_News LibNewsStruct_GetEmptyNews() {
	return LibNewsStruct_K_News {
		Id = LibNewsStruct_C_NewsNullId
	};
}

// */
// @Component end lib-news-struct

// @Component start lib-store-news
// /*

Void LibStoreNews_Action_LoadNews() {
	SendCustomEvent(LibStoreNews_C_Action_LoadNews, []);
}

LibNewsStruct_K_News[] LibStoreNews_GetNews(Text _Placement, Integer _Amount) {
	declare LibStoreNews_K_State LibStoreNews_State for System;

	// Return all news if we are using the default filter values
	if (_Placement == LibNewsStruct_C_Placement_Null && _Amount <= 0) return LibStoreNews_State.News;

	declare LibNewsStruct_K_News[] FilteredNews;
	foreach (News in LibStoreNews_State.News) {
		if (_Placement == LibNewsStruct_C_Placement_Null || News.Placement == _Placement) {
			FilteredNews.add(News);
			if (_Amount > 0 && FilteredNews.count >= _Amount) break;
		}
	}

	return FilteredNews;
}
LibNewsStruct_K_News[] LibStoreNews_GetNews(Text _Placement) {
	return LibStoreNews_GetNews(_Placement, -1);
}
LibNewsStruct_K_News[] LibStoreNews_GetNews() {
	return LibStoreNews_GetNews(LibNewsStruct_C_Placement_Null);
}

Void LibStoreNews_PreloadNewsMedia() {
	declare LibStoreNews_K_State LibStoreNews_State for System;
	foreach (Key => News in LibStoreNews_State.News) {
		if (News.MediaUrl != "" && News.MediaType == LibNewsStruct_C_MediaType_Image && !News.MediaPreloaded) {
			PreloadImage(News.MediaUrl);
			LibStoreNews_State.News[Key].MediaPreloaded = True;
		}
	}
}

***MainInit***
***
LibCommonStore_Subscribe(LibStoreNews_C_StoreId);
***

// */
// @Component end lib-store-news

// Display and create the 3D vehicle scene or destroy it
K_State Display3DScene(K_State _State, Boolean _IsVisible) {
	if (C_HideOldHomePage) return _State;

	declare K_State State = _State;

	if (_IsVisible) {
		if (State.Scene.SceneId == NullId) {
			State.Scene.SceneId = MenuSceneMgr.SceneCreate("Empty");
		}
		if (State.Scene.SceneId != NullId) {

			MenuSceneMgr.CameraSetLocation(State.Scene.SceneId, <0., 1., -8.5>, 1., 30.);
			MenuSceneMgr.PlaneReflectEnable(
				State.Scene.SceneId,
				0.63,
				// Same order as quads in MainBackground
				ComponentMainBackground_GetQuadNight(),
				ComponentMainBackground_GetQuadDay(),
				ComponentMainBackground_GetQuadMorning(),
				ComponentMainBackground_GetQuadEvening(),
				-2.1
			);
			MenuSceneMgr.CubeMapSetImage2ds(
				State.Scene.SceneId,
				C_ImageUrl_Menu_Matchmaking_CubeMap_Master[C_BackgroundMood_Night],
				C_ImageUrl_Menu_Matchmaking_CubeMap_Master[C_BackgroundMood_Day],
				C_ImageUrl_Menu_Matchmaking_CubeMap_Master[C_BackgroundMood_Morning],
				C_ImageUrl_Menu_Matchmaking_CubeMap_Master[C_BackgroundMood_Evening]
			);
			MenuSceneMgr.PlaneReflectRefresh();

			if (State.Scene.CurrentItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
			}
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
			}

			State.Scene.CurrentItemId = MenuSceneMgr.ItemCreate(
				State.Scene.SceneId,
				"CarSport",
				LocalUser.Model_CarSport_SkinName,
				LocalUser.Model_CarSport_SkinUrl
			);
			if (State.Scene.CurrentItemId != NullId) {
				MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.CurrentItemId, C_VehiclePosition, C_VehicleRotation, False);

				State.Scene.CurrentExtraItemId = MenuSceneMgr.ItemCreate(
					State.Scene.SceneId,
					"CharacterPilot",
					"Skins\\Models\\HelmetPilot\\Stadium.zip",
					""
				);
				if (State.Scene.CurrentExtraItemId != NullId) {
					MenuSceneMgr.ItemAttachTo(State.Scene.SceneId, State.Scene.CurrentExtraItemId, State.Scene.CurrentItemId);
				}
			}
		}
	} else {
		if (State.Scene.SceneId != NullId) {
			if (State.Scene.CurrentItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentItemId);
				State.Scene.CurrentItemId = NullId;
			}
			if (State.Scene.CurrentExtraItemId != NullId) {
				MenuSceneMgr.ItemDestroy(State.Scene.SceneId, State.Scene.CurrentExtraItemId);
				State.Scene.CurrentExtraItemId = NullId;
			}
			MenuSceneMgr.SceneDestroy(State.Scene.SceneId);
			State.Scene.SceneId = NullId;
		}
	}

	return State;
}

Void UpdateControllerInfo(K_State _State) {
	if (_State.Controls.PopUpMultiChoice_CrossPlay.Visible) {
		ComponentControllerInfo_SetButtons(["A" => _("Select")]);
	} else if (_State.Controls.PopUpMultiChoice_QuitGame.Visible) {
		ComponentControllerInfo_SetButtons(["A" => _("Select"), "B" => _("Back")]);
	} else {
		declare Text Echap = _("Quit");
		if (LibCommonLibsPlatform_IsFromFirstParty(System)) Echap = _("Back");
		if (LibUserStore_IsOfflineMode()) {
			ComponentControllerInfo_SetButtons(["A" => _("Select"), "scrollup" => "Â’|Widget|Profile", "B" => Echap]);
		} else {
			ComponentControllerInfo_SetButtons(["A" => _("Select"), "scrollup" => "Â’|Widget|Profile", "scrolldown" => "Â’|Widget|My club", "B" => Echap]);
		}
	}
}

Void Focus(CMlControl _From, CMlControl _To) {
	if (ComponentTransition_IsInTransition()) return;

	if (_From != Null) {
		ComponentNavigation_Unfocus(_From);
		if (ComponentTMNextButton_IsButton(_From)) {
			ComponentTMNextButton_Unfocus((_From as CMlFrame));
		} else if (MenuLibsExpendableButton_IsButton(_From)) {
			MenuLibsExpendableButton_Unfocus((_From as CMlFrame));
		} else if (ComponentCheckbox_IsCheckbox(_From)) {
			ComponentCheckbox_Unfocus(_From as CMlFrame);
		} else if (_From.HasClass("news-pager")) {
			AnimMgr.Flush(_From);
			AnimMgr.Add(_From, "<anim opacity=\"0\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
		}
	}

	if (_To != Null) {
		ComponentNavigation_Focus(_To);
		if (ComponentTMNextButton_IsButton(_To)) {
			ComponentTMNextButton_Focus((_To as CMlFrame));
		} else if (MenuLibsExpendableButton_IsButton(_To)) {
			MenuLibsExpendableButton_Focus((_To as CMlFrame));
		} else if (ComponentCheckbox_IsCheckbox(_To)) {
			ComponentCheckbox_Focus(_To as CMlFrame);
		} else if (_To.HasClass("news-pager")) {
			AnimMgr.Flush(_To);
			AnimMgr.Add(_To, "<anim opacity=\"0.4\" />", 250, CAnimManager::EAnimManagerEasing::Linear);
		}
	}
}

Void FinishNewsAnimation(K_State _State, Integer _CurrentNewsIndex) {
	// Set news data
	if (_State.Controls.Frame_NewsTabsButtonsOff.Controls.existskey(_CurrentNewsIndex)) {
		_State.Controls.Quad_News_Button_On.RelativePosition_V3.X = _State.Controls.Frame_NewsTabsButtonsOff.Controls[_CurrentNewsIndex].RelativePosition_V3.X;
	} else {
		_State.Controls.Quad_News_Button_On.RelativePosition_V3.X = 0.;
	}
	if (_State.News.existskey(_State.CurrentNewsIndex)) _State.Controls.Label_News.Value = _State.News[_State.CurrentNewsIndex].Title;
	ComponentMenuLibsTools_FitLabelValue(_State.Controls.Label_News, 2., 0.75, 0.25);

	// Finish fade animation
	declare Integer FadeOutDuration = C_AutoFadeOutDuration;
	if (_State.IsManualNewsSwitch) {
		FadeOutDuration = C_ManualFadeOutDuration;
	}
	AnimMgr.Add(_State.Controls.Label_News, "<anim opacity=\"1.\" />", FadeOutDuration, CAnimManager::EAnimManagerEasing::Linear);
	AnimMgr.Add(_State.Controls.Quad_News_Button_On, "<anim opacity=\"1.\" />", FadeOutDuration, CAnimManager::EAnimManagerEasing::Linear);
}

K_State UpdateNewsDisplay(K_State _State, Integer _Shift, Boolean _ManualSwitch) {
	declare K_State State = _State;

	State.NewsChangeTime = Now + C_NewsDisplayDuration;

	if (State.News.count <= 0) {
		State.CurrentNewsIndex = 0;
	} else {
		State.CurrentNewsIndex += _Shift;
		if (State.CurrentNewsIndex < 0) State.CurrentNewsIndex = State.News.count - 1;
		else if (State.CurrentNewsIndex > State.News.count - 1) State.CurrentNewsIndex = 0;
	}
	State.Controls.Frame_News_Tabs.Visible = State.News.count > 1;

	if (State.News.existskey(State.CurrentNewsIndex)) {
		State.Controls.Quad_Tmp_News_Img.ChangeImageUrl(ComponentTMNextButton_GetImage(State.Controls.Button_News));
		State.Controls.Quad_Tmp_News_Img.Opacity = 1.;

		declare Text MediaUrl = State.News[State.CurrentNewsIndex].MediaUrl;
		if (MediaUrl != "") {
			ComponentTMNextButton_SetImage(State.Controls.Button_News, MediaUrl);
			ComponentTMNextButton_SetImageFocus(State.Controls.Button_News, MediaUrl);
		} else {
			ComponentTMNextButton_SetImage(State.Controls.Button_News, "file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_BG.dds");
			ComponentTMNextButton_SetImageFocus(State.Controls.Button_News, "file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_BG.dds");
		}

		// Start fade animation
		AnimMgr.Flush(State.Controls.Label_News);
		AnimMgr.Flush(State.Controls.Quad_Tmp_News_Img);
		AnimMgr.Flush(State.Controls.Quad_News_Button_On);
		declare Integer FadeInDuration = C_AutoFadeInDuration;
		declare Integer FadeOutDuration = C_AutoFadeOutDuration;
		declare Integer FadeGap = C_AutoFadeGap;
		State.IsManualNewsSwitch = _ManualSwitch;
		if (_ManualSwitch) {
			FadeInDuration = C_ManualFadeInDuration;
			FadeOutDuration = C_ManualFadeOutDuration;
			FadeGap = C_ManualFadeGap;
		}
		AnimMgr.Add(State.Controls.Label_News, "<anim opacity=\"0.\" />", FadeInDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Quad_Tmp_News_Img, "<anim opacity=\"0.\" />", FadeInDuration + FadeGap + FadeOutDuration, CAnimManager::EAnimManagerEasing::Linear);
		AnimMgr.Add(State.Controls.Quad_News_Button_On, "<anim opacity=\"0.\" />", FadeInDuration, CAnimManager::EAnimManagerEasing::Linear);
		State.NewsAnimEndTime = Now + FadeInDuration + FadeGap;
	} else {
		State.Controls.Label_News.Value = "";
		ComponentTMNextButton_SetImage(State.Controls.Button_News, "file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_BG.dds");
		ComponentTMNextButton_SetImageFocus(State.Controls.Button_News, "file://Media/Manialinks/Nadeo/TMNext/Menus/PageHome/Menu_Home_News_BG.dds");
	}

	return State;
}

Void AlignNewsTabs(K_State _State) {
	declare Real SizeX_AllButtons = 0.;
	if (_State.News.count > 0) SizeX_AllButtons = (_State.News.count * 2.5) + (_State.News.count - 1 * 1.);
	foreach (Key => Control in _State.Controls.Frame_NewsTabsButtonsOff.Controls) {
		if (Key < _State.News.count) {
			Control.RelativePosition_V3.X = (SizeX_AllButtons * -0.5) + (2.5 * 0.5) + (Key * (2.5 + 1.));
			Control.Visible = True;
		} else {
			Control.Visible = False;
		}
	}
	foreach (Key => Control in _State.Controls.Frame_NewsTabsButtonsFocus.Controls) {
		if (Key < _State.News.count) {
			Control.RelativePosition_V3.X = (SizeX_AllButtons * -0.5) + (2.5 * 0.5) + (Key * (2.5 + 1.));
			Control.Visible = True;
		} else {
			Control.Visible = False;
		}
	}
}

K_State UpdateNews(K_State _State) {
	declare K_State State = _State;

	State.News = LibStoreNews_GetNews(LibNewsStruct_C_Placement_Homepage, C_MaxNewsDisplayed);
	AlignNewsTabs(State);
	State = UpdateNewsDisplay(State, 0, False);

	return State;
}

K_State Steer(K_State _State, Real _SteerTarget) {
	if (_State.Scene.SceneId == NullId) return _State;

	declare K_State State = _State;
	State.Scene.SteerTarget = _SteerTarget;
	State.Scene.SteerAnim = True;
	State.Scene.SteerAnimStartTime = Now;
	return State;
}

K_State Boost(K_State _State, Integer _BoostType, Real _PosYTarget) {
	if (_State.Scene.SceneId == NullId) return _State;

	declare K_State State = _State;
	State.Scene.CurrentBoost = _BoostType;
	State.Scene.TargetPosY = _PosYTarget;
	if (State.Scene.SceneId != NullId && State.Scene.CurrentItemId != NullId) {
		MenuSceneMgr.ItemSetVehicleState(State.Scene.SceneId, State.Scene.CurrentItemId, State.Scene.CurrentSteer, False, False, 0, State.Scene.CurrentBoost, False);
	}
	State.Scene.BoostAnim = True;
	State.Scene.BoostAnimStartTime = Now;
	return State;
}

K_State Select(CMlControl _Control, K_State _State) {
	if (_Control == Null || ComponentTransition_IsInTransition()) return _State;
	declare K_State State = _State;

	switch (_Control.ControlId) {
		case "button-play": {
			switch (LibUserStore_GetCurrentPlayTabIndex()) {
				case 0: Router_Push("/solo");
				case 1: Router_Push("/live");
				case 2: Router_Push("/local");
				default: Router_Push("/solo");
			}
		}
		case "button-clubs": {
			if (LibUserStore_IsOfflineMode()) {
				ComponentPopUpMultiChoice2_SetDescription(State.Controls.PopUpMultiChoice_QuitGame, [
					ComponentPopUpMultiChoice2_CreateDescriptionPart("Â’You cannot access this feature when you are offline.", <130., 20.>, 3., "GameFontSemiBold", "$t$i", <1., 1., 1.>, False)
				]);
				ComponentPopUpMultiChoice2_Open(State.Controls.PopUpMultiChoice_QuitGame);
			} else {
				Router_Push("/clubs");
			}
		}
		case "button-create": Router_Push("/create");
		case "button-ubi-connect": State.Task_OpenUplayOverlay = LibCommonTask_DestroyAndCreate(State.Task_OpenUplayOverlay, UserMgr, UserMgr.Uplay_OpenOverlay(LibUserStore_GetMainUserId(), CUserV2Manager::EUplayOverlaySection::Home));
		case "button-news": {
			// We put every links in a list and will try to open them all until one work
			if (!LibCommonTask_IsInitialized(State.Task_OpenNewsLink) && State.News.existskey(State.CurrentNewsIndex)) {
				State.PendingLinksList = State.News[State.CurrentNewsIndex].Links;
				State.Task_OpenNewsLink = LibCommonTask_Destroy(State.Task_OpenNewsLink);
			}
		}
		case "button-settings": {
			Router_SetParentPath("/settings", "/home");
			Router_Push("/settings");
		}
	}

	if (_Control.HasClass("news-pager") && _Control.DataAttributeExists("key")) {
		declare Integer Shift = TL::ToInteger(_Control.DataAttributeGet("key")) - State.CurrentNewsIndex;
		if (Shift != 0) {
			State = UpdateNewsDisplay(State, Shift, True);
		}
	}

	return State;
}

***MainInit***
***
declare CMlFrame Frame_Global;

declare Real FloatingEffectTimer;
declare K_State State;
MenuLibsExpendableButton_CreateStyle("expendable-button-style-stack-homepage", MenuLibsExpendableButton_K_Properties {
	Enabled = [
		MenuLibsExpendableButton_C_Property_Width,
		MenuLibsExpendableButton_C_Property_Height,
		MenuLibsExpendableButton_C_Property_HAlign,
		MenuLibsExpendableButton_C_Property_VAlign,
		MenuLibsExpendableButton_C_Property_TextFontSize,
		MenuLibsExpendableButton_C_Property_TextHAlign
	],
	Width = 82.32,
	Height = 11.76,
	HAlign = CMlControl::AlignHorizontal::HCenter,
	VAlign = CMlControl::AlignVertical::VCenter,
	TextFontSize = 5.,
	TextHAlign = CMlControl::AlignHorizontal::Left
});
***

***MainStart***
***
Frame_Global <=> (Page.GetFirstChild("frame-global") as CMlFrame);

State = K_State {
	Controls = K_Controls {
		Frame_News_Tabs = (Frame_Global.GetFirstChild("frame-news-tabs") as CMlFrame),
		Label_News = (Frame_Global.GetFirstChild("label-news") as CMlLabel),
		Button_News = (Frame_Global.GetFirstChild("button-news") as CMlFrame),
		Button_Play = (Frame_Global.GetFirstChild("button-play") as CMlFrame),
		Frame_NewsTabsButtonsOff = (Frame_Global.GetFirstChild("frame-news-tabs-buttons-off") as CMlFrame),
		Frame_NewsTabsButtonsFocus = (Frame_Global.GetFirstChild("frame-news-tabs-buttons-focus") as CMlFrame),
		Quad_News_Button_On = (Frame_Global.GetFirstChild("quad-button-on") as CMlQuad),
		Quad_Tmp_News_Img = (Frame_Global.GetFirstChild("quad-tmp-news-image") as CMlQuad),
		PopUpMultiChoice_CrossPlay = (Page.GetFirstChild("popupmultichoice-cross-play") as CMlFrame),
		PopUpMultiChoice_QuitGame = (Page.GetFirstChild("popupmultichoice-quit-game") as CMlFrame)
	},
	Task_OpenUplayOverlay = LibCommonTask_GetEmptyTask(),
	Task_OpenNewsLink = LibCommonTask_GetEmptyTask(),
	News = [],
	PendingLinksList = [],
	CurrentNewsIndex = -1,
	NewsAnimEndTime = -1,
	NewsChangeTime = -1,
	IsManualNewsSwitch = False,
	Scene = K_Scene {
		SceneId = NullId,
		CurrentItemId = NullId,
		CurrentExtraItemId = NullId,
		CurrentSteer = 0.,
		SteerTarget = 0.,
		SteerAnim = False,
		SteerAnimStartTime = -1,
		BoostAnim = False,
		BoostAnimStartTime = -1,
		CurrentBoost = C_NoBoost,
		CurrentPosY = 0.,
		TargetPosY = 0.,
		NextPossibleBoostTime = -1
	}
};

State = UpdateNews(State);
Focus(ComponentNavigation_GetFocusedControl("navgroup-home-page"), State.Controls.Button_Play);
***

***MainLoop***
***
if (Router_PageIsRunning("/home")) {
	// It does not cost much to do it every frame and it fixes the loading time of the background
	if (State.Scene.SceneId != NullId) MenuSceneMgr.PlaneReflectRefresh();

	foreach (Event in Router_PendingEvents) {
		if (Event.Type == Router_C_Event_EnteringRoute) {
			State = UpdateNews(State);
			State = Display3DScene(State, True);
			State.Scene.NextPossibleBoostTime = Now;
			LibUserStore_Action_VerifyCrossPlayActivation();
			ComponentPopUpMultiChoice2_Display(State.Controls.PopUpMultiChoice_CrossPlay,
				LibUserStore_IsCrossPlayActive() &&
				!LibUserStore_GetUserHasSeenCrossPlayWarning() &&
				(False || !LibCommonLibsPlatform_IsPC(System)),
				True
			);
		}
	}

	// Change current news displayed every 8sec
	if (State.News.count > 1 && State.NewsChangeTime > 0 && State.NewsChangeTime <= Now) {
		declare CMlControl CurrentFocusedControl = ComponentNavigation_GetFocusedControl("navgroup-home-page");
		if (CurrentFocusedControl == Null || (CurrentFocusedControl != Null && !CurrentFocusedControl.HasClass("page-home-class-news"))) State = UpdateNewsDisplay(State, 1, False);
	}
	if (State.NewsAnimEndTime > 0 && State.NewsAnimEndTime <= Now) {
		FinishNewsAnimation(State, State.CurrentNewsIndex);
		State.NewsAnimEndTime = -1;
		State.IsManualNewsSwitch = False;
	}

	foreach (Event in ComponentNavigation_PendingEvents) {
		switch (Event.Type) {
			case ComponentNavigation_C_EventType_NavigateInput: {
				if (ComponentNavigation_IsEventFromGroup(Event, "navgroup-home-page")) {
					if (Event.Input == CMlScriptEvent::EMenuNavAction::Select) {
						State = Select(Event.To, State);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Cancel) {
						if (LibCommonLibsPlatform_IsFromFirstParty(System)) {
							ComponentPopUpMultiChoice2_SetDescription(State.Controls.PopUpMultiChoice_QuitGame, [
								ComponentPopUpMultiChoice2_CreateDescriptionPart("Â’Go back to the title screen?", <130., 30.>, 3., "GameFontSemiBold", "$t$i", <1., 1., 1.>, False)
							]);
						} else {
							ComponentPopUpMultiChoice2_SetDescription(State.Controls.PopUpMultiChoice_QuitGame, [
								ComponentPopUpMultiChoice2_CreateDescriptionPart("Â’Are you sure you want to quit Trackmania?", <130., 30.>, 3., "GameFontSemiBold", "$t$i", <1., 1., 1.>, False)
							]);
						}
						ComponentPopUpMultiChoice2_Open(State.Controls.PopUpMultiChoice_QuitGame);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Left) {
						// Display previous new
						if (Event.From.HasClass("page-home-class-news") && State.News.count > 1) State = UpdateNewsDisplay(State, -1, True);
						// Vehicle left steer animation
						if (!State.Scene.SteerAnim && !State.Scene.BoostAnim && State.Scene.CurrentSteer != C_SteerLeftTarget) State = Steer(State, C_SteerLeftTarget);
					} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Right) {
						// Display next new
						if (Event.From.HasClass("page-home-class-news") && State.News.count > 1) State = UpdateNewsDisplay(State, 1, True);
						// Vehicle right steer animation
						if (!State.Scene.SteerAnim && !State.Scene.BoostAnim && State.Scene.CurrentSteer != C_SteerRightTarget) State = Steer(State, C_SteerRightTarget);
					} else {
						if (Event.Input == CMlScriptEvent::EMenuNavAction::Up && !State.Scene.SteerAnim && Now >= State.Scene.NextPossibleBoostTime) {
							if (!State.Scene.BoostAnim && State.Scene.CurrentBoost == C_NoBoost) State = Boost(State, C_BoostUp, C_UpPosY);
						} else if (Event.Input == CMlScriptEvent::EMenuNavAction::Down && !State.Scene.SteerAnim && Now >= State.Scene.NextPossibleBoostTime) {
							if (!State.Scene.BoostAnim && State.Scene.CurrentBoost == C_BoostUp) State = Boost(State, C_BoostDown, C_DownPosY);
						}
						Focus(Event.From, Event.To);
					}
				}
			}
			case ComponentNavigation_C_EventType_NavigateMouse: {
				if (ComponentNavigation_IsEventFromGroup(Event, "navgroup-home-page")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(Event.To, State);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver) {
						Focus(Event.From, Event.To);
					}
				} else if (ComponentNavigation_IsEventFromGroup(Event, "navgroup-home-page-mouseonly")) {
					if (Event.Mouse == CMlScriptEvent::Type::MouseClick) {
						State = Select(Event.To, State);
					} else if (Event.Mouse == CMlScriptEvent::Type::MouseOver || Event.Mouse == CMlScriptEvent::Type::MouseOut) {
						Focus(Event.From, Event.To);
					}
				}
			}
		}
	}

	// Right and left steer animation
	if (State.Scene.SteerAnim) {
		declare Integer AnimDuration = C_SteerAnimDuration;
		if (State.Scene.CurrentSteer == 0.) AnimDuration = C_SteerAnimDuration / 2;
		declare Real DeltaSteer = State.Scene.SteerTarget - State.Scene.CurrentSteer;
		declare Real SteerValue = AL::EaseOutQuad(Now - State.Scene.SteerAnimStartTime, State.Scene.CurrentSteer, DeltaSteer, AnimDuration);
		if (State.Scene.SceneId != NullId && State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemSetVehicleState(State.Scene.SceneId, State.Scene.CurrentItemId, SteerValue, False, False, 0, State.Scene.CurrentBoost, False);
		}
		if (SteerValue == State.Scene.SteerTarget) {
			State.Scene.SteerAnim = False;
			State.Scene.CurrentSteer = SteerValue;
		}
	}

	// Up and down boost animation
	if (State.Scene.BoostAnim) {
		declare Real DeltaPos = State.Scene.TargetPosY - State.Scene.CurrentPosY;
		declare Real PosY = AL::EaseOutQuad(Now - State.Scene.BoostAnimStartTime, State.Scene.CurrentPosY, DeltaPos, C_BoostAnimDuration);
		declare Vec3 VehiclePosition = C_VehiclePosition;
		VehiclePosition.Y = PosY;
		if (State.Scene.SceneId != NullId && State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.CurrentItemId, VehiclePosition, C_VehicleRotation, False);
		}
		if (PosY == State.Scene.TargetPosY) {
			State.Scene.BoostAnim = False;
			State.Scene.CurrentPosY = PosY;
			if (State.Scene.CurrentBoost == C_BoostDown) {
				FloatingEffectTimer = 0.;
				State.Scene.CurrentBoost = C_NoBoost;
				if (State.Scene.SceneId != NullId && State.Scene.CurrentItemId != NullId) {
					MenuSceneMgr.ItemSetVehicleState(State.Scene.SceneId, State.Scene.CurrentItemId, State.Scene.CurrentSteer, False, False, 0, State.Scene.CurrentBoost, False);
				}
				State.Scene.NextPossibleBoostTime = Now + ML::Rand(C_Boost_MinCooldown, C_Boost_MaxCooldown);
			}
		}
	}

	// Floating effect (when boost up)
	if (State.Scene.CurrentPosY == C_UpPosY && !State.Scene.BoostAnim) {
		declare Vec3 VehiclePosition = C_VehiclePosition;
		VehiclePosition.Y = C_UpPosY + (0.01 * ML::Sin(FloatingEffectTimer));
		FloatingEffectTimer += 0.02;
		if (State.Scene.SceneId != NullId && State.Scene.CurrentItemId != NullId) {
			MenuSceneMgr.ItemSetLocation(State.Scene.SceneId, State.Scene.CurrentItemId, VehiclePosition, C_VehicleRotation, False);
		}
	}

	foreach (Event in ComponentMainBackground_PendingEvents) {
		if (Event.Type == ComponentMainBackground_C_EventType_UpdateOpacities) {
			if (State.Scene.SceneId != NullId) {
				MenuSceneMgr.PlaneReflectRefresh();
				if (
					Event.DayPart == ComponentMainBackground_C_DayPart_SunsetNight ||
					Event.DayPart == ComponentMainBackground_C_DayPart_Night
				) {
					MenuSceneMgr.LightDir0Set(State.Scene.SceneId, <0.75, 0.75, 0.75>, 0.5);
				} else {
					MenuSceneMgr.LightDir0Set(State.Scene.SceneId, <0.75, 0.75, 0.75>, 1.5);
				}
			}
		}
	}

	/* PopUpMultiChoice events */
	foreach (Event in ComponentPopUpMultiChoice2_PendingEvents) {
		if (Event.PopUpMultiChoice != Null) {
			switch (Event.Type) {
				case ComponentPopUpMultiChoice2_C_EventType_Display: {
					ComponentNavigation_EnableGroup("navgroup-home-page", !Event.PopUpMultiChoice.Visible);
					Router_LockOverlay("Overlay_ClubWidget", Event.PopUpMultiChoice.Visible);
					Router_LockOverlay("Overlay_ProfileWidget", Event.PopUpMultiChoice.Visible);
					UpdateControllerInfo(State);
				}
				case ComponentPopUpMultiChoice2_C_EventType_Select: {
					switch (Event.PopUpMultiChoice.ControlId) {
						case State.Controls.PopUpMultiChoice_CrossPlay.ControlId: {
							LibUserStore_SetUserHasSeenCrossPlayWarning(True);
						}
						case State.Controls.PopUpMultiChoice_QuitGame.ControlId: {
							switch (Event.SelectedIndex) {
								case C_Choice_Quit: {
									if (LibCommonLibsPlatform_IsFromFirstParty(System)) {
										Router_Push("/press-start");
									} else {
										ParentApp.Menu_Quit();
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Open Uplay Overlay task
	if (LibCommonTask_IsInitialized(State.Task_OpenUplayOverlay)) {
		State.Task_OpenUplayOverlay = LibCommonTask_Update(State.Task_OpenUplayOverlay);
		if (!LibCommonTask_IsRunning(State.Task_OpenUplayOverlay)) {
			State.Task_OpenUplayOverlay = LibCommonTask_Destroy(State.Task_OpenUplayOverlay);
		}
	}

	// Open a news links
	if (State.PendingLinksList.count > 0 && !LibCommonTask_IsInitialized(State.Task_OpenNewsLink)) {
		State.Task_OpenNewsLink = LibCommonTask_DestroyAndCreate(
			State.Task_OpenNewsLink,
			UserMgr,
			UserMgr.News_OpenLink(LibUserStore_GetMainUserId(), State.PendingLinksList[0].Type, State.PendingLinksList[0].Param)
		);
		State.PendingLinksList.removekey(0);
	}
	if (LibCommonTask_IsInitialized(State.Task_OpenNewsLink)) {
		State.Task_OpenNewsLink = LibCommonTask_Update(State.Task_OpenNewsLink);
		if (!LibCommonTask_IsRunning(State.Task_OpenNewsLink)) {
			if (LibCommonTask_IsSuccess(State.Task_OpenNewsLink)) {
				State.PendingLinksList = [];
			}
			State.Task_OpenNewsLink = LibCommonTask_Destroy(State.Task_OpenNewsLink);
		}
	}
}

foreach (Event in Router_PendingEvents) {
	if (Event.Type == Router_C_Event_LeavingRoute) {
		// Reset vehicle animations params
		State.Scene.CurrentBoost = C_NoBoost;
		State.Scene.BoostAnim = False;
		State.Scene.CurrentPosY = C_DownPosY;
		State.Scene.SteerAnim = False;
		State.Scene.CurrentSteer = 0.;
		State = Display3DScene(State, False);
		if (State.Controls.PopUpMultiChoice_QuitGame.Visible) {
			ComponentPopUpMultiChoice2_Close(State.Controls.PopUpMultiChoice_QuitGame);
			ComponentNavigation_EnableGroup("navgroup-home-page", True);
		}
	}
}
***


Void ManiaView_DoNothing() {}

main() {
	+++MainInit+++
	+++MainStart+++
	while (True) {
		yield;
		+++MainLoop+++
	}
	+++MainEnd+++
}
--></script>
</manialink>
